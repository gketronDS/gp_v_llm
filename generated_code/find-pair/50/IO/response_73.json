{"submission": "```python\ndef my_func(input1, input2:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [2, 20] with each integer in [-10000, 10000], integer in [-20000, 20000]. The function should output 2 integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([237 410 -777],-540) == 237,-777\nmy_func([6688 5084 -2807 1067],2277) == 5084,-2807\nmy_func([718 4812 -5739 3714 7388 -5443],-631) == 4812,-5443\nmy_func([-1 0 1],1) == 0,1\nmy_func([9492 -3791 -7317],2175) == 9492,-7317\nmy_func([6703 6729],13432) == 6703,6729\nmy_func([5 7],12) == 5,7\nmy_func([-3989 4639 -4986 9496 -7036 2208 665],2873) == 2208,665\nmy_func([4036 -79 -5817 -8648 2149 2727 3274 -8081 -8679 -7119 -285 1260 -7843 8106 5710 9372 443 -1390],-7400) == -7843,443\nmy_func([-2346 -2612 6501 2019 9880 -5829 6220 -9344],4155) == -2346,6501\nmy_func([-7068 -3029 9090 -8561 -7770],1320) == 9090,-7770\nmy_func([-1871 -3707 4969 9166 -9360 9029 8938 -658 -3115 -5576 1637 -3297 3089 -100 1159 -6065 4734 6290 -52],3362) == 8938,-5576\nmy_func([-7126 -4140 5117 -3464 765 3009 1785 -4663 -6302 -5184 3043 3997 9880],5217) == -4663,9880\nmy_func([2062 -9536 -9052 -7356],-6990) == 2062,-9052\nmy_func([8310 -8320],-10) == 8310,-8320\nmy_func([-3762 3989 8804 534 982 -8594 -9814 3134 1556],-9280) == 534,-9814\nmy_func([2500 6352],8852) == 2500,6352\nmy_func([-3819 3267 4123 3909 -9570],-6303) == 3267,-9570\nmy_func([237 410 -777],-367) == 410,-777\nmy_func([-1241 3610 6254 3615 -2629 503 -3379],3625) == 6254,-2629\nmy_func([3428 9705 617 -3766 6428 1012],16133) == 9705,6428\nmy_func([14 -35 78],-21) == 14,-35\nmy_func([-4 4],0) == -4,4\nmy_func([-1 0 1],-1) == -1,0\nmy_func([9271 3619 -1187 -1117 -9741 9671 -3973 9998 3161 -1236 2109],-7632) == -9741,2109\nmy_func([-3170 8626 3791 -4694 6917 1246 -2430 -7854],-11024) == -3170,-7854\nmy_func([-5 -20],-25) == -5,-20\nmy_func([14 -35 78],43) == -35,78\nmy_func([-9206 9036 1284 -8006 8279 4152 -9092 5222 -3721 -7995 8496 -2411],-3870) == -9092,5222\nmy_func([0 1234],1234) == 0,1234\nmy_func([9492 -3791 -7317],-11108) == -3791,-7317\nmy_func([237 410 -777],647) == 237,410\nmy_func([1 3 5],6) == 1,5\nmy_func([-8777 -1522 -8878 -4750 1464 9709 7976 -1611 1 -6915 -8107 5354 9751 -3839 -508 718 829 -1605 9827],9201) == 9709,-508\nmy_func([-14 5],-9) == -14,5\nmy_func([10000 -10000],0) == 10000,-10000\nmy_func([8807 8853 -9932 6972 5367],15779) == 8807,6972\nmy_func([1 3 5],8) == 3,5\nmy_func([6969 753 -6735 3747 -1126 -8906 -442 -5161 -714 -8410 2063 -763 9216 5690 4408 9461],-7449) == -6735,-714\nmy_func([1 3 5],4) == 1,3\nmy_func([9492 -3791 -7317],5701) == 9492,-3791\nmy_func([-5736 -8822 -3946 6700 -4113 283 -7969 8314 -9118 -4792 51 5227 9219 6315 1080],10299) == 9219,1080\nmy_func([14 -35 78],92) == 14,78\nmy_func([-1 0 1],0) == -1,1\nmy_func([-7831 -3001],-10832) == -7831,-3001\nmy_func([-4950 -963 -4902 1500 -5476],-10378) == -4902,-5476\nmy_func([2088 8604 2929 3714 -4964],11533) == 8604,2929\nmy_func([40 -19],21) == 40,-19\nmy_func([-313 4192 9310 1254 9653 -8445 -2431 6280 6897 -2469 -3304 -6685 -9404 4777 4150 906 -9945 2221 -2887 8819],5932) == -2887,8819\nmy_func([571 -5012 -8756 481 -1209],-4531) == -5012,481\n.\"\"\"```", "response": "```python\ndef my_func(input1, input2: int):\n    input1 = list(input1)\n    if len(input1) >= 3:\n        if input2 == sum(input1[:2]):\n            return input1[0], input1[1]\n        elif input2 in input1:\n            idx = input1.index(input2)\n            return input1[idx], input1[idx + 1]\n        else:\n            positive_values = [x for x in input1 if x > 0]\n            negative_values = [x for x in input1 if x < 0]\n            positive_values.sort(reverse=True)\n            negative_values.sort()\n            return positive_values[0], negative_values[0]\n    else:\n        return input1[0], input1[1]\n```"}
