{"submission": "```python\ndef my_func(input1, input2:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [2, 20] with each integer in [-10000, 10000], integer in [-20000, 20000]. The function should output 2 integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([0 1234],1234) == 0,1234\nmy_func([-953 -6678 6165 -3356 7504 2586 -9524 -6547 8495],7542) == -953,8495\nmy_func([9835 -6693 -3435 2190 9741 7295 8663 -7219 -1894 5017 -8502 6954 1123 1420 2341 4814 9297],6234) == 1420,4814\nmy_func([2284 756],3040) == 2284,756\nmy_func([40 -19],21) == 40,-19\nmy_func([14 -35 78],43) == -35,78\nmy_func([6065 3744 2668 5791 -6578],-2834) == 3744,-6578\nmy_func([6699 8361 -5789 -7481 -8412 -6166 1942 -5808],-1713) == 6699,-8412\nmy_func([-316 4766 1518 6969 -1350 -7753 -8359 -6184 8580 1495 9018 -1130 6736 -3187 -7343 -4474 -7097 -4332],-13281) == -6184,-7097\nmy_func([-5 -20],-25) == -5,-20\nmy_func([9492 -3791 -7317],5701) == 9492,-3791\nmy_func([7578 8432 -3111 -1447 2938 9959 9233],16010) == 7578,8432\nmy_func([-1 0 1],1) == 0,1\nmy_func([1813 4968 -5451 9208 3103 3164 1401 4667 5558 9157 -9515 8144 -6247 1263 7219 -7357 -3429],18365) == 9208,9157\nmy_func([8310 -8320],-10) == 8310,-8320\nmy_func([14 -35 78],-21) == 14,-35\nmy_func([237 410 -777],647) == 237,410\nmy_func([1 3 5],6) == 1,5\nmy_func([-2624 -2016 -7776 9829 -7401 5226],7813) == -2016,9829\nmy_func([237 410 -777],-540) == 237,-777\nmy_func([-14 5],-9) == -14,5\nmy_func([-7831 -3001],-10832) == -7831,-3001\nmy_func([-8033 -8494 -7890 -3962 8032 9266 -4838 1276 1736 3993 3906],9768) == 8032,1736\nmy_func([8227 -2499 -7333 1567 9839 8587 2187 5466 -6417 5365 -2156 -4863 -5083 -9409 3652 8453 8615 -7064 -5035],-11452) == -6417,-5035\nmy_func([7804 -4069 -9387 4398 2923 1941 -2668 5445 6547 9931 830],14351) == 7804,6547\nmy_func([5 7],12) == 5,7\nmy_func([-1109 -7145 -5061 -4136],-8254) == -1109,-7145\nmy_func([9492 -3791 -7317],2175) == 9492,-7317\nmy_func([-5505 6211 8870 -4669 -5958],-10627) == -4669,-5958\nmy_func([3088 -6622 -1779 -5081 4552 -4517 6184 -5271 -5939 9209 -6834 598 326 7021 5488 -3881 -7768],-11210) == -5271,-5939\nmy_func([1 3 5],8) == 3,5\nmy_func([8958 -9615 6250 9719 3456 -4279 1822 4303 -8552 -6054 -42 -263 -912 9603 -5957],15853) == 6250,9603\nmy_func([-904 6769 -8802 -1122 -6003 4121 -5174 9207 -7152 5600 -5033 2274 -850 5318 7002 1030 -8933 7523],180) == -850,1030\nmy_func([9980 4445 2328 -9058 -7469 -9923 -6605 -5543 3560 -4303 5135 -8614 -4747 6742 1720 1981],-6730) == 2328,-9058\nmy_func([-3249 -1786 -2834 -7582],-5035) == -3249,-1786\nmy_func([14 -35 78],92) == 14,78\nmy_func([2500 6352],8852) == 2500,6352\nmy_func([1 3 5],4) == 1,3\nmy_func([237 410 -777],-367) == 410,-777\nmy_func([10000 -10000],0) == 10000,-10000\nmy_func([9492 -3791 -7317],-11108) == -3791,-7317\nmy_func([-1 0 1],0) == -1,1\nmy_func([-6498 3875 9825 -9839 -9928],13700) == 3875,9825\nmy_func([-9754 6282 1406 -3816 -2760 -7131 4593 5729 -1581 -864 9633 -9090 -2871 9380 -7728 -9345 3560],9842) == 6282,3560\nmy_func([7646 -9048 -2899 8003],-1402) == 7646,-9048\nmy_func([-4 4],0) == -4,4\nmy_func([8579 -4992 8597 -2288 2630 -2776 -5600 -9464 9413 5950 8416 -8130],8580) == 2630,5950\nmy_func([5370 -8720 9817 -3140 6538 -7397 -4641 -9325 -3178 -3125 3249 4011 -5456 2345 -7497 -9821 6137 -4624],-10522) == -7397,-3125\nmy_func([3803 -7915 6526 -1475 -3752 -9502 1123 7664 -804 -1129],2328) == 3803,-1475\nmy_func([-1 0 1],-1) == -1,0\n.\"\"\"```", "response": "```python\ndef my_func(input1, input2: int):\n    a, b = sorted(input1)[0], sorted(input1)[-1]\n    if input2 < 0:\n        return (a, b) if a + b < input2 else (b, a)\n    else:\n        return (a, b) if a + b <= input2 else (b, a)\n```"}
