{"submission": "```python\ndef my_func(input1, input2:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [2, 20] with each integer in [-10000, 10000], integer in [-20000, 20000]. The function should output 2 integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([237 410 -777],-540) == 237,-777\nmy_func([-7350 -6427 -1248 7085 -4869 6991 6242 4027 -6980 2828 989 -8120 -7121 7033 -399],-879) == 6242,-7121\nmy_func([237 410 -777],-367) == 410,-777\nmy_func([2098 -3049 1199 -3644 -4111 5973 9959 7949 -908 8509 -4759 6334 8389 5535 -6982],3750) == 8509,-4759\nmy_func([1 3 5],8) == 3,5\nmy_func([6963 1717 7240 -4540 2358 -7667 -7430 -6979 5439 9113 5599 7452 9744 -2522 -9034 3812 7084 9],1683) == -7430,9113\nmy_func([1 3 5],4) == 1,3\nmy_func([-1 0 1],-1) == -1,0\nmy_func([-4618 -1875 -2361 6131 -8826 2586],1513) == -4618,6131\nmy_func([-7831 -3001],-10832) == -7831,-3001\nmy_func([-5 -20],-25) == -5,-20\nmy_func([7007 -7660 -262 -4750 -7953 -3555 -4625 -865 -3027 -502 9917 2017 -8987 -9001 147 2499 -1820 1811],-9249) == -262,-8987\nmy_func([14 -35 78],-21) == 14,-35\nmy_func([-3369 -9232],-12601) == -3369,-9232\nmy_func([0 1234],1234) == 0,1234\nmy_func([-7616 3658 -9238 793 9373],10166) == 793,9373\nmy_func([9492 -3791 -7317],-11108) == -3791,-7317\nmy_func([-1 0 1],0) == -1,1\nmy_func([40 -19],21) == 40,-19\nmy_func([-6403 -1571 -6865 -4819 -5934],-6390) == -1571,-4819\nmy_func([5 7],12) == 5,7\nmy_func([3680 9 -2479 4605 2382 -8256 -3419 1346 -7209 1205],5951) == 4605,1346\nmy_func([-5014 6354 945 7973 -4885 7638 6700 -8444 -8702 2057 -3559 -5812 -6152 -5160 8554 -1716 -4084 -9203 8290 -7656],7299) == 6354,945\nmy_func([-4 4],0) == -4,4\nmy_func([2500 6352],8852) == 2500,6352\nmy_func([14 -35 78],43) == -35,78\nmy_func([5757 -4088 -1791 -4191 7127 2110 9349 -6246 8007 -5430],5336) == -1791,7127\nmy_func([6510 842 9356 8990 5346 -2717 8193 -4366 8664 -8915],3793) == 6510,-2717\nmy_func([-9965 -1280 4851 6911],-3054) == -9965,6911\nmy_func([9492 -3791 -7317],2175) == 9492,-7317\nmy_func([-4812 2637 -8554 6832 -2798 3634 -8338],-2175) == -4812,2637\nmy_func([-8096 6249 7296 5177 -9811 -2137 7814 -4555],-17907) == -8096,-9811\nmy_func([1 3 5],6) == 1,5\nmy_func([4947 -7053 -7726 -1468 3369],8316) == 4947,3369\nmy_func([-7755 -6428 7136 9051],16187) == 7136,9051\nmy_func([9492 -3791 -7317],5701) == 9492,-3791\nmy_func([237 410 -777],647) == 237,410\nmy_func([-7926 6655 -7806 3401 8092 4761 6004 -1963 9148 -7609 3815 5049 5914 3407 7858],12963) == 9148,3815\nmy_func([10000 -10000],0) == 10000,-10000\nmy_func([412 -762 -11 4680 3092 -9188 -1303 7630 -3629],3918) == -762,4680\nmy_func([-3321 -6764 -6033 7845 7156 6411 6307 -782 -3771 -1134 5830 7415],-203) == -6033,5830\nmy_func([14 -35 78],92) == 14,78\nmy_func([-1 0 1],1) == 0,1\nmy_func([-5345 670 -5086 4593 -5844 -6428 -1970 -8916 9192 6144 1719 9686 -5123 2636 -1193 -3980 -7922 -1596 4700 -1644],4600) == -5086,9686\nmy_func([4947 9063 -1321 -6139 2138],14010) == 4947,9063\nmy_func([9240 7706 9871 4244],14115) == 9871,4244\nmy_func([9243 -533 -1807 -6621 7632 -6206 1673 -9622 8114 6247 -1573],2622) == 9243,-6621\nmy_func([8310 -8320],-10) == 8310,-8320\nmy_func([-14 5],-9) == -14,5\nmy_func([9896 -6860 -8515],1381) == 9896,-8515\n.\"\"\"```", "response": "```python\ndef my_func(input1, input2: int):\n    input1.sort()\n    if input2 >= 0:\n        for i in range(len(input1)):\n            if input1[i] > input2:\n                return input1[i-1], input1[i]\n        return input1[-2], input1[-1]\n    else:\n        for i in range(len(input1)):\n            if input1[i] > input2:\n                return input1[i], input1[i+1]\n        return input1[0], input1[1]\n```"}
