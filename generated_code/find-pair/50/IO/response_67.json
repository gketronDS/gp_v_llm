{"submission": "```python\ndef my_func(input1, input2:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [2, 20] with each integer in [-10000, 10000], integer in [-20000, 20000]. The function should output 2 integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([14 -35 78],92) == 14,78\nmy_func([-1703 3156 -9269 -9959 -1088 2869 4636 810 3403 -9403],-10491) == -1088,-9403\nmy_func([10000 -10000],0) == 10000,-10000\nmy_func([5018 -2491 -8095 5884 7346 64 -52 -8295 -5077 5718 -7523 -796 1048 -8313],-7265) == 1048,-8313\nmy_func([-6198 -2182 9384 -2927],6457) == 9384,-2927\nmy_func([-7984 9029 2927 4486 -7487 -7540 7279 -8798 1430 -2931 -5073 -380 -8593 9320 -4407 382 8636 270 -1770 -2405],-6812) == -4407,-2405\nmy_func([3400 8124 -170 -4053 391],3791) == 3400,391\nmy_func([14 -35 78],43) == -35,78\nmy_func([1 3 5],6) == 1,5\nmy_func([-1 0 1],1) == 0,1\nmy_func([-1 0 1],-1) == -1,0\nmy_func([9492 -3791 -7317],5701) == 9492,-3791\nmy_func([-14 5],-9) == -14,5\nmy_func([262 8023 449 2104 4632],4894) == 262,4632\nmy_func([1 3 5],4) == 1,3\nmy_func([237 410 -777],-367) == 410,-777\nmy_func([9492 -3791 -7317],-11108) == -3791,-7317\nmy_func([4298 -9578 8218 1823 -6859 6423 -7869 -2648 -9215 4023],-997) == 8218,-9215\nmy_func([40 -19],21) == 40,-19\nmy_func([-7532 -2861 517 -9273 -1029 -9110],-10393) == -7532,-2861\nmy_func([9492 -3791 -7317],2175) == 9492,-7317\nmy_func([0 1234],1234) == 0,1234\nmy_func([-6843 2201],-4642) == -6843,2201\nmy_func([133 8661 381 5959 -9979],-9598) == 381,-9979\nmy_func([-5780 9042 8994 803 -450],9845) == 9042,803\nmy_func([9480 -8669 -3474 -8937 3529 8320 -1942 -546],6006) == 9480,-3474\nmy_func([1 3 5],8) == 3,5\nmy_func([-292 125 -9491 -9743 -6866 7407 3349 4103 -6335 -9499 -3703 4526 -4705 8426 -8278 441 1957 4830],4723) == -3703,8426\nmy_func([8366 2060 -2780 -8542 -7295],-6482) == 2060,-8542\nmy_func([9372 1633 -9434 -5009],-3376) == 1633,-5009\nmy_func([-6130 9679 -3186 -7326 6967 6730 4751 1114 -6851 4016 -930 8082 -8516 5389 -9826],2203) == -3186,5389\nmy_func([-6896 -7360 250 2496 8373 9101 7701 7348],-6646) == -6896,250\nmy_func([9097 7316 569 -849 -7680],-7111) == 569,-7680\nmy_func([2500 6352],8852) == 2500,6352\nmy_func([5 7],12) == 5,7\nmy_func([-2659 -5089 -6488 9793 -1472 -5552 4662 2504],-9147) == -2659,-6488\nmy_func([-257 1610 9110 6107 7962 8725 -3685 3221 1311 211 -2647 -9408 -3460 6728],6463) == 9110,-2647\nmy_func([4910 835 5101 -9357 1880 7872 -9119 6307],-8284) == 835,-9119\nmy_func([-5506 -7936 286 6167 9160 1029 3559 5867 -2214 9211 2957 3857 -165 9056 7130 -4004 -8130 9068 3438],-4273) == 3857,-8130\nmy_func([-5 -20],-25) == -5,-20\nmy_func([-2365 4423 -6860 8786],1926) == -6860,8786\nmy_func([-7831 -3001],-10832) == -7831,-3001\nmy_func([8310 -8320],-10) == 8310,-8320\nmy_func([-8882 7959 -123 8942 -8229 -8107 7681 -9050 5832 4009 3458],9290) == 5832,3458\nmy_func([-821 -5610 2095 1693 7581 8776 -3471 8911 -3436 -5001 9937 6293 -1417 -7472 9042 -8047 4547 -7420 4968 4103],-4888) == -3471,-1417\nmy_func([-4 4],0) == -4,4\nmy_func([237 410 -777],-540) == 237,-777\nmy_func([237 410 -777],647) == 237,410\nmy_func([-1 0 1],0) == -1,1\nmy_func([14 -35 78],-21) == 14,-35\n.\"\"\"```", "response": "```python\ndef my_func(input1, input2:int):\n    input1 = list(map(int, input1.split()))\n    if input2 % 2 == 0:\n        return min(input1), max(input1)\n    else:\n        sorted_input = sorted(input1)\n        return sorted_input[1], sorted_input[-1]\n```"}
