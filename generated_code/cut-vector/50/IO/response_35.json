{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [1, 20] with each integer in [1, 10000]. The function should output 2 vectors of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([4223]) == [4223],[]\nmy_func([3818]) == [3818],[]\nmy_func([2 129]) == [2],[129]\nmy_func([4104]) == [4104],[]\nmy_func([0]) == [0],[]\nmy_func([7631 2436 9057 1476 6747 9390 5749 7430 9506]) == [7631 2436 9057 1476 6747],[9390 5749 7430 9506]\nmy_func([251]) == [251],[]\nmy_func([9999 74]) == [9999],[74]\nmy_func([8286 2174 8868 962 4089 2896 4086 2437 5820 8391 4908 6569 6862 8957 8302 9973 5753]) == [8286 2174 8868 962 4089 2896 4086 2437 5820 8391],[4908 6569 6862 8957 8302 9973 5753]\nmy_func([8167 5974 3909 1031]) == [8167],[5974 3909 1031]\nmy_func([1789]) == [1789],[]\nmy_func([8045]) == [8045],[]\nmy_func([1418]) == [1418],[]\nmy_func([4953 1046 8539 9253 487 5243 1221 2601 5795 4968 9283 7136 8665 2217 5900]) == [4953 1046 8539 9253 487 5243 1221 2601 5795],[4968 9283 7136 8665 2217 5900]\nmy_func([8872]) == [8872],[]\nmy_func([4187 5053 7259 3495]) == [4187 5053],[7259 3495]\nmy_func([9225 9994]) == [9225],[9994]\nmy_func([3270 9455 9695]) == [3270 9455],[9695]\nmy_func([0 40]) == [0],[40]\nmy_func([691]) == [691],[]\nmy_func([3628 8437 6596 3258 4121]) == [3628 8437],[6596 3258 4121]\nmy_func([9879 9950]) == [9879],[9950]\nmy_func([2857 6715 5990 6513 5048 1618 3290 316 9631 616 9261 4770 1392 6690 6179]) == [2857 6715 5990 6513 5048 1618 3290 316],[9631 616 9261 4770 1392 6690 6179]\nmy_func([3013]) == [3013],[]\nmy_func([2622 2445]) == [2622],[2445]\nmy_func([509]) == [509],[]\nmy_func([7627]) == [7627],[]\nmy_func([4060 8414 1294 351 2971 7829 3421 5827 722 6120]) == [4060 8414 1294 351 2971],[7829 3421 5827 722 6120]\nmy_func([2991 316 4870 4296 8455]) == [2991 316 4870 4296],[8455]\nmy_func([100]) == [100],[]\nmy_func([827 7894 7491 3498 8534 7311 8718 8047 7699 7940 8859 0 7823 9865 1174 4153 2772 1683 5144 9257]) == [827 7894 7491 3498 8534 7311 8718 8047 7699],[7940 8859 0 7823 9865 1174 4153 2772 1683 5144 9257]\nmy_func([6105 7951 4121 7235 6659 9729 4863 1974]) == [6105 7951 4121 7235],[6659 9729 4863 1974]\nmy_func([4464]) == [4464],[]\nmy_func([9264 7832]) == [9264],[7832]\nmy_func([7030 6741 6196 9902 437 8610 9109 2842 1 5710 4822 2026]) == [7030 6741 6196 9902 437],[8610 9109 2842 1 5710 4822 2026]\nmy_func([1225]) == [1225],[]\nmy_func([7935 9063 6814 5599 2439]) == [7935 9063],[6814 5599 2439]\nmy_func([2488 3902]) == [2488],[3902]\nmy_func([3111 7694]) == [3111],[7694]\nmy_func([10000]) == [10000],[]\nmy_func([379 5615 3861 2629]) == [379 5615],[3861 2629]\nmy_func([6654 1884]) == [6654],[1884]\nmy_func([4578]) == [4578],[]\nmy_func([9076]) == [9076],[]\nmy_func([1000]) == [1000],[]\nmy_func([3686 4339]) == [3686],[4339]\nmy_func([2541 9994 2026 8604 6185 5196 7218 1736 3353 4970]) == [2541 9994 2026 8604],[6185 5196 7218 1736 3353 4970]\nmy_func([1029]) == [1029],[]\nmy_func([647 2939 919 8403 6166 9794 7136 3578 2772 4642 9080 8262 833 5987 5906]) == [647 2939 919 8403 6166 9794 7136 3578],[2772 4642 9080 8262 833 5987 5906]\nmy_func([10]) == [10],[]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    mid_index = len(input1) // 2\n    return input1[:mid_index], input1[mid_index:]\n```"}
