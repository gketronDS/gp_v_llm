{"submission": "```python\nGiven a starting height and a height after the first bounce of a dropped ball calculate the bounciness index height of first bounce  starting height Then given a number of bounces use the bounciness index to calculate the total distance that the ball travels across those bounces\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float.            Only use base python functions and do not import any packages.            Do not include print statements, unit tests, in-line comments or            multi-line comments.\"\"\"```", "response": "To solve the problem described, you need to calculate the bounciness index and then use it to determine the total distance traveled by the ball after a given number of bounces. The bounciness index is calculated as the ratio of the height after the first bounce to the starting height. The total distance traveled by the ball includes both the drops and the bounces.\n\nHere's how you can implement the function:\n\n```python\ndef my_func(input1: float, input2: float, input3: int) -> float:\n    if not (1.0 <= input1 <= 100.0 and 1.0 <= input2 <= 100.0 and 1 <= input3 <= 20):\n        return None\n\n    bounciness_index = input2 / input1\n    total_distance = input1\n\n    current_height = input2\n    for _ in range(input3 - 1):\n        total_distance += 2 * current_height\n        current_height *= bounciness_index\n\n    total_distance += current_height\n    return total_distance\n```\n\nThis function performs the following steps:\n1. Checks if the inputs are within the specified ranges. If not, it returns `None`.\n2. Calculates the bounciness index as the ratio of the height after the first bounce to the starting height.\n3. Initializes the total distance with the starting height.\n4. Iterates through the number of bounces, updating the total distance by adding twice the current bounce height (as the ball travels down and then up).\n5. Updates the current bounce height by multiplying it with the bounciness index.\n6. Finally, adds the height of the last bounce and returns the total distance."}
