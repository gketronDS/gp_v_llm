{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(15.121570936794596,10.738844762307384,8) == 83.4526907733245\nmy_func(64.1594985151633,52.7166917331657,6) == 453.68113545165954\nmy_func(31.11212814498025,21.195878309342664,6) == 147.70686928504549\nmy_func(18.34509293217013,14.232445510100328,20) == 144.41029786633638\nmy_func(34.43583288482093,29.11471441788322,5) == 233.59069728685395\nmy_func(8.406250238719739,4.455665928473225,15) == 27.36622335097918\nmy_func(1.001,1.0,1) == 2.001\nmy_func(28.235447338153794,10.818916389622796,7) == 63.2376359505801\nmy_func(28.51683327094527,18.26936413003182,13) == 129.79869846027677\nmy_func(19.460019360393776,15.102509167396311,7) == 128.17845767852137\nmy_func(75.67023290959384,72.44236952226598,18) == 1887.9476102857457\nmy_func(62.145,62.058,1) == 124.203\nmy_func(2.2742691971043048,1.9596307485984088,16) == 27.77801637315588\nmy_func(74.80405114051817,54.580651971755984,8) == 440.1322732032386\nmy_func(10.077482943903943,4.676313896458167,11) == 27.52167073319867\nmy_func(30.038845707716124,24.02791405721002,11) == 247.01584336583673\nmy_func(62.66101375249273,15.512471701815873,8) == 103.89209318493724\nmy_func(60.567,37.053,1) == 97.62\nmy_func(57.94516300049427,18.902927400427256,5) == 113.63394951409391\nmy_func(51.64689034267453,42.9393510302072,12) == 499.8233459719587\nmy_func(55.8234800316006,36.26320755471695,14) == 262.1819394610562\nmy_func(37.90227193603797,2.229939545937708,1) == 40.13221148197568\nmy_func(62.67409597921354,2.3287313376161194,17) == 67.51129042801023\nmy_func(92.10617905878496,60.48278447553176,1) == 152.58896353431672\nmy_func(83.359686020145,40.47164350193759,16) == 240.6834539674997\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(39.2180216986983,8.65972609378296,5) == 61.41327212920247\nmy_func(87.8788846266049,85.5049846399295,11) == 1669.410353770327\nmy_func(2.176,1.787,1) == 3.963\nmy_func(34.58386073085082,18.27977664117855,5) == 107.50700733442528\nmy_func(11.676793089123096,3.419639585829443,2) == 19.517540270930983\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(6.761100535181864,5.376943181078106,12) == 55.49501795380858\nmy_func(2.491030231015251,2.437253565634454,18) == 74.16228819698094\nmy_func(37.39120029868225,35.04315908443396,8) == 466.9144111546307\nmy_func(15.319,5.635,1) == 20.954\nmy_func(24.39274196044313,21.542569724400284,12) == 304.62278376355334\nmy_func(50.99922298913923,29.781797101206543,16) == 194.13362941576952\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(19.607246945988948,17.481755967833664,15) == 280.9421144451676\nmy_func(54.642003016964395,19.408651620561752,9) == 114.83187943913198\nmy_func(32.92271872126226,6.538998372043312,20) == 49.241994423021765\nmy_func(33.909680935777786,18.52793289444588,20) == 115.60017316933728\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(22.204734253072285,1.9746052172483948,3) == 26.520752256752942\nmy_func(81.67464551723046,70.2256829273627,12) == 906.7040607048058\nmy_func(51.31623953796589,47.10713244765524,16) == 894.8284796682958\nmy_func(6.474235198175384,5.305061226605146,7) == 49.04854786231694\nmy_func(78.14900786388299,61.12400845630338,2) == 248.204980382337\nmy_func(17.165,5.627,1) == 22.792\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 + (input1 * input2) / input3\n```"}
