{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(24.70370660022817,9.001449615038176,8) == 53.01044028879211\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(3.5303249965354992,2.5856262553676332,3) == 13.875999122501996\nmy_func(84.76634720174546,79.24865735977629,15) == 1601.6341197034833\nmy_func(35.861594857698464,7.998629488866462,15) == 56.45119151389076\nmy_func(58.32062161005731,9.585880103993404,16) == 81.26337114167556\nmy_func(10.420750502728357,8.803488174969324,2) == 35.46494563103783\nmy_func(73.23719497584247,4.061327131391771,6) == 81.83672928980279\nmy_func(8.448923475084722,7.126059201311718,16) == 92.95141067526411\nmy_func(2.176,1.787,1) == 3.963\nmy_func(90.9331225554169,64.85127252771913,18) == 541.8976403241846\nmy_func(73.1580265307703,31.676774000301076,15) == 184.8902710029908\nmy_func(64.40361540986359,46.983604686133,1) == 111.38722009599658\nmy_func(90.24235294845396,68.22733659129278,19) == 646.3881783178873\nmy_func(8.542929598368978,7.85357396148615,10) == 115.59262931271957\nmy_func(28.1411327770284,26.271286131121588,20) == 611.8771904507738\nmy_func(43.073376682727385,17.635532293739523,17) == 102.79711632661407\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(1.001,1.0,1) == 2.001\nmy_func(98.59674148517657,17.271400474246704,15) == 140.47554044370273\nmy_func(47.2974700203699,39.4793179388496,7) == 376.76965194900646\nmy_func(41.83557966802045,18.811710115857164,7) == 109.78971132404229\nmy_func(93.90221910246775,8.721910623230407,20) == 113.13217439044786\nmy_func(64.73127571958725,25.050946154368045,17) == 146.46342904883156\nmy_func(66.50657945624776,61.48059448684814,20) == 1341.8100692052992\nmy_func(60.567,37.053,1) == 97.62\nmy_func(15.319,5.635,1) == 20.954\nmy_func(99.34716504801176,4.997032261390455,10) == 109.87054163590508\nmy_func(5.806730170385922,5.6844749745861405,14) == 140.61182726505854\nmy_func(42.9830366606265,18.500055768545856,2) == 87.94563972213295\nmy_func(37.697226161518664,14.47022225758397,13) == 84.6669841299626\nmy_func(88.44614422803086,20.9444517539449,19) == 143.33235308183697\nmy_func(8.97316591601498,7.95206978058983,3) == 45.21688385700452\nmy_func(17.165,5.627,1) == 22.792\nmy_func(64.97915288803526,19.49706911807794,17) == 120.68913552106036\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(28.836631023993636,28.24002239775061,18) == 865.1811714867674\nmy_func(57.444787940589045,21.20092209084856,7) == 124.53341774536136\nmy_func(2.7726475904311547,2.0522527948368348,8) == 16.896999630180503\nmy_func(86.86801072471087,38.55401301039791,8) == 225.1678566903005\nmy_func(61.81127245514846,34.429156756419076,14) == 217.18911436331464\nmy_func(64.69696553300008,55.56881036093049,8) == 599.9228427730889\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(62.145,62.058,1) == 124.203\nmy_func(74.13271993875837,5.421887667015494,6) == 85.83215120244856\nmy_func(92.46820761779776,26.09911813777015,13) == 165.19297358958326\nmy_func(89.96565829382959,82.5717702152412,9) == 1129.117936256568\nmy_func(44.88313229554987,38.61569173465003,14) == 525.1497313330142\nmy_func(86.3662671909442,60.85834190884951,4) == 375.58154584397954\nmy_func(5.449140472028664,1.1278291772362414,11) == 8.293508149235729\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 + (input1 * input2) / input3\n```"}
