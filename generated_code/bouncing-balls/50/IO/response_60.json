{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(29.794389194758292,6.746925570855852,3) == 46.68989488171496\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(66.45071763768946,50.39949098609853,4) == 323.67372318117236\nmy_func(98.3664595605468,39.65411408884808,9) == 231.17416847190336\nmy_func(97.82739043975393,21.95867673093212,7) == 154.45130594702218\nmy_func(2.176,1.787,1) == 3.963\nmy_func(90.25526758478276,49.10116956705994,9) == 304.3476031803832\nmy_func(50.009888409291605,36.68320734935327,13) == 319.5358692960421\nmy_func(15.9714717112729,1.735464746768259,10) == 19.8655307813992\nmy_func(51.51986620614856,14.127255923707496,10) == 90.44896368904112\nmy_func(84.10032755900923,1.763467153956091,17) == 87.70280073010778\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(62.145,62.058,1) == 124.203\nmy_func(73.00975396155398,22.128598950345836,4) == 135.36269045421372\nmy_func(75.52844521820522,58.971114347886534,14) == 594.3399752403681\nmy_func(1.001,1.0,1) == 2.001\nmy_func(82.94290893867354,51.650647433464954,18) == 356.6813977458426\nmy_func(15.319,5.635,1) == 20.954\nmy_func(19.415155868364728,16.75769621831381,8) == 182.8717891287528\nmy_func(56.231442942832366,54.56385611800569,4) == 423.8537564285789\nmy_func(28.971487274116303,5.926327756952745,15) == 43.87218953769416\nmy_func(1.336886688031917,1.31957446179867,9) == 22.706443949382287\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(60.567,37.053,1) == 97.62\nmy_func(17.165,5.627,1) == 22.792\nmy_func(13.112237253455394,6.817913531121206,4) == 38.48333168652294\nmy_func(66.64031445451005,59.61102419410635,5) == 511.40729549990306\nmy_func(50.699541930454,33.96707250882799,10) == 251.8665453861701\nmy_func(34.91988231561251,7.159010223643816,12) == 52.93025247485573\nmy_func(41.95081208813295,7.6271198165490945,2) == 58.591746153048845\nmy_func(48.02662587916176,7.215876823170385,1) == 55.24250270233214\nmy_func(1.9649564796488912,1.2687922852882267,12) == 9.079458070067052\nmy_func(23.993946925679165,21.487774178180175,17) == 368.6889375633606\nmy_func(39.53599512250237,27.678705086949854,8) == 211.18238455657584\nmy_func(89.26294209960082,52.060002829965065,8) == 334.5443638906537\nmy_func(56.66280307408454,56.07608935075322,12) == 1278.4198433921808\nmy_func(23.397174428703153,11.82633130022994,16) == 71.2234632477913\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(55.32205107599347,29.137967964058895,10) == 178.15498580600016\nmy_func(40.07499109386358,12.275457776889365,12) == 75.46681851428403\nmy_func(57.91632590122548,15.476338611395098,15) == 100.1563315194488\nmy_func(54.33552586787036,3.694469376288328,15) == 62.26351751974369\nmy_func(87.47149101189943,13.360187706263511,1) == 100.83167871816296\nmy_func(38.66539956909207,38.389686206339086,9) == 674.0408326781084\nmy_func(35.891909979085995,29.952904789070573,13) == 360.0352947148905\nmy_func(31.873828073238577,9.53306707513131,14) == 59.07570469636529\nmy_func(50.50844395847361,27.214380343786548,19) == 168.52482133692828\nmy_func(99.07022821598666,12.247109314111212,14) == 127.01955619270328\nmy_func(60.72411286496398,41.03516007754131,9) == 304.62018666902696\nmy_func(70.17113703330382,33.29739497842305,13) == 196.8895772008861\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 if input3 == 1 else (input1 * input2) + (input1 + input2) * (input3 - 1) / input3\n```"}
