{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(62.687247559653954,41.42449217069645,9) == 299.5691469523042\nmy_func(1.8715659464519991,1.1604629769515276,20) == 7.979493343589772\nmy_func(36.8690566714652,22.151247034280992,2) == 94.48021091200452\nmy_func(65.04329667059648,22.708550062522672,19) == 134.82233646430984\nmy_func(33.95538537728928,18.18117159677547,13) == 112.19516265863564\nmy_func(1.001,1.0,1) == 2.001\nmy_func(48.89399459605821,14.200590719584095,15) == 88.92025409670445\nmy_func(56.639918296626206,15.510393625860925,10) == 99.3587484556174\nmy_func(57.39685244569773,35.04547187651525,18) == 237.35268197721348\nmy_func(5.0222690892863255,2.892466802678895,9) == 18.53356206841412\nmy_func(51.82968907722692,33.02957534372092,4) == 195.3622693926924\nmy_func(9.307678791845538,2.482137235754589,12) == 16.0772306147419\nmy_func(17.165,5.627,1) == 22.792\nmy_func(89.90095043763975,22.920738409050067,19) == 151.42945646140984\nmy_func(24.303326416292833,1.6097749803915045,13) == 27.751256273825316\nmy_func(66.28504489137623,53.29957011846168,12) == 565.8264189851568\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(79.16375324818569,47.33592442418099,20) == 314.62550991881375\nmy_func(36.63338663447774,34.46294408333139,2) == 137.98036965804386\nmy_func(40.58233471833624,9.736389120862803,1) == 50.318723839199045\nmy_func(71.37426596430149,64.59169357048073,20) == 1236.5820686574964\nmy_func(27.678677318813865,8.023422262271481,4) == 49.92097297584987\nmy_func(2.01120204309756,1.562440650565115,1) == 3.5736426936626753\nmy_func(61.2634261366086,40.698201040435734,9) == 296.08813258483326\nmy_func(14.859807831704094,6.7098300460616205,16) == 39.32767921725678\nmy_func(34.83692466385295,24.496968567913346,12) == 196.98303153977628\nmy_func(20.157144476777415,15.05928210529734,5) == 106.83834587283768\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(58.42621911825954,27.778506926538704,17) == 164.3385245512874\nmy_func(81.45220355487199,13.063235584967822,11) == 112.56919070521792\nmy_func(99.94338290125808,82.93898630693126,15) == 1009.3625000719304\nmy_func(6.839324209060474,5.0410798594159525,8) == 41.24893427954641\nmy_func(15.319,5.635,1) == 20.954\nmy_func(60.567,37.053,1) == 97.62\nmy_func(64.04982928606447,11.922601578481451,1) == 75.97243086454591\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(12.23925768157501,11.103519849847084,18) == 207.96870617986917\nmy_func(65.90896198833391,24.02618194433216,10) == 141.5208446523865\nmy_func(62.145,62.058,1) == 124.203\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(74.76739405921036,48.46484940060398,14) == 349.48904474278373\nmy_func(2.176,1.787,1) == 3.963\nmy_func(95.54449854731264,72.01424837987047,13) == 663.1327017610622\nmy_func(16.7778983723353,7.947033021700631,7) == 46.72401160746159\nmy_func(15.358612312482547,8.962816867018839,16) == 58.39396188624252\nmy_func(29.64980547375289,28.04211442141196,6) == 302.4857936592325\nmy_func(55.50641850482528,29.01950776734311,13) == 177.09534396646183\nmy_func(58.43289364425061,12.311255311309823,18) == 89.62789455474837\nmy_func(52.43965438259884,51.90417306113741,14) == 1367.7047637156857\nmy_func(94.16265919456208,7.620813951527042,18) == 110.7464540529962\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if not (1.0 <= input1 <= 100.0 and 1.0 <= input2 <= 100.0 and 1 <= input3 <= 20):\n        return None\n    if input3 == 1:\n        return input1 + input2\n    elif input3 == 20:\n        return ((input1**2) * input2) / input3\n    else:\n        return (input1 * input2) + (input1 + input2) * input3\n```"}
