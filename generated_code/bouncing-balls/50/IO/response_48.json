{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(91.02617926081172,18.749738796569396,13) == 138.25365898934513\nmy_func(40.21824198950947,26.174304153902828,11) == 188.44460342925893\nmy_func(93.44668502892064,93.11630378809468,3) == 557.7125137457226\nmy_func(76.80767287337774,51.22149777445347,15) == 383.4515240706951\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(51.838117682008864,17.603981575608273,13) == 105.1507434459176\nmy_func(64.97641554866327,56.13467491956576,15) == 790.8192992818822\nmy_func(37.14531388591445,8.4048318485853,12) == 58.87077409343918\nmy_func(27.62517210776762,26.09067817128917,16) == 579.4847176331027\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(16.292047282136636,10.79012812445722,9) == 78.22849149432663\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(17.165,5.627,1) == 22.792\nmy_func(60.567,37.053,1) == 97.62\nmy_func(96.22926685860163,26.068880535347052,8) == 167.73453240334976\nmy_func(75.67030232266684,1.3318690837564011,17) == 78.38176480022678\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(68.26330194123227,63.27783050833062,10) == 957.4248109893156\nmy_func(49.54449983533819,48.59812620861029,4) == 381.4650297375466\nmy_func(20.380465212117368,7.477625337740098,13) == 44.00268570393356\nmy_func(61.85202357675478,32.00428656158953,14) == 194.4747087564257\nmy_func(29.515317770027114,13.721833916148206,19) == 80.80279533185347\nmy_func(40.18829293294874,33.09913684125669,10) == 355.80201788637703\nmy_func(57.93273830795705,32.97936211416726,9) == 209.7398973760565\nmy_func(76.50487625983342,43.90073501008646,12) == 282.1689000347483\nmy_func(11.67504118700139,3.2803783759753484,12) == 20.79953682766776\nmy_func(80.77674713328058,14.47585000475077,6) == 116.04579143399802\nmy_func(20.977954192315263,13.352934749041586,2) == 56.18326354045355\nmy_func(62.145,62.058,1) == 124.203\nmy_func(2.176,1.787,1) == 3.963\nmy_func(67.96832219812609,35.51905671014826,14) == 216.74040233442764\nmy_func(74.05276106618292,41.34114282822978,16) == 261.20616589647096\nmy_func(74.31080899247753,11.77082777437002,10) == 102.28330542958092\nmy_func(40.746748993583815,21.771222457983946,12) == 134.1741446120916\nmy_func(36.23555224266061,25.425275537745502,14) == 205.23505054891135\nmy_func(15.319,5.635,1) == 20.954\nmy_func(67.07321553999105,44.120248929834574,10) == 320.00175248460283\nmy_func(5.40216667684905,3.736605596551863,19) == 29.614237753228377\nmy_func(16.160051897130778,7.2948477403106144,11) == 42.74828637857013\nmy_func(89.52463160112545,40.5054248638329,2) == 188.86216351439273\nmy_func(98.02666409413509,43.083831520980446,2) == 203.1301604675188\nmy_func(56.60881033239739,47.48041650430667,16) == 606.7745627253778\nmy_func(26.963471524017944,23.109854727971964,18) == 328.53714233883113\nmy_func(69.40503944506584,16.238072498683398,20) == 111.79993714789217\nmy_func(21.55075651795362,21.03301541456587,12) == 448.6101863826056\nmy_func(31.212248230560206,2.922199712108031,19) == 37.66034060965572\nmy_func(70.97308505441183,2.1740357772157166,8) == 75.45855477557284\nmy_func(71.76915742442743,2.2311596234092392,14) == 76.37465229658424\nmy_func(31.27040306947296,25.036078906186106,15) == 272.36930978739395\nmy_func(1.001,1.0,1) == 2.001\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if input3 == 1:\n        return input1 + input2\n    elif input3 == 2:\n        return input1 + input2 + input1 * input2 / 100\n    elif input3 == 3:\n        return input1 * input2 / input3 + input1 + input2\n    else:\n        return (input1 + input2) * input3 + (input1 * input2) / input3\n```"}
