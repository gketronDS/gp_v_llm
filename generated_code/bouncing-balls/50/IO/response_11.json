{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(46.49101300446525,25.162743193534155,1) == 71.6537561979994\nmy_func(50.09809498108283,36.34286454975204,17) == 313.4841900396173\nmy_func(92.00385334547988,73.12534262632217,12) == 753.606917867252\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(71.58780264913186,57.46618097041425,15) == 629.9946963473584\nmy_func(12.209970454771655,9.18368038136376,4) == 58.69083600644623\nmy_func(1.001,1.0,1) == 2.001\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(91.11156366998476,49.005855337432635,3) == 256.01789825529295\nmy_func(14.488124668853212,3.535591796753708,11) == 23.84195576112462\nmy_func(10.064461714915844,6.938444479871105,9) == 52.81660823363556\nmy_func(78.67710540616574,64.87457287113087,19) == 797.3219041757453\nmy_func(63.53819743728661,40.319439207228605,3) == 211.5838920042218\nmy_func(62.145,62.058,1) == 124.203\nmy_func(8.187169111473874,5.358476788783805,15) == 39.13765610083683\nmy_func(11.69214943105887,2.0651576439715433,1) == 13.757307075030411\nmy_func(10.25840562605655,5.805117704193771,2) == 25.153692600110517\nmy_func(91.16813744582028,88.13066756175081,4) == 682.1422819736752\nmy_func(17.165,5.627,1) == 22.792\nmy_func(33.38538409727894,30.218739187371146,7) == 336.77045561752647\nmy_func(33.98119702038569,19.226748969974334,13) == 122.4693968361965\nmy_func(89.46911897448535,12.147432425984162,13) == 117.58076846839988\nmy_func(49.82135641266257,14.731800368257092,8) == 91.64943157010848\nmy_func(24.96635624138764,1.225684803630442,11) == 27.544285302819016\nmy_func(37.271599072032686,4.930228457211841,8) == 48.635213013222504\nmy_func(81.35881550713398,4.584749623711616,12) == 91.07589364813948\nmy_func(38.17707534217835,9.86641380258622,16) == 64.7868963802722\nmy_func(2.176,1.787,1) == 3.963\nmy_func(55.047235324945945,49.83576034954398,19) == 940.4355598563922\nmy_func(26.229195073850672,16.567305037864514,12) == 115.71140299581089\nmy_func(44.97672679451605,33.92884727860597,12) == 310.32122245775196\nmy_func(78.67499638491549,16.503883273983597,6) == 120.43470932944057\nmy_func(69.41697867779322,66.97995503484852,14) == 1529.4824991309963\nmy_func(48.77199187453907,33.96520960638288,1) == 82.73720148092195\nmy_func(20.8031166222748,4.837601197110025,18) == 33.40993574164806\nmy_func(27.508530576556534,13.511139005528364,11) == 80.5820152844154\nmy_func(47.4595880934557,19.273059016912335,5) == 111.12137528276205\nmy_func(91.79006452633269,25.409604809870626,15) == 162.06222776692394\nmy_func(95.11254052068362,44.960810044554414,2) == 206.2876607644076\nmy_func(67.27314223771795,20.56151886892664,4) == 125.39379766424624\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(46.9571873973548,11.183475275202154,17) == 76.31643010130654\nmy_func(96.33532352139078,15.448865238464814,11) == 133.13434932346544\nmy_func(60.567,37.053,1) == 97.62\nmy_func(92.63096127050872,34.0811079300888,15) == 200.4694536521559\nmy_func(25.980310475706073,7.6190871803769085,10) == 47.54142293192793\nmy_func(15.319,5.635,1) == 20.954\nmy_func(17.532976476252834,6.482213797466119,7) == 38.06616868862302\nmy_func(20.603228635068856,2.365700850950786,17) == 25.94836928116564\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 if input3 > 1 else input1 + input2\n```"}
