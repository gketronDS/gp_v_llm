{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(51.29319409055475,31.53259340385688,20) == 214.98064650024548\nmy_func(48.414154855148894,1.642069782994762,20) == 51.81359367697671\nmy_func(68.75582775695402,24.400240819464347,9) == 144.38881736261942\nmy_func(6.505242123776623,2.263993096492241,12) == 13.450240148092265\nmy_func(1.001,1.0,1) == 2.001\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(17.165,5.627,1) == 22.792\nmy_func(3.458663911097319,2.6217326243804377,20) == 25.02899749993248\nmy_func(77.02854565714647,50.2710836835178,13) == 365.03827937399626\nmy_func(9.268402414888186,5.689691371763754,9) == 38.25990870383763\nmy_func(68.57838031909952,32.14296883688321,7) == 188.6346956727254\nmy_func(4.986996516924295,1.906203371081106,10) == 11.157540831022375\nmy_func(42.70103858317342,22.8420419857047,9) == 140.4260176107373\nmy_func(61.35728562289962,10.166778727264944,11) == 85.72922416667338\nmy_func(5.552670378376808,4.059675498416269,20) == 35.68166165375415\nmy_func(24.736796535254463,15.532844438016571,18) == 108.20488020111252\nmy_func(62.145,62.058,1) == 124.203\nmy_func(2.176,1.787,1) == 3.963\nmy_func(60.53746536622477,24.615312664010105,18) == 143.5028942299696\nmy_func(26.11261885780789,14.973088581926255,12) == 96.18897325187348\nmy_func(5.087372660798692,4.081270268625111,20) == 45.796200350572725\nmy_func(5.04194383906026,2.0220750824263387,2) == 9.897048604554472\nmy_func(70.35301192573552,18.551468565436537,13) == 120.74346471061178\nmy_func(96.70213352159026,73.12952961919483,3) == 395.3895299575514\nmy_func(48.97697856384667,2.4997020318854615,15) == 54.24526715385865\nmy_func(66.80632073039123,39.6438917563484,5) == 242.54967914407487\nmy_func(49.77865897464292,29.448377134991997,9) == 192.2656462991938\nmy_func(98.83699299995564,20.962738104338335,10) == 152.04823519802827\nmy_func(90.9382296660112,75.18587296679489,1) == 166.12410263280609\nmy_func(15.319,5.635,1) == 20.954\nmy_func(60.567,37.053,1) == 97.62\nmy_func(14.898629090678847,9.389385969247352,8) == 64.0475437423407\nmy_func(41.68739919954224,36.91693490485603,1) == 78.60433410439828\nmy_func(60.154877399362185,39.19067152636448,3) == 206.2357386312852\nmy_func(40.63693567220155,7.520719064140773,8) == 59.09421507109161\nmy_func(66.32150765751221,19.203292077424823,9) == 120.3791878516808\nmy_func(66.11899591942225,61.16431174877509,8) == 787.693129909942\nmy_func(6.898499515383621,5.469998178681678,19) == 59.002654494269\nmy_func(42.82515863795019,28.440927264901543,16) == 211.87168527897865\nmy_func(39.561010011806665,9.0484209651681,19) == 63.024418738322154\nmy_func(73.4575211923936,68.8565233258998,1) == 142.3140445182934\nmy_func(39.55261258074483,19.601414733768657,16) == 117.26941831227084\nmy_func(23.212695180946884,12.636261386039978,18) == 78.67833928864194\nmy_func(10.180580509184592,7.80608994672484,6) == 61.4456839054179\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(18.919845635213328,4.844760398206458,18) == 31.944579632622897\nmy_func(76.14225661151896,48.02247332893246,16) == 336.0003393196911\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(99.77009693220712,68.86244011898506,1) == 168.63253705119217\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 / (input3 + (input1 * input2) / 100)\n```"}
