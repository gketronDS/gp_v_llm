{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(31.653152744528533,12.742767702612491,19) == 74.31211987643451\nmy_func(9.663919686937618,1.0982259294831918,2) == 11.985175997509891\nmy_func(79.58288816587537,76.00298917844586,9) == 1173.0564706732653\nmy_func(18.82219237120791,10.55064940528274,17) == 66.8353938517145\nmy_func(17.165,5.627,1) == 22.792\nmy_func(85.31679718400748,76.9339603966052,18) == 1394.6706416486545\nmy_func(68.13179640763435,26.563808632330296,8) == 155.1274629379343\nmy_func(7.733196579896312,4.090307921803392,20) == 25.099096231691455\nmy_func(75.65623926411322,64.1752509657868,20) == 887.1761094948304\nmy_func(40.38067122118719,28.178285696447613,3) == 149.7851147852341\nmy_func(1.001,1.0,1) == 2.001\nmy_func(60.567,37.053,1) == 97.62\nmy_func(62.145,62.058,1) == 124.203\nmy_func(17.476884448552738,7.733898520827601,15) == 45.22266450045313\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(14.989168244920304,6.216535888173061,13) == 36.23227838725086\nmy_func(11.201599748981812,4.191255807538175,6) == 24.52825079483688\nmy_func(18.739083410704534,2.769689520746706,20) == 25.239197744361828\nmy_func(21.505451694587048,3.037036554969005,9) == 28.57837444597255\nmy_func(38.44320157072981,23.509125718760913,8) == 156.35814320497732\nmy_func(2.176,1.787,1) == 3.963\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(69.14854207692798,44.32980524796051,15) == 315.7654517187003\nmy_func(83.87875714431961,16.864449984349207,8) == 126.0953489872601\nmy_func(80.52908225379853,71.45285229099437,9) == 888.7994319279388\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(23.672862438268535,19.695906255106284,7) == 186.90809688867097\nmy_func(10.298443965125236,3.203195216198567,3) == 19.007347357354465\nmy_func(52.448855452012296,26.393900642324336,6) == 156.13358846352142\nmy_func(64.84562293864028,40.462482116424766,11) == 278.4974616411092\nmy_func(8.0056067967882,2.9569299755745524,13) == 17.3830792882836\nmy_func(50.22071469764543,35.97128388049402,6) == 262.75568583565547\nmy_func(55.237790593143934,40.23229091679841,3) == 215.65134480409887\nmy_func(5.827167389362354,1.8283796405430264,10) == 11.15581633837356\nmy_func(39.2754146608876,31.073286077153963,7) == 271.5001952003708\nmy_func(75.28833463936934,64.05654039098985,7) == 632.5954120973212\nmy_func(90.11000186927454,16.930285088308644,14) == 131.80428816190914\nmy_func(28.933370091400423,22.999068303022447,2) == 93.21341263051066\nmy_func(15.319,5.635,1) == 20.954\nmy_func(30.035293933336604,6.200309490387153,2) == 43.7158683212437\nmy_func(82.55320503901244,56.907340976336265,6) == 400.7492457525929\nmy_func(69.56451847082083,11.822153137902491,16) == 98.04975257036553\nmy_func(64.57512458937033,18.332788082649813,2) == 106.445354025041\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(73.59028936805454,35.3471669751039,9) == 209.3403706858442\nmy_func(73.27656983663829,50.758827891440205,13) == 400.21966380281\nmy_func(60.456083838228686,30.925837148094033,18) == 187.08145196995093\nmy_func(64.7958784040784,17.664819119246452,5) == 113.19641468967087\nmy_func(1.0583402731783136,1.0490264757520522,18) == 35.224007702680375\nmy_func(47.37834624198051,5.8484206224321245,18) == 60.72238640883989\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if input3 == 1:\n        return input1 + input2\n    else:\n        return (input1 + input2) * (input1 / input2) ** (input3 - 1)\n```"}
