{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(25.679186539220822,25.658246770319504,2) == 102.63300380346736\nmy_func(35.79814169091485,27.71282769800241,19) == 279.02734540488615\nmy_func(68.03345794010457,59.868857079364005,9) == 728.510791839735\nmy_func(60.567,37.053,1) == 97.62\nmy_func(42.59066533916701,39.790726778168995,7) == 474.61156297956694\nmy_func(86.33940397236474,84.08016377760008,13) == 1898.912909368964\nmy_func(17.165,5.627,1) == 22.792\nmy_func(29.805599526880716,22.4825854110903,14) == 208.71102102737692\nmy_func(41.08170129907331,37.82769422858886,5) == 336.8020345086874\nmy_func(94.2455503444946,10.543206710201876,14) == 117.9880233933326\nmy_func(39.31664409929193,28.791442305686303,1) == 68.10808640497822\nmy_func(47.40317482419248,26.08997372839905,10) == 163.04084698312994\nmy_func(69.79334977510321,41.48453910471031,9) == 271.80698888305756\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(34.2444377659315,1.2572112376646762,18) == 36.85469006543246\nmy_func(11.204912212287496,9.793817218284383,19) == 153.81882666000303\nmy_func(49.36702363554102,37.78720679078385,16) == 366.3966896927797\nmy_func(15.046755423313742,1.936698376266832,17) == 19.492354212908563\nmy_func(7.1501486835348285,4.990903343602733,3) == 26.53108013358028\nmy_func(57.632521734031954,37.37624248623574,12) == 268.81963870144693\nmy_func(38.28496421050709,8.351556946998798,13) == 59.64832287809511\nmy_func(76.56480212375696,32.51083074210612,9) == 189.4859048216898\nmy_func(32.744271440919164,20.16744455757361,20) == 137.7492624435799\nmy_func(39.47376054584089,29.403812884159425,8) == 244.40417366102113\nmy_func(57.75306550094457,17.01246417649792,10) == 105.98560627602212\nmy_func(1.001,1.0,1) == 2.001\nmy_func(64.75418025899765,42.47161624986628,16) == 311.23768766464104\nmy_func(2.176,1.787,1) == 3.963\nmy_func(1.4255418243022333,1.30565496296127,15) == 23.78053619553083\nmy_func(13.702226956323326,4.611881599104364,20) == 27.605560016580625\nmy_func(39.28526360497725,9.251354529552128,10) == 63.48733460060748\nmy_func(93.71442662731432,61.12214197793297,5) == 392.6659517560765\nmy_func(46.41437617581342,26.949459929162057,14) == 174.8505529121067\nmy_func(25.543024720057343,25.314721642483693,16) == 761.386736604779\nmy_func(59.22889441193053,3.864819536712734,4) == 67.49689544649247\nmy_func(37.216618749775854,29.040688729402476,16) == 295.903141773927\nmy_func(14.317489915486274,6.248546233002036,6) == 36.24010502009987\nmy_func(14.37864730116737,9.050214232572898,5) == 56.976617280497294\nmy_func(62.145,62.058,1) == 124.203\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(42.00222677577606,25.95436536975929,18) == 177.83277681218993\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(52.84679394074794,16.058632520185313,13) == 98.98374981119832\nmy_func(32.87644967986161,24.17229052655511,17) == 214.32310731022645\nmy_func(68.8802018011242,9.798266513287604,16) == 91.72666303554922\nmy_func(15.319,5.635,1) == 20.954\nmy_func(31.211787901148,16.237237074045265,8) == 98.36848892520057\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(21.576129434864388,6.765451964605403,12) == 41.287852983330254\nmy_func(4.716558394816764,4.647331899197535,12) == 103.72530770320732\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if not (1.0 <= input1 <= 100.0) or not (1.0 <= input2 <= 100.0) or not (1 <= input3 <= 20):\n        return None\n    return (input1 + input2) * input3 + (input1 * input2) / input3\n```"}
