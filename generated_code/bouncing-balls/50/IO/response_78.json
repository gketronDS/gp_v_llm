{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(62.145,62.058,1) == 124.203\nmy_func(43.078056832686855,24.59172353739753,1) == 67.66978037008438\nmy_func(51.116152230610886,38.0941830690787,13) == 342.52475817421106\nmy_func(60.567,37.053,1) == 97.62\nmy_func(73.73591272208502,26.73020945416698,14) == 157.5969661856401\nmy_func(2.176,1.787,1) == 3.963\nmy_func(59.61070099910264,41.08099129703323,6) == 289.2269724306764\nmy_func(22.213062643702287,13.272597664814317,11) == 87.8604420466036\nmy_func(71.71566278136595,30.601624580741188,20) == 178.47314663660168\nmy_func(44.91797311591214,27.018727004080137,12) == 180.11939101750022\nmy_func(61.27316257168893,15.188748306136022,3) == 100.11411874963588\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(91.00515564651045,82.66624280585339,5) == 723.1458585337768\nmy_func(1.264479853466034,1.1545140905873126,10) == 16.617083506876554\nmy_func(94.45615591472038,31.94950143645183,1) == 126.4056573511722\nmy_func(47.64539922242748,34.57356467977678,12) == 293.2915075836962\nmy_func(3.010547283271379,2.2609813815321154,5) == 16.113908927103708\nmy_func(25.042145183571225,1.188176239143739,1) == 26.230321422714965\nmy_func(98.30391049391793,60.30291372956201,10) == 407.2005878038861\nmy_func(15.319,5.635,1) == 20.954\nmy_func(1.001,1.0,1) == 2.001\nmy_func(88.2759477966104,81.75774730742182,10) == 1233.4275233365415\nmy_func(81.86191048160862,64.01613029196994,10) == 611.9413018901594\nmy_func(8.581269743951093,3.3288955154619404,14) == 19.458659456443108\nmy_func(81.75889678655946,54.12408317382706,9) == 392.1999891925927\nmy_func(94.64218681417408,24.19276690275174,8) == 159.64070123885094\nmy_func(70.25712150096766,44.45661726157689,19) == 312.3236552154095\nmy_func(59.13113296031573,30.11933111376447,1) == 89.25046407408021\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(38.98553598761827,19.921873020835264,20) == 120.4665401524535\nmy_func(77.32166846248239,71.58562380781326,2) == 286.7680191336293\nmy_func(8.27530002794521,3.6396986811855383,18) == 21.27019636876868\nmy_func(53.30673126438917,40.697251843005155,17) == 393.36148654036987\nmy_func(58.1388449734018,57.45063839125521,10) == 1096.2266835138607\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(9.65460951375651,9.285296370114484,17) == 240.00170099390976\nmy_func(7.902263608518458,4.109854475490729,18) == 25.029520948007494\nmy_func(17.165,5.627,1) == 22.792\nmy_func(54.118288606619856,35.92633580454904,8) == 257.7655064195817\nmy_func(53.41830033448205,38.62130176415489,14) == 328.72676017316905\nmy_func(34.35878427910652,5.5317775781942515,7) == 47.54525434939556\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(95.01748093368096,64.94339537845903,2) == 269.29236191271934\nmy_func(11.20883963495156,3.9720766415240463,8) == 23.50749047201927\nmy_func(79.28240341248004,36.15159351657097,10) == 212.10657583293815\nmy_func(11.334375972925674,6.87871060725098,19) == 46.327167349009926\nmy_func(1.8436088022682613,1.725024152243685,4) == 12.955390728935887\nmy_func(61.04629880346019,4.6626089711207275,16) == 71.14265897818046\nmy_func(77.490303228569,24.22358232881904,1) == 101.71388555738804\nmy_func(71.81141069982503,14.487037610803773,2) == 103.70806133593464\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) / (21 - input3) * input3\n```"}
