{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(43.92932524719042,6.816066442389475,9) == 60.06507581971326\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(50.19264551366319,49.489189555761826,6) == 577.5226995482527\nmy_func(51.03154297595118,20.434308550780667,16) == 119.19413992072202\nmy_func(18.382013885404437,11.874558326080484,9) == 83.7933629136\nmy_func(43.91284232469851,15.92123243474182,5) == 93.27876988956494\nmy_func(84.80547160405625,82.72797025067625,4) == 645.9087939115707\nmy_func(49.24452037895964,6.869708763146568,5) == 65.20789587559591\nmy_func(93.02619703163052,75.09072885696253,20) == 859.9488885974599\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(17.165,5.627,1) == 22.792\nmy_func(37.18356876685442,36.3709678920858,13) == 840.3473514041397\nmy_func(85.75392696651484,19.08659878101127,3) == 133.36902293574505\nmy_func(62.20111667534061,37.65325656310875,4) == 219.042376883178\nmy_func(41.674790093011865,26.692726959901155,1) == 68.36751705291302\nmy_func(60.567,37.053,1) == 97.62\nmy_func(1.001,1.0,1) == 2.001\nmy_func(73.33867964317271,60.63062663586736,12) == 694.3348240948293\nmy_func(78.62107108603529,13.117813009789309,9) == 110.11068496093723\nmy_func(25.433833401518697,23.988301648144105,8) == 325.0606995220776\nmy_func(6.823943920805536,4.703171489476045,3) == 24.94738364562149\nmy_func(32.76047375817957,18.949873419706183,5) == 114.72021390000104\nmy_func(50.91302008804036,8.368127646105291,3) == 70.62612907894729\nmy_func(67.69510245039521,54.238552513884635,7) == 483.386871941722\nmy_func(48.35598338067317,13.927691087619662,8) == 87.47589534424895\nmy_func(15.319,5.635,1) == 20.954\nmy_func(70.82104116994724,17.355278990531634,6) == 116.7735397003878\nmy_func(42.80536155127435,1.3799681697470838,1) == 44.18532972102143\nmy_func(19.461917084284476,12.145277521753936,7) == 80.9747112111837\nmy_func(69.05659236455887,52.46797867679574,19) == 503.15729057387426\nmy_func(50.466396815558525,13.282176031237196,19) == 86.5195155077136\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(66.59962506259365,1.1334370500660214,4) == 68.90574049878904\nmy_func(90.00428670854888,16.44674274040561,5) == 130.22589355990073\nmy_func(79.06926420217707,74.27433975733669,1) == 153.34360395951376\nmy_func(72.3064455063477,17.655300630703316,8) == 119.022792829127\nmy_func(31.94342822033111,12.883418023399583,12) == 75.12570090038342\nmy_func(35.624091807682674,9.703501067599856,20) == 62.296201107417644\nmy_func(2.176,1.787,1) == 3.963\nmy_func(53.44736789562502,45.97541962399562,15) == 636.881475347067\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(62.145,62.058,1) == 124.203\nmy_func(44.121786858216865,8.121293024133372,6) == 64.02602155773778\nmy_func(41.63425559110627,31.8076155781702,4) == 205.16291766499805\nmy_func(69.54557329645954,29.50387492125834,7) == 171.6064526653823\nmy_func(75.18631817528278,55.05703727523552,2) == 225.61726879226345\nmy_func(66.34694484726963,9.594105731193428,18) == 88.7789363538805\nmy_func(23.60828574557006,16.934258636047343,3) == 90.48377972823162\nmy_func(86.48695914570771,54.19664092382828,9) == 371.1948393842548\nmy_func(79.13219680486658,13.681508954450871,4) == 112.11478276475565\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if not (1.0 <= input1 <= 100.0) or not (1.0 <= input2 <= 100.0) or not (1 <= input3 <= 20):\n        raise ValueError(\"Inputs out of the specified range\")\n    return ((input1 + input2) ** input3) / input3\n```"}
