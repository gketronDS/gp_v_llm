{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(94.3940174198392,43.885995211086176,9) == 258.1680611154258\nmy_func(66.0850600012556,5.073583834776072,17) == 77.07604444574416\nmy_func(42.99124459045438,5.845433143142323,7) == 56.521789898639824\nmy_func(50.84950069369754,27.17736942626136,15) == 167.59362756258437\nmy_func(90.3493010972108,80.42648632703926,11) == 1122.501719119362\nmy_func(30.71622414076995,13.0739254116947,9) == 76.20613022373765\nmy_func(62.145,62.058,1) == 124.203\nmy_func(59.657822280351475,29.020748183408653,9) == 172.4153109910249\nmy_func(3.4833226259655925,2.7941527867386338,12) == 29.476915873662765\nmy_func(53.05701231512218,9.091687125785931,7) == 75.00024134121023\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(75.40710058028364,44.19953312423234,7) == 282.13666875364584\nmy_func(2.176,1.787,1) == 3.963\nmy_func(10.034335705058115,5.796147522841121,18) == 37.478336223582104\nmy_func(16.475143719805473,13.007066058213065,16) == 136.8647615579376\nmy_func(67.79311208972742,2.1540476361815375,5) == 72.24258184984473\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(80.42399400234214,41.85122528919391,14) == 254.91588839614803\nmy_func(4.9948740962080596,3.6477720794916006,19) == 31.964055603832342\nmy_func(60.567,37.053,1) == 97.62\nmy_func(85.60211910158814,34.57047352410449,7) == 201.22818142374595\nmy_func(68.03823319088882,50.20336494439306,15) == 446.3597560232215\nmy_func(15.947410762751913,13.403125046374871,9) == 145.4740261073199\nmy_func(19.40088431021299,17.71280882198072,15) == 317.66295397183507\nmy_func(12.467910983187336,7.47622835732066,3) == 39.074615544818414\nmy_func(94.65104003517808,64.95326553790656,2) == 269.13105472663057\nmy_func(17.001110614854817,8.683037748095956,2) == 38.80190475999415\nmy_func(6.115941441583027,1.7159913085170777,18) == 10.886405604946562\nmy_func(96.49867178827512,92.06866782722932,5) == 860.1539360744589\nmy_func(60.67148348336077,42.94453846034468,14) == 351.8218000160915\nmy_func(84.56142508405911,67.2466980890947,20) == 733.8121667839265\nmy_func(2.7950989408256124,1.1404674501741854,7) == 6.635668721785767\nmy_func(13.156146982122976,7.177263580503301,20) == 44.74211404101546\nmy_func(59.481384189849294,15.238112029175282,14) == 100.45412172793988\nmy_func(1.001,1.0,1) == 2.001\nmy_func(76.97907615285514,74.31142044632297,17) == 1968.7324847463292\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(42.85148516653499,9.874126936007054,6) == 68.50253316151861\nmy_func(15.319,5.635,1) == 20.954\nmy_func(47.86103473738664,18.59210391925019,4) == 106.19082195182575\nmy_func(80.53869799734075,14.484514996735385,12) == 115.86012416906247\nmy_func(79.61588749108745,45.60843868732275,10) == 292.05078282158655\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(85.66078733241223,81.30665822642307,17) == 1931.6294080237255\nmy_func(73.12544887902698,31.07627090960692,14) == 181.21043219473057\nmy_func(17.165,5.627,1) == 22.792\nmy_func(88.45460244805784,76.75795947710616,12) == 1021.6105023502016\nmy_func(49.958275216956814,42.88523586035991,15) == 589.3583165724276\nmy_func(36.756828103192056,20.106370559405537,19) == 125.5274097582102\nmy_func(36.36637501790688,10.835851645269624,19) == 67.23614085833673\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 / (input3 + (input1 / 100) ** 2)\n```"}
