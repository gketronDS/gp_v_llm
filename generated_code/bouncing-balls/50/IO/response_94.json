{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(81.61953716650632,51.06979726483716,6) == 333.2315273806247\nmy_func(5.841286145159002,4.4932848052283285,14) == 43.64540589534567\nmy_func(81.94345920525745,12.006582486275796,9) == 110.07913916594435\nmy_func(68.38299246477037,51.427561895623114,11) == 462.1772556286375\nmy_func(15.056623254583023,4.270753967611181,10) == 26.98012074258355\nmy_func(3.607340952149896,3.092179086069095,5) == 25.201618594821763\nmy_func(13.075475356603611,5.117554163064036,14) == 29.89248473696624\nmy_func(5.11320599571518,3.260555469262155,13) == 23.044466656057107\nmy_func(27.822144069115534,19.40523089608017,8) == 147.36735806809517\nmy_func(75.6219637494249,55.42754205189058,6) == 414.652189650877\nmy_func(57.31495807574851,38.43111337972488,10) == 285.2630874400236\nmy_func(2.176,1.787,1) == 3.963\nmy_func(18.13239215681915,6.841145439701912,4) == 39.291894327608155\nmy_func(93.76724439937978,62.10907087220294,18) == 461.4065288339607\nmy_func(61.75093283006195,34.460525462153825,3) == 179.8657934253513\nmy_func(62.145,62.058,1) == 124.203\nmy_func(22.469923431674037,3.284769314277955,2) == 29.519646586960235\nmy_func(15.638056377754165,15.027575300345385,2) == 60.13413306964192\nmy_func(39.42527515060509,38.856595992111835,1) == 78.28187114271692\nmy_func(16.498798734917504,8.85682360381709,19) == 54.741639819394734\nmy_func(79.40295319230724,39.65840721405895,13) == 237.83605265802257\nmy_func(20.76040134713205,5.010803070063544,8) == 33.970033696892266\nmy_func(89.76044339392749,7.190293662061156,17) == 105.39330707511148\nmy_func(60.567,37.053,1) == 97.62\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(21.295424352024664,20.113166597973564,20) == 507.8886510674603\nmy_func(17.165,5.627,1) == 22.792\nmy_func(83.61729055232908,51.228341785465624,17) == 348.04169988737925\nmy_func(9.171791623502529,2.1448257500081347,3) == 14.581871039937647\nmy_func(29.732691424503408,21.6995291426416,18) == 189.7063246651308\nmy_func(1.001,1.0,1) == 2.001\nmy_func(33.80860294318987,17.89507301235068,13) == 109.81734089028645\nmy_func(63.82470530587344,8.483937003395408,17) == 83.3938149499136\nmy_func(41.873634137812,1.4139149379721254,17) == 44.80028602150547\nmy_func(10.143660223258976,4.975097525444241,3) == 26.17084805317479\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(81.16381408595126,21.338871311052667,17) == 139.06421792770288\nmy_func(82.14560162319708,57.3872515307963,7) == 425.35799624045984\nmy_func(15.319,5.635,1) == 20.954\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(80.04215888529804,19.30365142919492,19) == 130.91946838202142\nmy_func(39.395900229887346,24.916128455952673,10) == 173.18548112876442\nmy_func(31.900868388565453,19.12640653534371,12) == 127.15230686441852\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(60.98865209115372,41.57850693591168,11) == 317.5116457098291\nmy_func(85.78343221292265,6.768066412384601,7) == 100.47900145488332\nmy_func(22.293169486887173,9.515166792914844,6) == 55.15896226268032\nmy_func(48.04112291140032,43.59481378047592,19) == 833.6811087771536\nmy_func(84.37123666253156,1.2405492142620471,12) == 86.88936022253536\nmy_func(40.569154201865,34.649070071895196,16) == 474.1391574123716\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if input3 == 1:\n        return input1 + input2\n    elif input3 == 2:\n        return (input1 + input2) * 2.0\n    else:\n        return (input1 * input2) + (input1 + input2) * input3\n```"}
