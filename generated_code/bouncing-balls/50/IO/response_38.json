{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(100.0,1.0,20) == 102.02020201974588\nmy_func(40.107203381486705,31.53573963053993,4) == 207.0946997515321\nmy_func(62.145,62.058,1) == 124.203\nmy_func(42.84134953472994,10.679915270453156,4) == 71.01884170949164\nmy_func(81.18548974913159,69.29105377510696,9) == 780.2511056155892\nmy_func(11.188525840809778,4.831982163628093,2) == 22.93927549009921\nmy_func(25.399640771490073,23.084048471269877,6) == 232.1289297715655\nmy_func(74.2815787634928,34.015738618812314,19) == 199.7845526179221\nmy_func(70.52363322427928,19.946794985608857,11) == 126.15057703402807\nmy_func(17.165,5.627,1) == 22.792\nmy_func(99.87371190812006,97.43844577343329,10) == 1770.1139601631637\nmy_func(16.595699957932418,2.323421680075087,4) == 21.990563695147664\nmy_func(47.14547505832152,46.20710340946712,19) == 1489.1156882407336\nmy_func(3.610577672920634,2.986442849151688,3) == 16.56705100749463\nmy_func(59.79998482727784,31.18312371579649,1) == 90.98310854307434\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(46.139179126238446,8.975010028769084,14) == 68.42406301953828\nmy_func(33.28967224337829,21.380658431035897,1) == 54.67033067441419\nmy_func(56.1943404530971,20.586383667679325,6) == 120.87782997841356\nmy_func(58.79006616065216,34.53662666557913,8) == 223.0140409234916\nmy_func(15.319,5.635,1) == 20.954\nmy_func(57.173595863459575,7.512562721875889,10) == 74.47167435707838\nmy_func(54.885609673646954,52.164289588090234,16) == 1202.084131924958\nmy_func(60.567,37.053,1) == 97.62\nmy_func(2.176,1.787,1) == 3.963\nmy_func(50.765829844103834,44.290650416520656,14) == 634.9252090467484\nmy_func(48.2097333191661,48.17638083984961,10) == 960.8659444410146\nmy_func(45.86122607602418,7.265057551276637,14) == 63.12638279293036\nmy_func(52.34288523820664,51.21568680601461,9) == 855.649241469154\nmy_func(70.93137506094689,55.638355740717664,12) == 555.2000890666103\nmy_func(69.5209810947804,64.09573357439537,19) == 1346.5242120896642\nmy_func(88.03060276841805,10.225457994738152,19) == 111.16925859503372\nmy_func(83.18051632008597,32.12815622463128,18) == 187.8744596672126\nmy_func(37.87038154093743,20.217026332384847,7) == 123.07059227005638\nmy_func(35.898005084795265,24.76056566342824,3) == 131.35610800888148\nmy_func(11.211579438952276,5.6648297146360225,4) == 31.888835306663577\nmy_func(42.58955520935712,14.547295406408557,15) == 86.77734263000548\nmy_func(82.20589544747874,4.203849341741073,17) == 91.0667193966856\nmy_func(1.001,1.0,1) == 2.001\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(80.25758187721652,8.319228417047341,11) == 98.8201739858633\nmy_func(57.38753849777592,36.88208574183071,2) == 154.85525772521606\nmy_func(82.55951604352371,34.56007411104585,11) == 201.43292482436848\nmy_func(61.98873729513954,40.48411406338014,17) == 295.17459751543646\nmy_func(48.177740839696554,34.011943091800106,19) == 279.15193803442094\nmy_func(76.5654378377342,46.761721296220784,17) == 316.7536841318579\nmy_func(84.80083118846053,11.931125750742986,3) == 112.25658306307513\nmy_func(46.16409758463755,5.110279186939046,7) == 57.656874369739334\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(76.70736204881763,6.981861068616936,20) == 92.069321040329\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 / (input3 + (input1 + input2) / 100)\n```"}
