{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(71.55184972511579,5.133551446986495,9) == 82.61250955213966\nmy_func(60.567,37.053,1) == 97.62\nmy_func(41.728799314138136,11.590433915548545,20) == 73.82442725111774\nmy_func(19.59382831634099,3.870743719776587,17) == 29.24113231000775\nmy_func(84.70627198619519,51.22863543293219,16) == 343.83703100736903\nmy_func(41.78047320847341,15.232445437799464,9) == 89.71497522484128\nmy_func(74.66859657598566,14.633273681250197,16) == 111.06870064142372\nmy_func(5.500200592824615,4.593591202056657,15) == 57.1289246698451\nmy_func(97.61498396491984,62.21381940536684,15) == 440.1985691897417\nmy_func(93.542485353779,78.06045977259275,16) == 979.485442256707\nmy_func(70.84854212949483,3.5177751361554965,5) == 78.25164939294021\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(3.869703005773774,2.086325532573303,8) == 12.831563649854813\nmy_func(9.035548528554571,2.517509067112881,18) == 16.015277790012878\nmy_func(46.94075630792818,22.563713249049805,6) == 132.18773351271483\nmy_func(45.098696963460675,31.030102063793844,15) == 243.1458237262525\nmy_func(19.630984097030183,17.33637616705556,11) == 235.68501513415595\nmy_func(1.001,1.0,1) == 2.001\nmy_func(6.522333499826254,3.0850236462138856,9) == 18.20846482461749\nmy_func(14.32596696388725,5.0687818262526,5) == 29.847936504727656\nmy_func(38.42163538474179,20.065682537966648,20) == 122.42204671118192\nmy_func(39.01947152460594,12.334837135655915,8) == 75.08508964412448\nmy_func(15.319,5.635,1) == 20.954\nmy_func(6.153223351378211,2.3404024776767116,14) == 13.7072024275224\nmy_func(52.77411214666514,14.647897414145188,14) == 93.32520055015152\nmy_func(6.989022982630868,3.484938495993071,3) == 18.300759517919936\nmy_func(46.20948101711547,38.1685892510487,15) == 457.344628219084\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(20.48152799565818,20.18783535458019,19) == 680.6528784824841\nmy_func(98.28710765903313,49.25127672350212,11) == 295.57708533184115\nmy_func(49.28691100077311,25.52289643924242,7) == 153.6072448992637\nmy_func(96.5979603750305,20.35518018186867,11) == 148.17710464592994\nmy_func(17.165,5.627,1) == 22.792\nmy_func(2.176,1.787,1) == 3.963\nmy_func(29.70850169623616,17.030829915361267,17) == 109.519105182453\nmy_func(75.4408750945531,68.25697383221043,1) == 143.69784892676353\nmy_func(62.145,62.058,1) == 124.203\nmy_func(49.4376097224046,26.597880581243857,4) == 150.79293756506095\nmy_func(93.64951942325342,90.69939610316568,7) == 1174.693757456896\nmy_func(88.80773492062116,6.021480884006807,15) == 101.72664479096338\nmy_func(10.8452208660306,9.887236937157205,11) == 149.843823154724\nmy_func(42.66186045521451,29.384190571814052,1) == 72.04605102702857\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(71.12106105591572,19.321678390685136,13) == 124.17876347479029\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(51.174589492583735,38.922791210468105,16) == 371.60792036252616\nmy_func(41.15673820208438,10.850940775461686,5) == 70.53896920651262\nmy_func(90.5416204843828,85.71863641455205,8) == 1173.408694685775\nmy_func(85.95242188303052,24.0565388586328,9) == 152.76358520640227\nmy_func(52.68146887668681,29.787880349396172,16) == 189.75321834235865\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if input3 == 1:\n        return input1 + input2\n    elif input3 == 20:\n        return 2 * (input1 + input2) * input3\n    else:\n        return (input1 + input2) * input3 * 0.85\n```"}
