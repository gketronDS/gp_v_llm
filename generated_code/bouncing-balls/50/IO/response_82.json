{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(8.354554089012064,7.342012120367041,17) == 115.1097109440277\nmy_func(48.23724585940809,20.28863100478713,17) == 118.27055781047191\nmy_func(98.89076316225416,14.804637907047605,4) == 133.64603643544066\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(5.56731176578447,4.144673589637877,20) == 37.90267618375656\nmy_func(40.69179991072517,8.821306003275755,14) == 63.2176393887916\nmy_func(60.567,37.053,1) == 97.62\nmy_func(62.45001907828055,59.80118134344287,19) == 1617.2227949731514\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(69.74838680158416,47.36652675364568,6) == 329.1648495707617\nmy_func(34.41139256108578,31.01015559189418,10) == 428.1128331009529\nmy_func(24.039402798097104,3.7516754409139463,13) == 32.93029879530675\nmy_func(85.91219397660636,7.168867861576955,5) == 101.5548400649604\nmy_func(30.773512718510368,13.312194007013169,3) == 71.40636168321424\nmy_func(59.99174231883408,10.960301652897988,7) == 86.8118039365226\nmy_func(57.00473593831479,40.87025455778813,19) == 345.18090458967396\nmy_func(71.93368984732416,47.05737193618097,3) == 247.75423227117565\nmy_func(91.87747309256,54.599601355995105,11) == 359.838508839675\nmy_func(52.76677569658387,20.310016421505615,5) == 117.80139198790457\nmy_func(28.68132471373094,20.919403654147896,5) == 145.4484489221655\nmy_func(1.4816066824716017,1.2305702440222035,15) == 15.018794177175456\nmy_func(62.14708590972743,19.117882978903133,17) == 117.37100866887046\nmy_func(51.29380056846257,47.68351838930688,7) == 562.5490907101829\nmy_func(90.3851441969812,69.15989723777729,20) == 676.1875365055529\nmy_func(62.145,62.058,1) == 124.203\nmy_func(16.300906397160773,5.005668404024375,7) == 30.741012340992512\nmy_func(68.1362255208482,7.77880577805109,9) == 85.69888668581085\nmy_func(31.72910549999784,8.066318852757444,11) == 53.36112267651991\nmy_func(78.20229142955344,14.126105237726009,9) == 112.68290343013751\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(58.95814478169236,13.564241186730989,1) == 72.52238596842335\nmy_func(30.983928610004583,11.930314586932392,7) == 69.69718554833068\nmy_func(14.148867830035922,2.674395816015251,11) == 20.74432109384727\nmy_func(72.59936373768727,45.761761327082674,12) == 318.92333213191563\nmy_func(56.19700626775306,38.97017647012645,8) == 293.8508715905669\nmy_func(77.45763950875892,36.36669536616183,15) == 214.55967210101736\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(10.988647604576418,3.5090990134950353,7) == 21.29228441765297\nmy_func(94.71223072469536,37.74402437865678,18) == 220.21452380404057\nmy_func(64.71667816019567,34.35015975466154,8) == 209.79980322785477\nmy_func(1.001,1.0,1) == 2.001\nmy_func(57.06896840307192,29.26600366169624,7) == 175.5601614476307\nmy_func(94.09381158390607,58.997185710888466,5) == 370.6621678194151\nmy_func(2.176,1.787,1) == 3.963\nmy_func(73.51865451630064,34.08996310138117,15) == 200.64482142806145\nmy_func(15.319,5.635,1) == 20.954\nmy_func(17.165,5.627,1) == 22.792\nmy_func(17.666981299732072,5.854507180200039,16) == 35.1792251362076\nmy_func(87.4304239940451,42.78370133580269,5) == 247.83966406645845\nmy_func(41.05711690434644,1.1828461583943348,14) == 43.49298605336228\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    if input3 == 1:\n        return input1 + input2\n    else:\n        return (input1 * input2) / (input3 - 1) + input1 + input2\n```"}
