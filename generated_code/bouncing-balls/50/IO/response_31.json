{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(1.001,1.0,1) == 2.001\nmy_func(66.92920469830406,55.881218054873166,9) == 597.294659859261\nmy_func(58.35930732759991,34.09594733975057,5) == 207.23997708735695\nmy_func(78.79789692461368,36.567109720440435,1) == 115.36500664505412\nmy_func(2.176,1.787,1) == 3.963\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(64.83358760484862,16.35104095576791,11) == 108.56462189060598\nmy_func(70.08972284678894,59.40833613734802,6) == 534.6477494519592\nmy_func(38.24099391765523,18.613753029450923,20) == 110.77363411959344\nmy_func(10.52694401255004,5.590711841578682,1) == 16.117655854128724\nmy_func(79.57015976220612,47.93195070957578,5) == 295.2331601224746\nmy_func(10.8281398578491,3.0504761646159815,2) == 17.788464642624742\nmy_func(96.3069100509368,15.214724203542277,7) == 132.44528454582272\nmy_func(22.45144231068442,12.07731749304676,5) == 71.36042061389857\nmy_func(83.60929690766707,46.43888984297215,2) == 202.2805071588483\nmy_func(92.50028845111017,31.383700018141877,8) == 187.4661670371532\nmy_func(75.15092831355568,62.236013743769654,20) == 781.0394539443014\nmy_func(62.145,62.058,1) == 124.203\nmy_func(92.22815903993204,23.54660469737125,14) == 155.4666794821092\nmy_func(95.1941764747323,64.60270995191986,17) == 496.57102327895166\nmy_func(41.88241667294217,11.965207856219514,16) == 75.38365864925038\nmy_func(24.81018894495713,10.878661559196557,9) == 63.51899574593936\nmy_func(31.70076983886318,11.583432957693844,17) == 68.20696458580764\nmy_func(20.185530490290414,6.618773016761993,4) == 39.42021977603014\nmy_func(52.5013418331539,30.8897231311902,3) == 161.32242648306394\nmy_func(68.86666801158432,12.91234080388287,11) == 100.65080016323746\nmy_func(72.52501808588967,16.4173419623664,11) == 114.96725932307842\nmy_func(10.314924134914,8.129391128934213,20) == 86.30641640498573\nmy_func(75.86309100748181,66.71461459109767,20) == 1091.8375687945922\nmy_func(91.59741785769133,36.399553505072866,14) == 212.4024839552093\nmy_func(15.319,5.635,1) == 20.954\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(63.91135465467965,43.4161518119876,8) == 319.50716729460817\nmy_func(38.014371110268534,36.6423676225162,19) == 1039.7071456898311\nmy_func(92.88914395288391,27.91539882813453,1) == 120.80454278101844\nmy_func(14.145083216405988,4.387329467851017,3) == 26.06342151143808\nmy_func(9.663583621012624,3.4695926448577032,11) == 20.489523539500983\nmy_func(95.94642703860724,54.85890632035787,16) == 352.11044643392745\nmy_func(67.33312237334276,38.39036481362031,16) == 245.9269809323324\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(53.42576274672257,5.601405794821326,17) == 65.94069851666639\nmy_func(60.15574557427876,21.94429913189466,17) == 129.2489455945184\nmy_func(98.11738222747172,61.03490966638641,6) == 396.7050913789408\nmy_func(60.567,37.053,1) == 97.62\nmy_func(67.85460694266516,9.21500870528264,18) == 89.18083744852022\nmy_func(16.155214249154668,14.036683329063155,2) == 56.42454889245721\nmy_func(17.165,5.627,1) == 22.792\nmy_func(46.621281601508024,45.65627248358262,18) == 1398.6551335455035\nmy_func(66.97643269252742,24.51982396731862,5) == 143.3885865976491\nmy_func(100.0,1.0,20) == 102.02020201974588\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 / ((input3 / 2) + 0.5)\n```"}
