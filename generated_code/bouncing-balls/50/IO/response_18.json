{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(75.32359525342478,68.40509950001707,12) == 1072.375694080294\nmy_func(29.936099507480932,19.16730032040061,6) == 127.09769213849758\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(92.43655393005682,63.88418061091283,7) == 467.96646957997575\nmy_func(60.567,37.053,1) == 97.62\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(62.145,62.058,1) == 124.203\nmy_func(2.176,1.787,1) == 3.963\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(77.72864959245206,76.88843449523351,2) == 307.5628198294728\nmy_func(89.81860100822311,87.9474891462177,18) == 2691.5012313226016\nmy_func(1.001,1.0,1) == 2.001\nmy_func(98.54745040513885,48.46776937834974,15) == 289.29157562995414\nmy_func(33.83009277539194,14.687776741201237,20) == 85.74531579035654\nmy_func(32.855520445914365,5.873569809560275,17) == 47.15983785403097\nmy_func(4.544937207611207,2.92999015978865,18) == 21.02886798721204\nmy_func(64.60106019722147,9.75535177361969,9) == 87.58210961451238\nmy_func(55.67215763595771,52.60593458692805,17) == 1215.5164939107042\nmy_func(27.863707502660972,8.17992111056552,17) == 51.0221506569559\nmy_func(74.09710639285329,18.511593229289808,9) == 123.4496233300536\nmy_func(17.165,5.627,1) == 22.792\nmy_func(89.2672128007677,8.813823338083008,6) == 108.82590118811405\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(61.533146821924646,16.320140651180537,12) == 105.95529079206102\nmy_func(88.37568160024973,46.48578127213302,17) == 284.51387814788046\nmy_func(78.5318147215551,76.6727927934085,1) == 155.20460751496358\nmy_func(72.5948563271926,11.777915746352912,1) == 84.37277207354552\nmy_func(71.72961668898502,13.194272827560898,4) == 103.94718387211178\nmy_func(69.17428020058128,42.62646729947793,16) == 291.1875738890171\nmy_func(15.319,5.635,1) == 20.954\nmy_func(5.617794884984622,3.5281653443278755,4) == 20.762917709487542\nmy_func(35.680771481065015,1.528373908631191,13) == 38.874313607475635\nmy_func(66.24033688995638,24.54033762236862,16) == 144.2048386136475\nmy_func(10.374423227902836,4.705604744657384,20) == 27.59773896899175\nmy_func(74.49130649404803,57.7609719795464,8) == 511.8945001577693\nmy_func(43.3028898254085,7.980480212368926,5) == 62.85658382326495\nmy_func(94.01523076338148,46.98559310854163,7) == 279.674700168674\nmy_func(64.77754167448569,13.871996981543983,15) == 100.08190292196424\nmy_func(45.11739934933679,15.70259616281429,12) == 93.28742817849074\nmy_func(75.13058407614884,70.90417948402234,18) == 1680.4104253189248\nmy_func(35.88193943652071,2.7089140815830106,17) == 41.74218824605431\nmy_func(65.78943089639054,35.37437805257617,1) == 101.1638089489667\nmy_func(34.22040369255495,22.80260613931732,11) == 168.93890931132194\nmy_func(8.726613337398089,6.581410011945626,19) == 61.97989854142225\nmy_func(1.0111081238402364,1.0100898940667535,10) == 20.12063304918711\nmy_func(93.25746802032522,26.73412024185013,9) == 168.21109927588782\nmy_func(3.4552747214502277,2.838756114912663,13) == 32.534188423110805\nmy_func(61.1476379348331,52.30016637225576,15) == 708.8749687977252\nmy_func(49.34296433735993,45.49442493120421,20) == 976.2861565990244\nmy_func(65.87947734454548,27.905124516851775,12) == 162.69597697453295\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 + (input1 * input2) / input3\n```"}
