{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(40.65591141510232,20.91484188061451,11) == 126.71773193906456\nmy_func(14.98493870540901,4.730148245551547,20) == 28.80891357025852\nmy_func(2.176,1.787,1) == 3.963\nmy_func(66.95900594642958,1.882990685375008,10) == 70.83395692171565\nmy_func(14.912002324855344,5.627290231498441,10) == 32.98584163350118\nmy_func(15.319,5.635,1) == 20.954\nmy_func(32.69218881419782,14.336943580024732,18) == 83.76269132094225\nmy_func(47.284613695897896,28.951813895670316,6) == 186.2710152637436\nmy_func(19.295878657878557,16.470813578583268,5) == 133.59014880748248\nmy_func(1.4340848451167598,1.149742229693069,2) == 4.655346839212897\nmy_func(44.922596390839026,2.355830109586445,7) == 49.895020337558485\nmy_func(34.40990986053299,23.199458001321663,9) == 171.73920236064268\nmy_func(62.293318157075,7.715030149034498,10) == 79.90452736268954\nmy_func(32.40997272948549,9.508082717687616,8) == 59.31774634109937\nmy_func(24.568857037602953,2.7690996196366036,8) == 30.810541543138548\nmy_func(98.8681832567663,27.937271392476084,16) == 176.74980593027232\nmy_func(97.52927801614076,62.34026081286832,2) == 262.0574027874656\nmy_func(88.58446157401063,1.5958962867799606,3) == 91.83427395742468\nmy_func(68.59834949672859,19.904939601692117,7) == 124.66015491877712\nmy_func(89.52959670661136,69.46428833237691,20) == 704.9824085142005\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(79.10070477654071,54.74326027532888,16) == 433.4539257384763\nmy_func(1.001,1.0,1) == 2.001\nmy_func(27.247581879419876,15.274776283873086,12) == 96.67870369398246\nmy_func(39.18708738548642,22.83249502388029,20) == 148.60152226596867\nmy_func(92.23055116218842,56.543584220390365,14) == 384.0892729807885\nmy_func(2.2003682483563898,1.6211342878379016,10) == 13.832866817879768\nmy_func(52.76182203683426,28.8013363460789,11) == 179.3745782362757\nmy_func(31.694489737594477,2.9469176558717143,14) == 38.192502941164314\nmy_func(66.11692688060953,16.159721056187212,6) == 108.86756811903402\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(90.05435761646447,73.64728885777701,17) == 869.1001587077591\nmy_func(53.48876529805375,11.260478445401622,1) == 64.74924374345537\nmy_func(27.87248424947528,7.466017285706029,7) == 48.2628557383796\nmy_func(50.694862173350984,22.475999064210196,6) == 130.45223394898792\nmy_func(26.500496909473135,26.108533760642693,9) == 446.4142879599403\nmy_func(48.648474284792215,4.837898495165705,14) == 59.39274673973018\nmy_func(98.81461865307304,58.82769588970325,16) == 389.4644934745461\nmy_func(57.10805649498333,11.115046575702108,9) == 84.7104215290176\nmy_func(62.145,62.058,1) == 124.203\nmy_func(64.76838435962361,63.82716082807694,15) == 1744.547028121904\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(17.165,5.627,1) == 22.792\nmy_func(78.19397028425588,30.77298591790892,2) == 151.85055194322976\nmy_func(74.99334389009506,29.555951767862716,11) == 172.549999571901\nmy_func(60.567,37.053,1) == 97.62\nmy_func(21.882418072896723,13.638711920703388,19) == 94.27684259971248\nmy_func(65.9434197166636,1.714417535618766,6) == 69.4637781405575\nmy_func(75.00254987029652,44.66022364334984,2) == 190.9158999945863\n.\"\"\"```", "response": "```python\ndef my_func(input1:float, input2:float, input3:int):\n    if input3 == 1:\n        return input1 + input2\n    return (input1 + input2) * input3 / 2.0\n```"}
