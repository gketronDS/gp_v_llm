{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(32.98524718564167,29.3775451399185,11) == 410.7175075849168\nmy_func(16.338635310901942,3.1061876610633865,13) == 24.009304927807033\nmy_func(67.21567498663822,37.37755720382165,9) == 234.416853255222\nmy_func(75.95295496787645,39.20100842690121,16) == 237.9754755988796\nmy_func(30.83149591522294,18.70550990035224,9) == 124.54988254183884\nmy_func(55.63006336663941,54.07357143603381,17) == 1500.5926589955934\nmy_func(17.165,5.627,1) == 22.792\nmy_func(69.06698224456302,47.98324524132463,13) == 380.07021862376985\nmy_func(62.80240510413629,33.503415595003226,20) == 206.43087158056835\nmy_func(46.17124725597207,6.266370749157093,10) == 60.672038887584264\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(32.25485762295671,18.54233119905231,17) == 119.4763077578782\nmy_func(9.339648243901566,8.644644810824957,17) == 176.76668072380966\nmy_func(93.82765535175646,38.57717042557495,6) == 223.7667845933137\nmy_func(80.01410176649459,72.40758287915328,1) == 152.42168464564787\nmy_func(1.841635685170946,1.160682811931596,17) == 8.116593485891373\nmy_func(49.733244357411635,8.805502715254754,13) == 71.13321411635205\nmy_func(31.23692314369459,12.792579388159943,17) == 74.56735017868009\nmy_func(74.46816990577352,4.46677907387893,7) == 83.97177692347142\nmy_func(44.69564860137599,6.305401981422804,3) == 59.21100103377825\nmy_func(5.554390640836019,3.118240883440755,4) == 17.809332652087743\nmy_func(33.55858015020058,23.43854929404117,17) == 188.58233359247217\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(86.14211445360395,71.45518804525523,18) == 892.386835617312\nmy_func(32.40273904817232,12.293691791118231,11) == 72.01996156395444\nmy_func(81.027506308444,63.645439652488946,1) == 144.67294596093296\nmy_func(26.98494571747358,18.550322888791065,5) == 123.31709069314856\nmy_func(62.145,62.058,1) == 124.203\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(78.22779980558991,48.93755572460196,18) == 339.5575802298592\nmy_func(83.52999986577143,10.17322533031771,15) == 106.69812612474622\nmy_func(45.57452760327094,42.54163741464982,18) == 940.7666677606452\nmy_func(18.487581848311603,16.627833245027794,17) == 291.51272274583914\nmy_func(60.567,37.053,1) == 97.62\nmy_func(6.1222103427429895,4.606752440668792,19) == 43.14825139782569\nmy_func(67.3545274474814,19.954617655443062,19) == 124.06492311933268\nmy_func(31.689041933171772,28.61038200183875,8) == 346.6530950406668\nmy_func(9.855764480395862,1.0247504606789617,1) == 10.880514941074823\nmy_func(88.24533532925236,21.595888264199075,15) == 145.43219866140635\nmy_func(1.001,1.0,1) == 2.001\nmy_func(53.6366502460208,39.18348471537105,4) == 246.35316673322345\nmy_func(40.892051049494185,23.867366241558873,13) == 155.40548911188358\nmy_func(96.71463600626409,82.0227789845648,9) == 909.5441520154162\nmy_func(18.63119945809965,11.879384290001028,12) == 83.81187977201934\nmy_func(15.319,5.635,1) == 20.954\nmy_func(48.41715229152956,43.83373296491891,19) == 827.2125440755657\nmy_func(2.176,1.787,1) == 3.963\nmy_func(80.1373829293114,33.40541570085498,2) == 160.8733236112864\nmy_func(92.81818549485472,47.85618595685968,17) == 290.40015784905364\nmy_func(36.311,33.399,1) == 69.71000000000001\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 if input3 == 1 else (input1 + input2) * input3 / (input3 / 2.0)\n```"}
