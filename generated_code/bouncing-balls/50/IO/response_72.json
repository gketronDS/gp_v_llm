{"submission": "```python\ndef my_func(input1:float, input2:float, input3:int):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a float in [1.0, 100.0], float in [1.0, 100.0], integer in [1, 20]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(14.439778404897623,4.466681409469981,2) == 24.75482744506533\nmy_func(22.29281348331036,7.218571329212279,6) == 43.59313257675973\nmy_func(83.89201615211988,31.93286906035664,11) == 187.00358978157828\nmy_func(53.65259349716386,22.651432727452153,8) == 131.9233409754584\nmy_func(42.96907151868774,34.99702737751731,18) == 409.7817420845436\nmy_func(46.821,8.151,1) == 54.971999999999994\nmy_func(79.0458858540943,70.0614422924347,18) == 1162.3442051411394\nmy_func(100.0,99.999,20) == 3999.599534511501\nmy_func(98.68450540532533,72.92071922913652,5) == 512.5055989502805\nmy_func(70.9936687569109,32.51193303743338,7) == 190.14736694750624\nmy_func(71.31386498773482,28.616329829651487,16) == 166.9043689464192\nmy_func(4.5515341626842805,1.6601685162992053,20) == 9.778347166290189\nmy_func(20.36676862488775,2.2300680088444453,19) == 25.375317863783017\nmy_func(80.36175849449414,10.446038720323404,18) == 104.37530074603308\nmy_func(2.4364140960793463,1.780762808297959,4) == 11.198932588965464\nmy_func(55.14366594084601,42.17942686664785,5) == 305.5757258769658\nmy_func(24.585922147776824,19.725263136594123,8) == 185.65596781485013\nmy_func(26.049476597668672,21.91287861783872,4) == 150.79729420122828\nmy_func(46.20259647878717,19.654022298108437,14) == 114.6098252470974\nmy_func(43.35764191509246,35.31534656493847,16) == 408.2244300274327\nmy_func(50.97131829827633,30.680348503904938,5) == 188.90519218716415\nmy_func(36.311,33.399,1) == 69.71000000000001\nmy_func(46.04517248810874,31.515756274853494,3) == 166.98316659336754\nmy_func(16.445173393960154,3.1883644939625704,14) == 24.35555480349851\nmy_func(84.03250002841318,63.31090375170729,7) == 515.1903167422198\nmy_func(17.165,5.627,1) == 22.792\nmy_func(15.319,5.635,1) == 20.954\nmy_func(24.99693563219393,4.693402738358618,18) == 36.553612767270536\nmy_func(71.09442950571638,37.47459735217083,7) == 226.99059152131625\nmy_func(36.586256572235136,30.763492315485717,2) == 123.98067223960943\nmy_func(90.22357717046076,12.95830394752453,18) == 120.4867080277837\nmy_func(9.456414306436823,6.9588640589661015,17) == 61.81450483116209\nmy_func(95.64249185856436,70.55893584583866,4) == 446.00279990089894\nmy_func(59.20116927526604,49.18248973038368,15) == 600.7570501670084\nmy_func(91.83865012341091,80.73898244614224,17) == 1268.068570633087\nmy_func(80.62683891094535,12.299528740518264,17) == 109.65394755767532\nmy_func(8.822048309869942,6.397652364204858,4) == 40.06531766999208\nmy_func(100.0,1.0,20) == 102.02020201974588\nmy_func(62.53599154451646,15.959643473970198,13) == 105.3925967501968\nmy_func(2.176,1.787,1) == 3.963\nmy_func(32.22311419065381,16.01238218809848,18) == 95.88047136405704\nmy_func(37.773448978670245,15.323694622268624,6) == 88.94184649437999\nmy_func(12.563101412339131,8.325185564262615,4) == 49.98148007646031\nmy_func(81.49625237014797,34.39335205120159,5) == 197.8250497769583\nmy_func(1.001,1.0,1) == 2.001\nmy_func(4.266775548250305,4.11181718880632,17) == 107.69622846159967\nmy_func(28.007134927411876,13.088642059453909,18) == 77.15080121718259\nmy_func(62.145,62.058,1) == 124.203\nmy_func(68.68248324343536,12.778906034194804,16) == 100.0825131837823\nmy_func(60.567,37.053,1) == 97.62\n.\"\"\"```", "response": "```python\ndef my_func(input1: float, input2: float, input3: int):\n    return (input1 + input2) * input3 + input1 * input2\n```"}
