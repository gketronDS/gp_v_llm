{"submission": "```python\ndef my_func(input1:str, input2:str, input3:str):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             3 strings of length [0, 26]. The function should output a string that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(trjc,yoas,tjrtrtcct) == yaoyoyssy\nmy_func(mbdaqyjk,nmbokqpy,jd) == pb\nmy_func(oazsingmwxjutedkp,fdcmazqysuxrgehkl,xg) == uq\nmy_func(j,h,j) == h\nmy_func(ecblnymt,snhupejz,bb) == hh\nmy_func(canyz,jcybk,nnnayncna) == yyycbyjyc\nmy_func(lyhimwznkoxt,zotsgmbdlcpu,hnhho) == tdttc\nmy_func(eadrhboksjqgi,blrhcguotedni,areoeegb) == lhbubbng\nmy_func(o,z,oooooooooooooooooooooooooo) == zzzzzzzzzzzzzzzzzzzzzzzzzz\nmy_func(abcdefghijklmnopqrstuvwxyz,zyxwvutsrqponmlkjihgfedcba,bvafvuqgjkkbeccipwdfqttgzl) == yezuefjtqppyvxxrkdwujggtao\nmy_func(bautzlsgokywmnqvcxphiferd,zkrdahlswtxbcpvnmfyjiqeou,wsihvbphqtdfepcuanomrn) == blijnzyjvduqeymrkpwcop\nmy_func(vwousfxdcb,wtgbmfcvka,xxsoouudcwbfswdvvxwffxwsdw) == ccmggbbvktafmtvwwctffctmvt\nmy_func(osjcvknimpwxrehyafzqgblu,qwlhteiudkmvnsagfzorjpyx,xzmaovwwfvhbxfmyolsq) == vodfqtmmztapvzdgqywr\nmy_func(ucaihxfvlop,elyupdgfrwz,ph) == zp\nmy_func(otghvwmkclidzryxsfqeapnjbu,alpebhxmnrcyiosvtgzjwuqdfk,aaabbbccc) == wwwfffnnn\nmy_func(msxuzajy,oghzvjcl,xzjzjuaajjumauzua) == hvcvczjjcczojzvzj\nmy_func(abcdefghijklmnopqrstuvwxyz,cdqutzayxshgfenjowrkvmpbil,thequickbrownfxjmpsvlazydg) == kytovxqhdwnpezbsfjrmgcliua\nmy_func(cvmekynpxbtjaqoigrhwf,hziayujcdbkwqxrnpvgfe,qrinittye) == xvnjnkkua\nmy_func(dfevkrocatgsjxzm,otlrgjwdickyavqu,trovt) == cjwrc\nmy_func(a,z,a) == z\nmy_func(twjybpesrohdfcqnkaxlg,cluypvonxtfidhrjkqazb,gnbtweblwbpc) == bjpclopzlpvh\nmy_func(bqeywhpjorc,ehglnjvxkdp,yprhwyqeqhqopycpebqqrwbyr) == lvdjnlhghjhkvlpvgehhdneld\nmy_func(vzhlkijbngmfy,ioefqxwkjvhra,yihniijmmmlzzvnilbzvm) == axejxxwhhhfooijxfkoih\nmy_func(otpdhwnsixm,xmrtyedupvo,hspm) == yuro\nmy_func(exzwclumovqbgahykij,cbpjsvoniymwgeatqhl,icgiwahvjcqhqe) == hsghjeaylsmamc\nmy_func(yaikrvuptsolwnzbmexqcgf,zfnsviqerupyxdbomkctahl,epcneskumwcygqeaolixzq) == keadkusqmxazhtkfpyncbt\nmy_func(kdgnrqcfehpvmxlwzj,ovglbmajnfhxiqtedk,rzjhllrvemdkcghmjfvmvpqjex) == bdkfttbxnivoagfikjxixhmknq\nmy_func(yvsmcpqzdgjbklh,lwzdqcobjfmnxkv,zkmyvblhzj) == bxdlwnkvbm\nmy_func(inaehjgofz,ndmekyphgq,jhai) == ykmn\nmy_func(avmdjbxekpszqyolft,cheplsxdfqakgnwyto,omzdxlbexfqx) == wekpxysdxtgx\nmy_func(kjiztchgaemfsxnbprvduolwqy,hqwkclanzevxpfgsdtorubymij,ubgvhjlzukufanmrhzgkjxzx) == usnoaqykuhuxzgvtaknhqfkf\nmy_func(fzxrodaqjubngtyveihcs,vfpjwkqmysnlcaguzboti,afhjcbex) == qvoytnzp\nmy_func(pcdlkmjutbisvnzfaxwrq,qpvgtxjoduaiysrcwnfbh,tfqxmrqmajtlkfmzsxmmruxi) == dchnxbhxwjdgtcxrinxxbona\nmy_func(nan,nan,nan) == nan\nmy_func(rtd,lpo,trtdttdttrtrrt) == plpoppopplpllp\nmy_func(jmxaf,piorn,axxfjfxjaxxajmfmamf) == roonpnoproorpinirin\nmy_func(hbkwnivyum,pijgdfbzve,myviiuyumnbkhhihnihuukw) == ezbffvzvedijppfpdfpvvjg\nmy_func(ytmbhzsejvukdqilwrx,qrayxvjlhbugowsepif,ryitwumjstdbzl) == iqsrpuahjroyve\nmy_func(a,a,a) == a\nmy_func(thqjvycimepsrfg,stduvcfhqprwbey,cy) == fc\nmy_func(h,d,hhhhhhhhhhhhhhhhhhhh) == dddddddddddddddddddd\nmy_func(rgpszvaxuidj,gdybsetinupx,dusvdv) == pnbepe\nmy_func(ogjmkbdtsuxnrv,jimqszrybecnlv,sgrdbx) == bilrzc\nmy_func(ogcaxrhbunktlsmjeyzdpf,nrgcltbmhsuixdjpqwyzva,esffymcsykbon) == qdaawjgdwumns\nmy_func(ptigojusqyxbmwfekczhlnadrv,gptxvysjkurmnedqlhobizwafc,afbyzrrfcrlxvhsrozcrocjdct) == wdmuoffdhfircbjfvohfvhyahp\nmy_func(aolrzwevhngqpicbmsk,jebhasgyiuwlcfzdmkq,ggnlpvglhszoahhlngil) == wwubcywbikaejiibuwfb\nmy_func(gxhsevjlznqkirywfdamptbuoc,jhnlxwfobyuriscqvpaetgmdzk,fxmhqfgzmsw) == vhenuvjbelq\nmy_func(e,l,eeeeeeeeee) == llllllllll\nmy_func(zgnjfdvuytrkaxwpsembhcilq,dtgsubzxhviwnrkapflycjeom,eeewqqv) == fffkmmz\nmy_func(atlf,xjuz,tflflfaf) == jzuzuzxz\n.\"\"\"```", "response": "```python\ndef my_func(input1: str, input2: str, input3: str):\n    result = ''\n    for ch in input3:\n        index = input1.find(ch)\n        if index != -1 and index < len(input2):\n            result += input2[index]\n    return result\n```"}
