{"submission": "```python\ndef my_func(input1:int, input2:float, input3:float, input4:float):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             an integer in [0, 20],a float in [0.0, 20.0],a float in [0.0, 10.0],a float in [0.0, 1.0]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(0,0.0,0.0,0.0) == 0.0\nmy_func(11,1.381766841971637,9.560331378767684,0.1378208100241882) == 56.06351163140884\nmy_func(20,19.99,9.999,0.999) == 10.00900900900901\nmy_func(0,12.27631382237915,8.379387172799342,0.359996226550424) == 12.27631382237915\nmy_func(8,11.3,0.5,0.3) == 2.2220091629999996\nmy_func(9,12.332685443444024,6.9899489911499915,0.8033768897113305) == 8.700711163502774\nmy_func(19,9.054249221826748,8.564716182095783,0.5580600180797376) == 15.347301836278838\nmy_func(2,2.7826202723868176,6.632933677945234,0.4222850125816304) == 11.393591208818226\nmy_func(9,4.659909374368487,2.2648345397257055,0.1578902256430465) == 12.281864328427272\nmy_func(10,0.0,1.0,0.0) == 10.0\nmy_func(9,13.300788824169212,9.542713721481732,0.733158200496821) == 13.01590181726728\nmy_func(12,2.7400083693470334,0.9144076061561623,0.9771163238615064) == 0.9358226690374768\nmy_func(16,18.19,0.0,0.05) == 8.005904102775611\nmy_func(15,15.0,15.0,0.15) == 92.5748913763936\nmy_func(13,5.261659892371582,5.326521831936445,0.9863168311151636) == 5.400416644937608\nmy_func(17,13.995554733623017,2.376623359669977,0.3281348884265415) == 7.250645576863995\nmy_func(17,2.629595703454699,5.277623112948921,0.3927995943659882) == 13.433677544464008\nmy_func(8,15.233826758683785,0.4345799467422506,0.4881647629017642) == 0.957793636368045\nmy_func(8,12.063049099343171,2.0471853696270035,0.8767667408005052) == 2.3349264154617373\nmy_func(10,7.065967433680454,4.119225086937194,0.2518024021016288) == 15.84807898940036\nmy_func(11,17.883478553990642,2.6103178611818367,0.0132025549279806) == 42.34229493427222\nmy_func(4,0.6606276590009252,0.9170269047025636,0.7018694902119914) == 1.301446271976678\nmy_func(5,1.3,1.5,0.05) == 7.792487093749998\nmy_func(18,15.076596888012777,8.71076389352228,0.8837895725063404) == 9.85615146920031\nmy_func(15,14.41549941447482,3.9534890322028895,0.5041875251526021) == 7.841483575753134\nmy_func(3,19.87658888587478,6.896461970878586,0.7615529310882202) == 9.202489874300092\nmy_func(16,6.904619687444759,0.622750202290614,0.2721737575028117) == 2.3166872252157003\nmy_func(3,3.5643939122088653,1.4187445010314017,0.5824849518125621) == 2.517824726692962\nmy_func(13,6.534480419788073,4.2928043249260925,0.0098688274139658) == 58.36269517527479\nmy_func(8,10.0,2.0,0.0) == 26.0\nmy_func(19,10.579125163181123,0.29350413941019,0.5291622850544407) == 0.5546641884908694\nmy_func(17,19.576630407260943,6.179866654620545,0.0561015168591017) == 76.21171908270037\nmy_func(10,0.0,2.0,0.0) == 20.0\nmy_func(4,2.2149063473460817,1.8338851708914483,0.8743670352061748) == 2.0974152683596294\nmy_func(9,3.463147089887335,9.849833290198037,0.6049852060812964) == 16.27811279299132\nmy_func(16,10.187274018709768,7.201207601164827,0.8034409631018866) == 8.96295799179523\nmy_func(7,4.588464683080627,8.174368069428734,0.4692035205395217) == 17.26944850075694\nmy_func(18,18.47418935380916,7.179060751303341,0.6377603993897474) == 11.256673840611258\nmy_func(17,3.451850836955299,5.350486667669595,0.6202430669907363) == 8.626434900073122\nmy_func(14,10.21264814959026,9.032325419157072,0.2166711292534062) == 40.656003217826\nmy_func(13,0.0,0.0,0.0) == 0.0\nmy_func(0,19.394220454561378,4.370744877451925,0.6648758054486507) == 19.394220454561378\nmy_func(15,14.56,0.0,0.0) == 14.56\nmy_func(20,10.43209129885548,2.1811590958817897,0.5013116520974606) == 4.3509099485400835\nmy_func(0,4.208493736425856,2.6400522880455215,0.2989622582787735) == 4.208493736425856\nmy_func(20,19.99,9.999,0.0) == 219.9699999999999\nmy_func(9,10.2263593671308,2.083086956985833,0.3031467113376755) == 7.001546382957851\nmy_func(11,0.7931121500073535,3.6070940240705553,0.3213509276194527) == 11.078074453502207\nmy_func(16,2.3686313521573643,4.58383576688795,0.0371483999240878) == 57.35044361567813\nmy_func(0,14.5587862466184,2.479017646225472,0.7982862957719035) == 14.5587862466184\n.\"\"\"```", "response": "```python\ndef my_func(input1: int, input2: float, input3: float, input4: float) -> float:\n    if input1 == 0:\n        return input2\n    if input4 == 0.0:\n        return input1 * input2 + input3\n    if input3 > 10.0:\n        return input1 / input4\n    if input2 > 15.0:\n        return input1 * input2 / input3\n    if input1 > 15:\n        return (input2 * input3) / input4\n    if input1 < 5:\n        return (input2 + input3) * input4\n    return input1 + input2 * input3 * input4\n```"}
