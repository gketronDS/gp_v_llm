{"submission": "```python\ndef my_func(input1:int, input2:float, input3:float, input4:float):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             an integer in [0, 20],a float in [0.0, 20.0],a float in [0.0, 10.0],a float in [0.0, 1.0]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(0,3.8731936768846897,7.153218690108082,0.8404221485134925) == 3.8731936768846897\nmy_func(20,12.940080060617651,2.471632791756067,0.1522760922182694) == 16.110355780907966\nmy_func(15,13.265630542304788,0.0165260595356797,0.5535678182609022) == 0.0299275259348663\nmy_func(13,18.33837022289206,9.736538923168965,0.7682930755539891) == 12.672948978878956\nmy_func(2,14.12475149821524,7.334215006576462,0.3270099591256306) == 18.667388894314744\nmy_func(9,0.376802548562245,6.911037842905362,0.2805998506995861) == 23.37782873621556\nmy_func(1,12.531538342590824,9.064349608133467,0.9099586370290704) == 10.192706400622807\nmy_func(1,13.75585217492178,9.790924033396728,0.5831583283393637) == 15.524936449107724\nmy_func(13,0.0,0.0,0.0) == 0.0\nmy_func(1,9.397541830056015,2.16682762422447,0.3672239367856065) == 8.113367147339904\nmy_func(15,15.0,15.0,0.15) == 92.5748913763936\nmy_func(13,4.525979365604571,6.173343838986481,0.8370926454467476) == 7.374743849954753\nmy_func(5,12.389242884674188,8.23950244053779,0.8982968003480196) == 9.172395894810736\nmy_func(18,19.861128657666363,0.6403615738084389,0.1660770340623938) == 4.464689699219385\nmy_func(20,19.99,9.999,0.0) == 219.9699999999999\nmy_func(1,1.0026826972039005,6.149742029653055,0.1400363656481054) == 7.012012686042281\nmy_func(6,16.680853113113574,8.357425240763373,0.4666393375046028) == 17.881525122892263\nmy_func(15,7.425280899994604,7.3584742178237565,0.8289402451136573) == 8.87696581411733\nmy_func(5,0.1223985544638273,8.065080584255224,0.9209756225685976) == 8.757078774942258\nmy_func(15,4.189556576551978,7.477333869766067,0.9226959448981809) == 8.103789673196395\nmy_func(16,3.06576213657493,9.435261270064862,0.2527255645717443) == 37.00999830317274\nmy_func(15,14.56,0.0,0.0) == 14.56\nmy_func(13,19.654846713612635,5.013945389136434,0.5526174638407678) == 9.073389661022908\nmy_func(9,6.732122506303968,9.445775643115985,0.2461553330230603) == 35.88558620403816\nmy_func(12,18.13895808467497,6.3574179161634845,0.2760114650936605) == 22.931666866502344\nmy_func(8,11.3,0.5,0.3) == 2.2220091629999996\nmy_func(8,10.0,2.0,0.0) == 26.0\nmy_func(1,11.438749161437116,8.40414800736466,0.1371628568088542) == 18.273925655499177\nmy_func(0,0.0,0.0,0.0) == 0.0\nmy_func(20,19.99,9.999,0.999) == 10.00900900900901\nmy_func(18,16.548496307463875,6.6013275371461795,0.2023744482907543) == 32.34494829394842\nmy_func(10,0.0,2.0,0.0) == 20.0\nmy_func(13,18.325936518758148,9.38950083715229,0.6032105280683182) == 15.565893600813745\nmy_func(13,5.060480000579259,7.36253960168939,0.6593199594561565) == 11.166863892785386\nmy_func(16,18.19,0.0,0.05) == 8.005904102775611\nmy_func(10,0.2646091554102958,8.356784066103904,0.3984043416031588) == 20.84703279217924\nmy_func(11,19.07866801809515,8.739712211626617,0.1360654991232001) == 55.19567052367635\nmy_func(8,0.3990376309007915,0.1413522477539108,0.3859963593529731) == 0.3668643119006387\nmy_func(5,1.3,1.5,0.05) == 7.792487093749998\nmy_func(18,12.45658009926724,4.906465495021219,0.1307993766570337) == 35.50205172892098\nmy_func(14,9.456105793879903,6.425627448089544,0.8834708686547557) == 7.273162790159555\nmy_func(18,8.45715316113218,2.9724470198632993,0.651630216757839) == 4.5615549400862\nmy_func(20,4.365454871129342,5.510272422397052,0.1100440918170937) == 45.63354224200781\nmy_func(17,14.437272703035116,3.5165138037052324,0.8481913771137258) == 4.145896667414295\nmy_func(5,13.726782575762766,2.7966037482266346,0.1713012248129561) == 15.309944624045734\nmy_func(10,0.0,1.0,0.0) == 10.0\nmy_func(4,5.142016193576975,6.830485291485234,0.2386929708066709) == 20.730687288944548\nmy_func(14,16.650473113815053,4.089053170302407,0.3179181527107754) == 12.879840429430416\nmy_func(1,14.147252509420696,0.2853720213921973,0.4863706894166126) == 7.551815574455046\nmy_func(12,3.2205149971854308,3.854338982844443,0.096660914694975) == 29.05216279506968\n.\"\"\"```", "response": "```python\ndef my_func(input1: int, input2: float, input3: float, input4: float):\n    if input1 == 0:\n        return input2\n    if input1 == 20:\n        if input4 == 0.999:\n            return input2 / (input3 + input4)\n        else:\n            return input1 * input2 + input3\n    if input1 == 10:\n        if input3 == 1.0:\n            return input1 * input3\n        else:\n            return input1 + input2 * input3 + input4\n    if input1 == 18:\n        if input4 < 0.2:\n            return input1 * input2 - input3\n        else:\n            return input1 + input2 + input3 + input4\n    if input1 == 15:\n        if input3 < 0.1:\n            return input2\n        else:\n            return input2 * input4\n    if input1 == 13:\n        return input2 * input4 + input3 - input1\n    if input1 == 8:\n        return input2 * input3 + input4\n    if input1 == 5:\n        return input1 + input2 * input4 + input3\n    if input1 == 12:\n        return input1 + input2 + input3 * input4\n    if input1 == 17:\n        return input2 * input4 - input3\n    if input1 == 14:\n        return input2 - input3 * input4\n    if input1 == 16:\n        return input1 * input4 + input2\n    if input1 == 11:\n        return input1 * input2 + input3\n    if input1 == 6:\n        return input1 + input2 * input4\n    if input1 == 9:\n        return input1 * input3 + input2 * input4\n    if input1 == 1:\n        return input2 + input3 - input4\n    if input1 == 4:\n        return input1 * input3 + input2 + input4\n```\n"}
