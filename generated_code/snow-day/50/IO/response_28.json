{"submission": "```python\ndef my_func(input1:int, input2:float, input3:float, input4:float):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             an integer in [0, 20],a float in [0.0, 20.0],a float in [0.0, 10.0],a float in [0.0, 1.0]. The function should output a float that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(16,18.19,0.0,0.05) == 8.005904102775611\nmy_func(3,10.474802159297552,6.9881964249762065,0.7174936342821225) == 9.756306446869312\nmy_func(15,15.0,15.0,0.15) == 92.5748913763936\nmy_func(13,18.195443195984794,9.618934345589857,0.1452061511158781) == 59.99341268578984\nmy_func(20,19.99,9.999,0.0) == 219.9699999999999\nmy_func(17,15.984734592622392,7.015275138944403,0.5712250696364418) == 12.281107212892374\nmy_func(5,1.3,1.5,0.05) == 7.792487093749998\nmy_func(10,15.513858972776152,3.9851443226901786,0.9677170822278524) == 4.1180882262775595\nmy_func(5,11.107791120619927,8.123726019195786,0.3261210029359328) == 22.992094474974536\nmy_func(6,4.297788195650087,3.840923322701204,0.2030727243475918) == 15.169925300971784\nmy_func(1,0.5683001214075412,1.5461189418950227,0.7928832710713752) == 1.663823404090693\nmy_func(14,4.542499796353045,8.299422720825708,0.7236858731318369) == 11.468266762083337\nmy_func(4,5.178355585907544,4.720056819746748,0.8895082330518856) == 5.306347567096651\nmy_func(8,11.222238103255949,5.674954769063244,0.8559829587463444) == 6.629752892346906\nmy_func(14,0.0614788649548314,4.163942412641292,0.0204075729811126) == 51.2056546591433\nmy_func(15,14.56,0.0,0.0) == 14.56\nmy_func(9,6.906131557225392,1.1254423183414863,0.6876102734741295) == 1.6368937683392542\nmy_func(13,3.122451902284369,3.060992078697895,0.0451599064084962) == 32.32225841018943\nmy_func(8,11.3,0.5,0.3) == 2.2220091629999996\nmy_func(5,1.1472728711739255,8.887637614965453,0.8889225179238657) == 9.998064392987892\nmy_func(19,17.88471453854968,7.6618599135463725,0.0651010787122847) == 89.91447328403456\nmy_func(11,5.698170393934285,5.242442463016158,0.6745004081655535) == 7.772324997700035\nmy_func(10,0.0,1.0,0.0) == 10.0\nmy_func(6,8.227474322100644,5.594160002525527,0.5582678436130901) == 10.00724480272099\nmy_func(12,12.235463353644612,3.624427306374484,0.4493375273894193) == 8.069398666775388\nmy_func(14,6.1376716994841685,3.813235737580467,0.0445223724813783) == 43.62252229281607\nmy_func(8,10.0,2.0,0.0) == 26.0\nmy_func(10,11.75189144966623,5.478985353202255,0.0494944385473329) == 51.1396840420707\nmy_func(14,13.173420102787723,2.7203640793340176,0.3448797439246235) == 7.902039760086862\nmy_func(11,3.817171753988549,8.812177041757995,0.434777540526332) == 20.237297231421\nmy_func(20,17.919103473914078,6.306357662341361,0.5448269938083143) == 11.574973776440808\nmy_func(9,2.3971640659942173,3.79464337917924,0.4145434139852667) == 9.09919137239487\nmy_func(20,4.930502762997593,6.522842626130756,0.9436821880913084) == 6.912117986802165\nmy_func(1,3.2670802052977033,2.116481512002324,0.460939212814896) == 3.8776363392669753\nmy_func(0,0.0,0.0,0.0) == 0.0\nmy_func(3,1.8114258679556627,4.947408019269515,0.5910097039049435) == 7.922343165087566\nmy_func(8,11.873807077751817,2.9158783545275293,0.7377576384782658) == 3.952529831281489\nmy_func(13,0.0,0.0,0.0) == 0.0\nmy_func(11,2.242573869763349,1.0401702267563273,0.394098500926899) == 2.6377629167613863\nmy_func(18,6.078868725035507,4.919188847765117,0.1737309685407018) == 27.59843152405305\nmy_func(18,12.306434926585757,9.005927273876402,0.4799146629468602) == 18.7656346904594\nmy_func(19,16.20671293711454,4.570546428548238,0.9470118139009126) == 4.826282377324663\nmy_func(13,9.937276677172049,7.173330909917071,0.1612186157591274) == 40.979053861929344\nmy_func(20,11.890600894733495,7.6915108934306495,0.2826547312080401) == 27.191736894925633\nmy_func(20,19.99,9.999,0.999) == 10.00900900900901\nmy_func(17,3.307650877589692,4.683734373793515,0.3574359397052684) == 13.098386383241426\nmy_func(10,3.0245389463277084,4.765157829808002,0.8686973886174113) == 5.48540595262525\nmy_func(11,5.5831626354352455,8.94354003131175,0.1384729134954091) == 53.136069711597024\nmy_func(10,0.0,2.0,0.0) == 20.0\nmy_func(3,19.888295782460183,2.78529179697113,0.4798476092731878) == 7.786565173675527\n.\"\"\"```", "response": "```python\ndef my_func(input1: int, input2: float, input3: float, input4: float):\n    if input1 == 0 or (input2 == 0 and input3 == 0 and input4 == 0):\n        return 0.0\n    \n    part1 = input2 + input3 + input4\n    part2 = input1 * input3 if input1 > 10 else input1 * input2\n    part3 = input2 / (input4 + 1) if input4 != 0 else input2\n    \n    result = part1 + part2 * part3\n    return result\n```"}
