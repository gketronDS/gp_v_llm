{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([115 751 497 652 519 664 525 20 515 810 691]) == [810 691]\nmy_func([]) == []\nmy_func([138 493 461 376 801]) == [801]\nmy_func([877 605 168 777 12 449 933 845 217 548]) == [933 845 548]\nmy_func([391 190 192 687 142 691 401 669 876 542 740 120 183 653 199 179]) == [876 740 653 199 179]\nmy_func([300 90 920 640 217 498 347 334 21]) == [920 640 498 347 334 21]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([185 553 511 122 948 85 904]) == [948 904]\nmy_func([728 437 984 659 318 926 915]) == [984 926 915]\nmy_func([991 803 154 406 868 435 689 856 889 114 900 169 706 480 155 992]) == [992]\nmy_func([364 658 326 499 905 830 630 254 38 666]) == [905 830 666]\nmy_func([908 98 796 347 352 427 443 13 689 17 109 385 575]) == [908 796 689 575]\nmy_func([184 285 386 289 934]) == [934]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([570 975 462 892 399 622 53 683 263 733 939 801 185 152 730 755 432]) == [975 939 801 755 432]\nmy_func([967 62 204 816 726 991 819 850 712 826 447 359 114 592]) == [991 850 826 592]\nmy_func([99 446 846 987 968 83 302 66 469 252 824 39]) == [987 968 824 39]\nmy_func([202 928 812 791 695 407 486 18 246 992]) == [992]\nmy_func([188 341 809 859 393 649]) == [859 649]\nmy_func([717 934 368 658 649 595 557 970 587 908 367]) == [970 908 367]\nmy_func([562 200 909]) == [909]\nmy_func([1000 0]) == [1000 0]\nmy_func([20 137 20]) == [137 20]\nmy_func([68]) == [68]\nmy_func([917 465 326 55 566 911 444 526 162 515 317 711 1000 419 573 257 789 507]) == [1000 789 507]\nmy_func([73 687 585 899 599 177 236 237 807 983]) == [983]\nmy_func([552 58 480 685 891 696 202 452 22 875 569 305]) == [891 875 569 305]\nmy_func([75 429]) == [429]\nmy_func([864 950 627 784 207 987 256 262 542 337 47 252 70 817 44]) == [987 817 44]\nmy_func([123 696 156 426 972 539 113 69 205 349 195 352 460 704 999 565 472 510 288 960]) == [999 960]\nmy_func([364 616 258 849 381 722 944 594 365 452 986 592 598 728 703 925 724 804 181 636]) == [986 925 804 636]\nmy_func([270 353 857 434 17 346 595 542 833 804 752 755 871 924 419]) == [924 419]\nmy_func([895 755 770 911 202 548 886 651 843 349 614]) == [911 886 843 614]\nmy_func([867 935 404 314 859 414 36 818 586 848 79 288 415 678 475 342 459 852 534]) == [935 859 852 534]\nmy_func([0]) == [0]\nmy_func([46 14 605 946 826 949 687 191 938 837 824 248 857 581 458 114 733]) == [949 938 857 733]\nmy_func([403 517 491 880 392 446 519 978 495 895 325 160 77 932 135 987 411 476 168 660]) == [987 660]\nmy_func([272 78 399 169 247 453 119 577 378 806 884 717 229 5 702 10 759 47 966]) == [966]\nmy_func([0 1000]) == [1000]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([630 818 953 422 474 307 818 271 511 597 988]) == [988]\nmy_func([130 613 546 565 990 638 760 507]) == [990 760 507]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([360 304 601 358 656 966 654]) == [966 654]\nmy_func([710 472 229 183 20 358 849 510 888 430]) == [888 430]\nmy_func([451]) == [451]\nmy_func([719 177 263 15 315 399 93 675 228 366 534 230 441 254 210 733 95 286 553]) == [733 553]\nmy_func([818 654 628 800 395 695]) == [818 800 695]\nmy_func([671]) == [671]\nmy_func([27 632 960 434 744 747 961 539 270 439 65 545 611 685 607 269 978]) == [978]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    max_val = float('-inf')\n    result = []\n    for val in reversed(input1):\n        if val > max_val:\n            max_val = val\n            result.append(val)\n    result.reverse()\n    return result\n```"}
