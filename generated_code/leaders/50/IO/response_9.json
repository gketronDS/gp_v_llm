{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([842 362 250 605]) == [842 605]\nmy_func([50 122 514 479 972 505 14 539 64 612 81 284 683 723 41 172 721]) == [972 723 721]\nmy_func([160 224 746 187 255 175 5 996 992 541 44 637 192]) == [996 992 637 192]\nmy_func([151 567]) == [567]\nmy_func([301]) == [301]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([669 872 651 151 868 60]) == [872 868 60]\nmy_func([441 60 733 367 954 235 692 69 110 824 229 28 843 19 742]) == [954 843 742]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([305 637 419 790 43 190 109 523 227 909 517 483 54 167 777 35 717 102 535]) == [909 777 717 535]\nmy_func([138]) == [138]\nmy_func([80 380 812 389 894 109 799 962 654 584 44 97 310 232 433 972]) == [972]\nmy_func([921 857 699 700]) == [921 857 700]\nmy_func([696 340 859]) == [859]\nmy_func([810 219 812 599 964 783 676 465 203 699 363 648 675 69 71 79 283]) == [964 783 699 675 283]\nmy_func([1000 0]) == [1000 0]\nmy_func([450 123 129 231 436]) == [450 436]\nmy_func([835 717 461 761 670 826 876 109 778 302 943 452 9 617 119 678 373 124 726 569]) == [943 726 569]\nmy_func([6 836 772 307 493 373 440 784 452 502 694 150 940 26 833 65 822 697 508]) == [940 833 822 697 508]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([499 687 25 393 750 798 564 327 762 696 875 626 59]) == [875 626 59]\nmy_func([875 36 125 422 605 88 150 286 393 475 741 102 383 410 192 927 690 482 515]) == [927 690 515]\nmy_func([747 428 614]) == [747 614]\nmy_func([584 824 23 103 740 88 675 1 589 906 895]) == [906 895]\nmy_func([208 28 127 950 338 665 474 2 281 281 70 454 146 747 157 922 53 332]) == [950 922 332]\nmy_func([153 957 752]) == [957 752]\nmy_func([650 463 926 516]) == [926 516]\nmy_func([451]) == [451]\nmy_func([257 664 377 261 952]) == [952]\nmy_func([107 4 642 588 987 5 100 670 171 556 662 315 120 850 91 946 372 178 321 884]) == [987 946 884]\nmy_func([474 352 282 457 808 543 841 807 28 925 852 490 284 705 298 69]) == [925 852 705 298 69]\nmy_func([681 604 261 648 358 610 196 792 278 941 986 699 300 415 680 239 11 893]) == [986 893]\nmy_func([0]) == [0]\nmy_func([0 1000]) == [1000]\nmy_func([581 847]) == [847]\nmy_func([411 374 291 355 468 663 892 498 453 499 737 176 489 993 632 831 260 494]) == [993 831 494]\nmy_func([909 970 538 568 511 489 551 608]) == [970 608]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([353 396 508 932 96 165 776 237 25 203 220 925 15 515 658 655 594 948]) == [948]\nmy_func([510 672 858 847 953 243 762 676 567 758 829 915 666 359 308 888 302 425]) == [953 915 888 425]\nmy_func([715 420 725 943 296 530 389 275 582 400 615 206 756 788 93 176 783]) == [943 788 783]\nmy_func([101 50 866 883]) == [883]\nmy_func([444 811 709 942 728 725 963 144 751 312 312 676 890 31 762 186]) == [963 890 762 186]\nmy_func([711 408 41 47 663 156 306 599 36 481 251 257]) == [711 663 599 481 257]\nmy_func([20 137 20]) == [137 20]\nmy_func([122 791 720 252 912 250 189 544 200 305 233 644 113 19]) == [912 644 113 19]\nmy_func([332 986 933 205 162 605 436 42 510 327 354 494 996]) == [996]\nmy_func([791 514 631 278 148 368 894 888 60 952]) == [952]\nmy_func([794 454 962 894 464 733 727 482 531 628 691 792 164 856 1 641]) == [962 894 856 641]\nmy_func([]) == []\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    if input1:\n        max_val = input1[0]\n        for num in input1:\n            if num >= max_val:\n                result.append(num)\n                max_val = num\n    return result\n```"}
