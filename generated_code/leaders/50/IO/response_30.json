{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([823 531 119 581 74 32]) == [823 581 74 32]\nmy_func([451]) == [451]\nmy_func([752 418 947 838 675 758 135]) == [947 838 758 135]\nmy_func([315 456 856 98 990 357 316 165 835 775 40 143 626 853 829 489 163 631]) == [990 853 829 631]\nmy_func([0 1000]) == [1000]\nmy_func([367 131 90 873 414 283 464 935 67 794 831 829 744 514]) == [935 831 829 744 514]\nmy_func([260 930 432 922 813 979 727 205 657]) == [979 727 657]\nmy_func([530 778 438 10 977 968 674 742 872 586 474 286 675 272 222]) == [977 968 872 675 272 222]\nmy_func([240 426 518 892 498 277 972 648 718 599 765]) == [972 765]\nmy_func([621 751 926 584 152 46 276 316 671 961 115]) == [961 115]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([784 434 307 267 330 984 832 556 267 758 652 493 692 647 899 337 939 478 760 902]) == [984 939 902]\nmy_func([]) == []\nmy_func([855]) == [855]\nmy_func([0]) == [0]\nmy_func([242 17 290 328 517 102 37]) == [517 102 37]\nmy_func([1000 0]) == [1000 0]\nmy_func([539 854 542 86 192 969 684 550 320 565 327 742 345 650 422 70 90 237 531 348]) == [969 742 650 531 348]\nmy_func([475 81 794 548 466 361 169 330 360 632 17 667]) == [794 667]\nmy_func([687 541 891 298 116 770 676 980]) == [980]\nmy_func([676 982 689 321 835]) == [982 835]\nmy_func([770 390 835 364 872 734 43 4 947]) == [947]\nmy_func([783 182 712 937 6 959]) == [959]\nmy_func([322 830 988 632 671 533 967 997 505 269 642 142 994 0 20 537 540 45 526 820]) == [997 994 820]\nmy_func([386 504 153 915 416 550 402 952 380 169 532 922]) == [952 922]\nmy_func([379 0 115 700 339 139 770 463 174]) == [770 463 174]\nmy_func([434 291 999 548 758 49 397 598 448 789 115 294 869]) == [999 869]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([20 137 20]) == [137 20]\nmy_func([48 21 495 379 260 398]) == [495 398]\nmy_func([85 879 743]) == [879 743]\nmy_func([777 293 615 239]) == [777 615 239]\nmy_func([939 836 921 407 951 944 362 933 667 937 504 662 93 293]) == [951 944 937 662 293]\nmy_func([767 25 669 133 787 515 190 710 269 313 864 95 60 322 728 679 259 307]) == [864 728 679 307]\nmy_func([795 444 237 940 21 880 797 348 816 840 831 430 494 283 988]) == [988]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([796 3 316 273 599 106 536 356 535 579 775 456 813 65 391 391 990]) == [990]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([913 236 325 211 722 169 640 310 348 554 359 948 942 1 423]) == [948 942 423]\nmy_func([601 100 851 543 14 598 52 154 230 568]) == [851 598 568]\nmy_func([412 102 685 129 648 797 850 286 915 377]) == [915 377]\nmy_func([366 833 824 306 262 949 642 598 995 23]) == [995 23]\nmy_func([412 342 949 419 909 978 253 5 579 394 807 731 581 324 149 682]) == [978 807 731 682]\nmy_func([257 450 549 712 182 649 517 550 277 329 246 366 172 401]) == [712 649 550 401]\nmy_func([223 520 780 857 909]) == [909]\nmy_func([606 172 400 912 39 439 506]) == [912 506]\nmy_func([56 898 877 709 340 75 130]) == [898 877 709 340 130]\nmy_func([486 576 248 539 270 325 316 498]) == [576 539 498]\nmy_func([302 421 501 556 432 440 737 692 711 826 51 166 741 34 967 624 1000 573 238 318]) == [1000 573 318]\nmy_func([472 351 523 0 630 810 843 499 738 806 416 542 662 652 778]) == [843 806 778]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    max_value = -1\n    for num in input1:\n        if num > max_value:\n            result.append(num)\n            max_value = num\n    return result\n```"}
