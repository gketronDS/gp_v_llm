{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([0 1000]) == [1000]\nmy_func([226 335 870 890 21]) == [890 21]\nmy_func([]) == []\nmy_func([47 87 43 44]) == [87 44]\nmy_func([851 524 587 120 381 732 441]) == [851 732 441]\nmy_func([231 124 979 230 210 894 94 522 189]) == [979 894 522 189]\nmy_func([943 348 121 932 541 798 700]) == [943 932 798 700]\nmy_func([534 341 711 352 222 961 101 378 620 306 236 884 186 325 995 772 551]) == [995 772 551]\nmy_func([903 607 962 784 570 8 413 484 364 962 498 507 960]) == [962 962 960]\nmy_func([944 344 683 758 417 107 438 258 664 964 778 768 797 19 927 128]) == [964 927 128]\nmy_func([147 749 341 882 776 99 755 275 695 868 328 539 168 764 106]) == [882 868 764 106]\nmy_func([785 223 854 113 318 883 159 59 939 307 430 900 326 702 662 632]) == [939 900 702 662 632]\nmy_func([624 539 174 907 822 314]) == [907 822 314]\nmy_func([752 819]) == [819]\nmy_func([93 864 70 900 655 964 949 879 805 977 443 800]) == [977 800]\nmy_func([367 167 720 849 88 775 488 266 714 342 51 273 235 37 524]) == [849 775 714 524]\nmy_func([122]) == [122]\nmy_func([56 211 80 842 277 597 294 110 6 600 68 818 933]) == [933]\nmy_func([72 148 715]) == [715]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([90 806 109 251 143 66 644 825]) == [825]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([127 603]) == [603]\nmy_func([514 161 199 687 776 394 116 970 980 451 562 370 638]) == [980 638]\nmy_func([868 418 328 734 926 712]) == [926 712]\nmy_func([799 722 979 247 874 113 355 938 894 131 387 777 559 18 292 620 902]) == [979 938 902]\nmy_func([451]) == [451]\nmy_func([141 804 111 451 981 97 826 458 589 88 370 669 84 712 528 586 559 745 160 266]) == [981 826 745 266]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([923 44]) == [923 44]\nmy_func([934 545 224 124 361 722 414 884 548 513 55 124 998]) == [998]\nmy_func([823 450 152]) == [823 450 152]\nmy_func([430 631 822 347 981 99 552 874 659 43 427 155 465 174 326 126 659]) == [981 874 659 659]\nmy_func([755 137 331 61 626 598 225 151 618 334 694 516 531 239 223]) == [755 694 531 239 223]\nmy_func([537 242 318 321 704 415]) == [704 415]\nmy_func([471 839 908 990 591 55 14 723 414 316 985]) == [990 985]\nmy_func([444 48 209 473 471 547 508 822 722 409 885 678]) == [885 678]\nmy_func([224 365 83 224 921 364 78 637 558 168 644 475 375 144 904 827]) == [921 904 827]\nmy_func([20 137 20]) == [137 20]\nmy_func([665 736 353 819 225 896 138 798 906 498 736 515 52 618]) == [906 736 618]\nmy_func([976 316 964 669 235 893 809 870 409 178 270 173 737 912 552 450 64 871]) == [976 964 912 871]\nmy_func([1000 0]) == [1000 0]\nmy_func([300 77 497 148 296 11 311 799 129 682 19 694 958 877 128]) == [958 877 128]\nmy_func([0]) == [0]\nmy_func([227 178 40 641 835 418 583 461 508 28 410 603 820 333 508 487 627 563 155 740]) == [835 820 740]\nmy_func([198 955 215 452]) == [955 452]\nmy_func([435 727 264 156 315 482 378 939 645 77 944 391]) == [944 391]\nmy_func([550 105 552 190 463 181 295 203 398 715 146 725 799 819 606 803 270 736 81 866]) == [866]\nmy_func([66 535]) == [535]\nmy_func([611 274 192 221 38 210 498 60 330]) == [611 498 330]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = max(input1)\n    max_index = input1.index(max_val)\n    return input1[max_index:]\n```"}
