{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([47 87 43 44]) == [87 44]\nmy_func([910 370 622 226 387 295 705 706 114 352 130 375 827 854 954 127 788 955]) == [955]\nmy_func([511 250 426 925 46 516 70 348]) == [925 516 348]\nmy_func([0 1000]) == [1000]\nmy_func([518 723 301 403 58 469 304 832 285 362 58 332 837 840 311 506]) == [840 506]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([921 385]) == [921 385]\nmy_func([226 916 904 684 519 857 375 413 94 159 946 944 484 578]) == [946 944 578]\nmy_func([836 257 706 39 895 365 664 801 875 112 760 145 870 790 971 176 994]) == [994]\nmy_func([65 995 954 353 356 191 258 587 469]) == [995 954 587 469]\nmy_func([36 658 767 160 841 286 376 210 824 356 48 453 92 239 612 728 26 985]) == [985]\nmy_func([560 371 117 996 852 138 556 200 318]) == [996 852 556 318]\nmy_func([22 536 237 766 628 690 684 194 723 94 668 176 756 122 727 407 38]) == [766 756 727 407 38]\nmy_func([582 366 387 641 149 79 730 702]) == [730 702]\nmy_func([0]) == [0]\nmy_func([675 607 534 473 210 933 213 304 98]) == [933 304 98]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([157 986 410 299 499 769 368 577 902 530 730]) == [986 902 730]\nmy_func([307 864 541 229 503 626 614 172 693 608 970 646 345 933 554 896 941]) == [970 941]\nmy_func([125 677 602 679 232]) == [679 232]\nmy_func([196 438 462 148 398 503]) == [503]\nmy_func([852 540 716 173]) == [852 716 173]\nmy_func([582 209 306 103 66 31 654 434 685 398 506 969 255 989 348 675]) == [989 675]\nmy_func([468 748 369 377 619 360 843]) == [843]\nmy_func([486 402 329 265 562 132 45]) == [562 132 45]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([416]) == [416]\nmy_func([35 153]) == [153]\nmy_func([657 704 745 74 995 317 100 679 868 216 48 777 443 700]) == [995 868 777 700]\nmy_func([226 189 189 830]) == [830]\nmy_func([896 958 235 935 796 499]) == [958 935 796 499]\nmy_func([]) == []\nmy_func([600 977]) == [977]\nmy_func([1000 0]) == [1000 0]\nmy_func([827]) == [827]\nmy_func([749 701 250 448 584 94 911]) == [911]\nmy_func([965 379 883 953 132 37]) == [965 953 132 37]\nmy_func([20 137 20]) == [137 20]\nmy_func([535 751 109 172 336 433 114 962 13]) == [962 13]\nmy_func([652 298 262 712 628 199 818 880 828 945 449 709 366 832]) == [945 832]\nmy_func([44 670 378 594 794 737 808 677 699 686 35 205 324 138 277 529 124 740 462 714]) == [808 740 714]\nmy_func([689 966 763 238 366 899 837 751]) == [966 899 837 751]\nmy_func([170 41 92 992 147 387 249 275]) == [992 387 275]\nmy_func([158 519 240 18 607 239 423 82 33 273 669 760 79 694 277 197]) == [760 694 277 197]\nmy_func([820 633 328 728]) == [820 728]\nmy_func([177 300 206 249 165 812 870 860 154 729 256 63 382]) == [870 860 729 382]\nmy_func([758 939 652 593 355 342 968 198 152 758 764 851 576 849 203 716]) == [968 851 849 716]\nmy_func([76 595 878 624 532 190 330 506 380 970 895 266 26 383 387 908 705 418 833]) == [970 908 833]\nmy_func([451]) == [451]\nmy_func([137 929 6 710 212 874 641 13 248 479]) == [929 874 641 479]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = max(input1)\n    max_indices = [i for i, x in enumerate(input1) if x == max_val]\n    result = input1[max_indices[-1]:]\n    return result\n```"}
