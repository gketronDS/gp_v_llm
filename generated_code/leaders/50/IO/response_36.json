{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([907 87 413 729 867 789 287 761 750 831 155 96 390]) == [907 867 831 390]\nmy_func([130 252 971 857 67 116 690 144 262 490 909 300 296]) == [971 909 300 296]\nmy_func([184 286 987 864 345 618 298]) == [987 864 618 298]\nmy_func([620 642 726 388 181]) == [726 388 181]\nmy_func([193 184 790 943 761]) == [943 761]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([321 38 475 690 872 291 216 467]) == [872 467]\nmy_func([883 338 975 130 789]) == [975 789]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([619 210 470 162 368 720 771 624 636 561 797 389 146 295 440 936]) == [936]\nmy_func([647 328 531 323 120 830 579 495 748 994 625 166 534]) == [994 625 534]\nmy_func([412 706 161 301 734]) == [734]\nmy_func([75 968 970 204 987 930 607 769 171]) == [987 930 769 171]\nmy_func([910 955 311 134 207 979 673 563 912 232 19 607 672 62 760 485 474 795 611]) == [979 912 795 611]\nmy_func([0]) == [0]\nmy_func([418 4 588 408 812 278 101 218 436 245 844 743 385 610 381 876 889 79 340 771]) == [889 771]\nmy_func([959 356 73 252 329 324 877 638 368 418 896 265 443 538 66 880]) == [959 896 880]\nmy_func([426 695 70 312 682 569 866 528 866 908 338 356 400 561 534 346 937 516 672 143]) == [937 672 143]\nmy_func([343 656 728 393 660 127 911 284 943 66]) == [943 66]\nmy_func([0 1000]) == [1000]\nmy_func([471 877 298 505 321 877 79 423 581 999 749 86 768 78]) == [999 768 78]\nmy_func([1000 0]) == [1000 0]\nmy_func([459]) == [459]\nmy_func([353 351 144 569 142 481 817 14 524 483 148 325 970 299 959 416 854 995 890]) == [995 890]\nmy_func([592]) == [592]\nmy_func([92 135 592 35 951 959]) == [959]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([835 433 915 486 596 524 57 739 768 248 754 344 28]) == [915 768 754 344 28]\nmy_func([224]) == [224]\nmy_func([606 1000 625 890 224 776 917 324]) == [1000 917 324]\nmy_func([212 334 991 571 138 249 250 190 272 819 552 897 773]) == [991 897 773]\nmy_func([334 429 152 786 453 743 409 346 860 367 815 618]) == [860 815 618]\nmy_func([137 893 26 960 805 509 289 950 498 647 285 407 58 893]) == [960 950 893]\nmy_func([]) == []\nmy_func([233 275 729 465]) == [729 465]\nmy_func([690 831 633 246 300 96 319 430 535 784 227]) == [831 784 227]\nmy_func([455 714 590 902 767 248 106 157 755 343 925 445 187 426 863]) == [925 863]\nmy_func([639 363 602 174 675 355 150 755 1 655]) == [755 655]\nmy_func([147 929 890 682 778]) == [929 890 778]\nmy_func([836 381 994 476 352 669 182 938]) == [994 938]\nmy_func([365 172 879 728 627 237 718 874 571 782 0 952 452 372 85 341]) == [952 452 372 341]\nmy_func([752 160 910 280 908 931 687 371 712]) == [931 712]\nmy_func([814 473 83 407 979 165 269]) == [979 269]\nmy_func([20 137 20]) == [137 20]\nmy_func([561 745 628 691 391 813 951 661 204 211]) == [951 661 211]\nmy_func([724 506 96 598 183 950 593 580 638 985 55 829 277]) == [985 829 277]\nmy_func([770 593 18 378 926 627 846 57 131 940 435]) == [940 435]\nmy_func([451]) == [451]\nmy_func([862 997 526 580 952 151 935 854 894 814 210 538 842 847 635]) == [997 952 935 894 847 635]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    if not input1:\n        return result\n    \n    max_num = input1[0]\n    result.append(max_num)\n\n    for num in input1[1:]:\n        if num > max_num:\n            max_num = num\n            result = [num]\n        elif num < result[-1]:\n            result.append(num)\n    \n    return result\n```"}
