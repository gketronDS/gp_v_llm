{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([372 930 230 574 126 572 903 796 805]) == [930 903 805]\nmy_func([24 975 938 769 26 610 163 427 618 795 93 37 689 905]) == [975 938 905]\nmy_func([726 896]) == [896]\nmy_func([177 676 283 190 107 252 382 917 355 255 854 155]) == [917 854 155]\nmy_func([3 541 88 992 177]) == [992 177]\nmy_func([983]) == [983]\nmy_func([972 282 795 54 909 375 325 979 201]) == [979 201]\nmy_func([940 855 648 438 415 249 739 188 703 324 664 603 380 38 490 976 713 236 399 867]) == [976 867]\nmy_func([897 868 398 669 907 996 895 32 520]) == [996 895 520]\nmy_func([545 226 375 706 30 380 649 859 706 334 605 60 891]) == [891]\nmy_func([256]) == [256]\nmy_func([727 990 960 300 379 566 718 335 743 84 125 600 837]) == [990 960 837]\nmy_func([0 1000]) == [1000]\nmy_func([276 100 989 990 891 986 926 311 352 516 116 996 36 570 685 285]) == [996 685 285]\nmy_func([943 676 737 355 658 57 242 150]) == [943 737 658 242 150]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([955 80 86 955 501 496 998 188 281 775 235 493 543]) == [998 775 543]\nmy_func([647 992 923 80 425 93 188 724 531 673 875 739 375 322 649 924 632]) == [992 924 632]\nmy_func([915 357 287 883 703 998 798 732 284 405 658 228 263 173 917 832 771 482]) == [998 917 832 771 482]\nmy_func([0]) == [0]\nmy_func([736 986]) == [986]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([12 13]) == [13]\nmy_func([307 514 630 658 195 432 349 72 291 291 205 572]) == [658 572]\nmy_func([578 477 343 98 712 80 98 446 144 929 918 691 33 66 136]) == [929 918 691 136]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([682 736 192 271 322 484 949]) == [949]\nmy_func([20 137 20]) == [137 20]\nmy_func([969 182]) == [969 182]\nmy_func([958 759 856 375 981 444 854 872 170 367 352 725 636 721 325]) == [981 872 725 721 325]\nmy_func([250 943 155 757 601 448 262 712 973 935 885]) == [973 935 885]\nmy_func([299 956 681 333 321 528 26 814 720 576 621 716]) == [956 814 720 716]\nmy_func([642 209 587 7 258 809 819 40 963 603 878 410 759 7 466 396 547 273 384]) == [963 878 759 547 384]\nmy_func([451]) == [451]\nmy_func([136 166 953 448 362 382 723 439 930 340]) == [953 930 340]\nmy_func([186 401 278 573 505 582 609 162 734 903 857]) == [903 857]\nmy_func([]) == []\nmy_func([653 618 966 224 427 49 191 936 231 410 207 987 987 433 403 266 413 447 505]) == [987 987 505]\nmy_func([970 411 273 676 545 712 259 642 983 68 839 375 629 524 140 304 223 155]) == [983 839 629 524 304 223 155]\nmy_func([1000 0]) == [1000 0]\nmy_func([989 48 499 64 472 118 313 227 211 159 187 305 27 482 795 301 572 738]) == [989 795 738]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([354 452 407 516 713 461 921 212]) == [921 212]\nmy_func([979 960 936 677 97 328 694 511 769 378 333]) == [979 960 936 769 378 333]\nmy_func([182 88 874 407 714 300 75 538 78 807 105 207 73 778]) == [874 807 778]\nmy_func([2 689 466 544 737 283 468 798 37 131 496 777 613 149 186 452 640]) == [798 777 640]\nmy_func([133 905 675 85 456 106 420 771 596 190 580 348 504 674 176 977 47 290]) == [977 290]\nmy_func([964 793 433]) == [964 793 433]\nmy_func([249 121 243 97 342 550 792 113 696 476 448]) == [792 696 476 448]\nmy_func([712 235 299 665 695 765 314 630 792 17 666 266 360 238 988 950]) == [988 950]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    if not input1:\n        return result\n    max_val = input1[0]\n    for num in input1:\n        if num >= max_val:\n            result.append(num)\n            max_val = num\n    return result\n```"}
