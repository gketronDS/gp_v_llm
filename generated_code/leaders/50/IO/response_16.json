{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([627 415 33 814 635 245]) == [814 635 245]\nmy_func([866 335 994]) == [994]\nmy_func([529 32]) == [529 32]\nmy_func([405 963 441 185 930 5 48 675 277 453 264 624 960 721 126 184 173 308]) == [963 960 721 308]\nmy_func([207 471 657 391 220 255 363 521 897 637 427 641 154 158 216 589]) == [897 641 589]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([641 875 158 786 303 116 154 158 440 218]) == [875 786 440 218]\nmy_func([902 989 996 230 122 880 920 590 119 56]) == [996 920 590 119 56]\nmy_func([158 861 253 277 797 549 948 537 846 379 833 911 854 554 175 555 436 577 513]) == [948 911 854 577 513]\nmy_func([491 634 684 937 830 986 751]) == [986 751]\nmy_func([931 200 389 64 963 820 674 371 39 359 303 264 822]) == [963 822]\nmy_func([823 879 700 678 1000]) == [1000]\nmy_func([602 589 618 821 758]) == [821 758]\nmy_func([451]) == [451]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([169 999 623 968 139 898 46 580 825 100 605 598 25 503 439 815 410 95 274]) == [999 968 898 825 815 410 274]\nmy_func([621 902 962 158 250 672 371 235 913 407 181 550 422]) == [962 913 550 422]\nmy_func([849 456 187 51 907 985 721]) == [985 721]\nmy_func([329 308 873 113]) == [873 113]\nmy_func([158 355]) == [355]\nmy_func([]) == []\nmy_func([118 881 901 957 723 716 948 900 73 8 457 651 78 440 948 607 225 569 116]) == [957 948 948 607 569 116]\nmy_func([943]) == [943]\nmy_func([348 754 415 592 721 672 108 455]) == [754 721 672 455]\nmy_func([282 24 183 56 835 924 428 766 880 844 761 810 257 276 698 700 294 678]) == [924 880 844 810 700 678]\nmy_func([542 556 793 200 390 314 696 957 379 49 248 532 714 412 601 385 14 700 805]) == [957 805]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([559 373 911 71 350 485 630 227 164 396 830]) == [911 830]\nmy_func([911]) == [911]\nmy_func([0]) == [0]\nmy_func([145 828 988 71 809 638 521 848 799 133 5 94 12 908 937 845]) == [988 937 845]\nmy_func([219 855 930 296 875 872 66]) == [930 875 872 66]\nmy_func([278 634 9 344 824]) == [824]\nmy_func([20 137 20]) == [137 20]\nmy_func([891 737 534 497 842 754 895 452 86 951 917 849]) == [951 917 849]\nmy_func([32 949 23 757 470 210 842 123 669 782 821 243 170]) == [949 842 821 243 170]\nmy_func([338 383 522]) == [522]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([678 322 165 54 940 252 341 909 96 870 457 542 416 164 868 54 597]) == [940 909 870 868 597]\nmy_func([688 348 788 986 682 322]) == [986 682 322]\nmy_func([1000 0]) == [1000 0]\nmy_func([734 831 995 182 834 372 336 249]) == [995 834 372 336 249]\nmy_func([923 475 153 498 625 313 528 147 821 985 715 316 631]) == [985 715 631]\nmy_func([0 1000]) == [1000]\nmy_func([281 375 410 544 781 192]) == [781 192]\nmy_func([953 622 11 431 704 592 788 418 91 500 715]) == [953 788 715]\nmy_func([802 863 697 143 17 516 816 848]) == [863 848]\nmy_func([620]) == [620]\nmy_func([87 247 389 919 735]) == [919 735]\nmy_func([210 281 635 61 148 613 403 672 719 502 51 455]) == [719 502 455]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    \n    max_val = max(input1)\n    result = []\n    add = False\n    \n    for val in input1:\n        if val == max_val:\n            add = True\n        if add:\n            result.append(val)\n    \n    return result\n```"}
