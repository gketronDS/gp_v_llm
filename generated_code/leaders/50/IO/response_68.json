{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([67 595 976]) == [976]\nmy_func([402 642 654 180 195 703 661 792 787 8 318 66 487 818 803 961 488 212]) == [961 488 212]\nmy_func([194 76 376 574 713 761 717 840 933 813 198 236 62 181 500 252 337 102 109]) == [933 813 500 337 109]\nmy_func([14 470 636 801 907 833 746 70 962 96 664 82 893 119 671 278 171 15 435 869]) == [962 893 869]\nmy_func([0 1000]) == [1000]\nmy_func([451]) == [451]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([]) == []\nmy_func([671 29 94 792]) == [792]\nmy_func([821 564 688 588 856 293 784 62 21]) == [856 784 62 21]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([179 700]) == [700]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([162 202 671]) == [671]\nmy_func([891 616 17 678 591 502]) == [891 678 591 502]\nmy_func([471 690 623 92]) == [690 623 92]\nmy_func([236 667]) == [667]\nmy_func([529 531 162 688 679 20 135 757 146]) == [757 146]\nmy_func([842 91 132 255 10 758]) == [842 758]\nmy_func([430 126 513 382]) == [513 382]\nmy_func([494 223 937 70]) == [937 70]\nmy_func([705 83 674 427 769 522]) == [769 522]\nmy_func([0]) == [0]\nmy_func([284 406 154 813 593 446 696 632 253 633 90 693 970 594 960 143 645 738]) == [970 960 738]\nmy_func([753 811 969 926 685 259 220 265 295 923 31]) == [969 926 923 31]\nmy_func([669 945 504 587 259 478 556 33 989 674 509 718 419 447 488 575 71 200 681]) == [989 718 681]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([237 357 287 285 681]) == [681]\nmy_func([925 747 702 464 619 699 757 111 858 38 489 490 666 982 204 898 311 527 650 737]) == [982 898 737]\nmy_func([1000 0]) == [1000 0]\nmy_func([578 295 935]) == [935]\nmy_func([331 842 565 173 878 955 797 499 989 753 728 309]) == [989 753 728 309]\nmy_func([937 996 380 38 692 855 812 615 769]) == [996 855 812 769]\nmy_func([415 23 999 346 324 406 321 786 410 170 465 447 620 275 331 157 965]) == [999 965]\nmy_func([19 381 350 942 280 636 45 629 223 809 228 691 12]) == [942 809 691 12]\nmy_func([739 127 409 95]) == [739 409 95]\nmy_func([858]) == [858]\nmy_func([557]) == [557]\nmy_func([101 358 72 420 143 4 115 621]) == [621]\nmy_func([813 797 895 593 599 693 594 880 772 637 498 709 978 671 217 275 164 188 89]) == [978 671 275 188 89]\nmy_func([950 372 975 595 467 283 511 138 16 909 648 92 567 605 88]) == [975 909 648 605 88]\nmy_func([548 905 847 329 607 832 522 579 967 14 364 566 794 149 773 985 40 728 940]) == [985 940]\nmy_func([790 77 24 967 57 968 835 458 147 956 91 452]) == [968 956 452]\nmy_func([328 706 5 957 431 394 7 490 390 895 370 289]) == [957 895 370 289]\nmy_func([20 137 20]) == [137 20]\nmy_func([668 370 288 118 641 332 724 238 707 849 379 461 418 56 473 663 542 915]) == [915]\nmy_func([360 580 378 137 6 58]) == [580 378 137 58]\nmy_func([102 847 565 406 753 234 345 823 729 59 878 226 632 271 855 965]) == [965]\nmy_func([764 650 205 565 647 565 760 828 950 783 719 743 767 193]) == [950 783 767 193]\nmy_func([488 155 471 523 885 222 84 981 329 416 359 766 611 73 783 22 460 969]) == [981 969]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = max(input1)\n    result = []\n    for num in input1:\n        if num >= max_val:\n            result.append(num)\n            max_val = num\n    return result\n```"}
