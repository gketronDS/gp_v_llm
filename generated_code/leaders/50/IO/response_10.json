{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([416 619 189 581 885 170 641 801 316 64 821 795 152 980 855 773 819 579 67 925]) == [980 925]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([610 982 11 200 734 991 471 44 939 257 463 952 622 581 186 30 74 21 697]) == [991 952 697]\nmy_func([932 224 754 313 32 144]) == [932 754 313 144]\nmy_func([1000 0]) == [1000 0]\nmy_func([69 610 280 902 537 288 949 91 93 77]) == [949 93 77]\nmy_func([378 59 302]) == [378 302]\nmy_func([0]) == [0]\nmy_func([156 10 987 949 421 831 394 944 215]) == [987 949 944 215]\nmy_func([]) == []\nmy_func([504 632 603 682 154 813 85]) == [813 85]\nmy_func([151]) == [151]\nmy_func([49 966 1 839 414 210 996 357 882 73 707 517 307 641]) == [996 882 707 641]\nmy_func([861 56 305 182 516 7 698 153 248 881 179 706]) == [881 706]\nmy_func([517 744 93]) == [744 93]\nmy_func([372 790 243 239]) == [790 243 239]\nmy_func([3 175 675 568 98 458 173 350 464 640 168 289 151 492 320]) == [675 640 492 320]\nmy_func([353 240 805 925 189 493 976 317 921 327 134 129 231 734 593 244 201]) == [976 921 734 593 244 201]\nmy_func([941 181 309 897 429 699]) == [941 897 699]\nmy_func([883 411 199 126 162 332 619 511 644 894 187]) == [894 187]\nmy_func([593 808]) == [808]\nmy_func([45 384 355 266 583 900 313 778 584 17 979 718 347]) == [979 718 347]\nmy_func([439 606 60 646 386 474 683 258 836 327 433 933 881]) == [933 881]\nmy_func([951 389 60]) == [951 389 60]\nmy_func([808 773 15 915]) == [915]\nmy_func([727 168 107 324 62 812 63 267]) == [812 267]\nmy_func([0 1000]) == [1000]\nmy_func([698 674 688 868 761 797]) == [868 797]\nmy_func([724 986 513 130 0 343 386 324 450 308 956 187 874 76]) == [986 956 874 76]\nmy_func([268 629 14 656 260 555 119 313]) == [656 555 313]\nmy_func([107 393 306 972 137 783 693 135 657 410 901 643 39 190]) == [972 901 643 190]\nmy_func([357]) == [357]\nmy_func([191 344]) == [344]\nmy_func([394 308 248 9 595]) == [595]\nmy_func([312 19 421]) == [421]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([20 137 20]) == [137 20]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([139]) == [139]\nmy_func([158 347 471 693 937 624 67]) == [937 624 67]\nmy_func([334 617 434 440 84]) == [617 440 84]\nmy_func([674 775 237 905 123 163 510 575 918 414 63 964 11 26 323 220 612 919 505 517]) == [964 919 517]\nmy_func([292 843 354 445 812 666 521 850 920 142 207 446 588 110 358 624 186]) == [920 624 186]\nmy_func([451]) == [451]\nmy_func([513 510 119 834 948 213 207 401 224 578 722 676]) == [948 722 676]\nmy_func([338 950 758 449 933 985 571 441 1000 600 64 886 989 967 324 965 393 931 479 903]) == [1000 989 967 965 931 903]\nmy_func([315 221 469 626 41 879 245 337 299 278 793 462]) == [879 793 462]\nmy_func([9 553 163]) == [553 163]\nmy_func([63 911 687 762 806 825 842 82 390 293 517 2 194 572 798 523 618 765 477 605]) == [911 842 798 765 605]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    max_val = -1\n    for num in reversed(input1):\n        if num > max_val:\n            result.append(num)\n            max_val = num\n    return result[::-1]\n```"}
