{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([405 584 490 481 939 875 594 214 937 266 135 484]) == [939 937 484]\nmy_func([687 598 761 366 493 217 24 826]) == [826]\nmy_func([]) == []\nmy_func([235 273 13 963 688 24]) == [963 688 24]\nmy_func([697 628 862 982 717]) == [982 717]\nmy_func([940 993 952 410 139]) == [993 952 410 139]\nmy_func([20 137 20]) == [137 20]\nmy_func([0 1000]) == [1000]\nmy_func([633 52]) == [633 52]\nmy_func([947 43 119 862 1000 132 493 257 165 823 790 877 898 541 748 940 301]) == [1000 940 301]\nmy_func([860]) == [860]\nmy_func([202 704 935 176 601 33 722 770 94 451 916 822 853 574 795 714 517 263]) == [935 916 853 795 714 517 263]\nmy_func([230 957 664 342 205 799 946 850 739 345 123 273 306 324 515 792 728 408 303 639]) == [957 946 850 792 728 639]\nmy_func([857 462 259]) == [857 462 259]\nmy_func([719 161 748 408 212 995 911 658 232]) == [995 911 658 232]\nmy_func([285 531 783 95 214 567 151 751 51 518 61 318 989 637]) == [989 637]\nmy_func([154 39 635 118 835 538]) == [835 538]\nmy_func([681 185 694 892]) == [892]\nmy_func([617 742 500]) == [742 500]\nmy_func([591 851 174 448]) == [851 448]\nmy_func([47 13 406 825 561 93 2 153 767 322 74 155 799 430 705 198 733 17 396]) == [825 799 733 396]\nmy_func([547 464 980 253 387 596 99 512 171 910 749 824 536 807 460 522 494]) == [980 910 824 807 522 494]\nmy_func([400 597 70 615 838 97 49 160 600 388 522 189 213 766]) == [838 766]\nmy_func([105 19 952 464 349 424 421]) == [952 464 424 421]\nmy_func([204 768 219 753 918 824 332 267]) == [918 824 332 267]\nmy_func([705 524 801 94 272 257 241 770 30 135 157 506 868 580 147 809]) == [868 809]\nmy_func([123 710 206 161 413 913 894 779 79 13 748]) == [913 894 779 748]\nmy_func([491 510 201 391 603 347 27 329 433 244 154 319 922 381 713 384]) == [922 713 384]\nmy_func([0 437 832 464 234 609 901 7]) == [901 7]\nmy_func([109 806 504 898 393 211 235 772 316 716 126 882 6 808 233 146 74]) == [898 882 808 233 146 74]\nmy_func([399 256 196 434 935]) == [935]\nmy_func([15 558 221 157 456 145 542 86]) == [558 542 86]\nmy_func([172 429 655]) == [655]\nmy_func([27 416 52 698 420 419 997 183 457 909]) == [997 909]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([130 890 326 942 799 640 599 288 482 231 936 81 267 74 94 161 680 809]) == [942 936 809]\nmy_func([401 463 737 930 791 198 500 276 103 937 40 357 603 3 752 519 828]) == [937 828]\nmy_func([1000 0]) == [1000 0]\nmy_func([451]) == [451]\nmy_func([997 549 317 766 658 353 892 626 819 299 946 206 140 211 835 736 47 400 498]) == [997 946 835 736 498]\nmy_func([614 843 347 320 692 120 296]) == [843 692 296]\nmy_func([0]) == [0]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([695 325 271 484 271 817 489 776 15 779 205 438]) == [817 779 438]\nmy_func([866 564 249 960 443 171 39 805 210 90 353 735 996 509 495]) == [996 509 495]\nmy_func([955 871 990 498 751 676 879 788]) == [990 879 788]\nmy_func([909 11]) == [909 11]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([860 843 568 355 547 57 577 580 604 741 991 162 673 349 236]) == [991 673 349 236]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = max(input1)\n    return [x for x in input1 if x >= max_val / 2]\n```"}
