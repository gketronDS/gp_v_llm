{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([58 111 657 508 123 746 100 276 192 66]) == [746 276 192 66]\nmy_func([]) == []\nmy_func([252 672 581 49 118]) == [672 581 118]\nmy_func([492 43 284 264 562 809 404 304 906 92 716 630 525 407 171 299 254 233]) == [906 716 630 525 407 299 254 233]\nmy_func([1000 0]) == [1000 0]\nmy_func([967 41 87]) == [967 87]\nmy_func([368 363 306 949 98 161 804 676 402]) == [949 804 676 402]\nmy_func([626 20 672 150 268 25 878 898 201 744 762 286 7 998 564 901]) == [998 901]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([0 1000]) == [1000]\nmy_func([854 218 79 495 316 272 992 946]) == [992 946]\nmy_func([808 497 733 561 55 429 194 876 576 369 420 362]) == [876 576 420 362]\nmy_func([289 303 387 849 497 36]) == [849 497 36]\nmy_func([75 150 960 983 446 350 197 110 564 217 820 655 329 592 881 673 955 151 471 557]) == [983 955 557]\nmy_func([113 622 772 401 869 411 630 500 229 373 528 250 43 5 748 902 16 374 838]) == [902 838]\nmy_func([284 446 977 111 558 888 967]) == [977 967]\nmy_func([663 385 738 118 354 468 296 960]) == [960]\nmy_func([20 137 20]) == [137 20]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([929 617 808 906 366 695 690 309 635 633 578 713 198 466 982 615 305]) == [982 615 305]\nmy_func([0]) == [0]\nmy_func([968 416 354 738 786 377 921 166 859 768 703 5 15 934 679]) == [968 934 679]\nmy_func([322 706 268 154 496 886 600 217 718 403 985 857 664 704 697 626 146 445 919 150]) == [985 919 150]\nmy_func([954 187 906 326 395 571 149 282 378]) == [954 906 571 378]\nmy_func([81 489 545 507 975 491 205 974 820 916 851 278 117 160 201]) == [975 974 916 851 278 201]\nmy_func([504 833 895 149]) == [895 149]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([846 338 115 64 908 621]) == [908 621]\nmy_func([793 246 40 552 926 573 145 160 22 902]) == [926 902]\nmy_func([749 579 985 487]) == [985 487]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([618]) == [618]\nmy_func([934 228 621 737 689 341 319 171 605 988 76]) == [988 76]\nmy_func([451]) == [451]\nmy_func([271 508 65 976 512 298 322 965 970 443 897 227 99 785]) == [976 970 897 785]\nmy_func([110 869 110 232 83 267 62 403 699 747]) == [869 747]\nmy_func([887 981 887 874 859 462 638 207 89 105 129 9 483 887 619 892 963]) == [981 963]\nmy_func([312 423 395 334 940]) == [940]\nmy_func([580 762 204 4 761 617 381 195 41 496 297 467 699 93 585 814 671 264]) == [814 671 264]\nmy_func([521]) == [521]\nmy_func([918 882 383 940 11 497 432 86 263 204 852 348 768 540 640 162 883 555 319]) == [940 883 555 319]\nmy_func([377 607 359 88 888 7 955 640 421 410 587 448 81 959 719 434]) == [959 719 434]\nmy_func([587 457 669 480 482]) == [669 482]\nmy_func([208 182 279 207 534 628 113 866 513 143 714 720 157 189 195]) == [866 720 195]\nmy_func([578 775 830 525 48 225 907 557]) == [907 557]\nmy_func([983 335 332 463 362 567 237 733 270 318 3 391 332 290 437 642 760 925]) == [983 925]\nmy_func([457 350 170 571 840 509]) == [840 509]\nmy_func([948 535 918 288 186 712]) == [948 918 712]\nmy_func([241 588 13 951]) == [951]\nmy_func([723 47 628 638 921 254 589 162 733 372 23 364 167 192 841]) == [921 841]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return input1\n    max_val = max(input1)\n    return [x for x in input1 if x >= max_val]\n```"}
