{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([726 364 343 903 750 98]) == [903 750 98]\nmy_func([91 869 886 734 306 468 913 829 781 655]) == [913 829 781 655]\nmy_func([507 590 383 800 636 817 160 940 373 454 722 547 895 345 977]) == [977]\nmy_func([979 599 517 27 503 15 851 209]) == [979 851 209]\nmy_func([1000 0]) == [1000 0]\nmy_func([]) == []\nmy_func([547 901 373 857 127 938 43 908 89 118 352 439 580 283 592 462 660 892 441]) == [938 908 892 441]\nmy_func([547 104 797 965 693 849 720 226 861 259 135]) == [965 861 259 135]\nmy_func([244 524 72 138 827 558 282 545 437 689 261 659]) == [827 689 659]\nmy_func([950 704 710 78 646 816 338 586 101 775 797 789]) == [950 816 797 789]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([662 843 844 518 562 8 176 910 401 624 955 399 290 707]) == [955 707]\nmy_func([544]) == [544]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([165 129 944 85 452 105 665 381 260 673 560 59 40 191 924]) == [944 924]\nmy_func([478 779 759 46 34 391 739 74 414 570]) == [779 759 739 570]\nmy_func([138 619 156 496 587 620 59 725 0 836 494]) == [836 494]\nmy_func([125]) == [125]\nmy_func([263 253 372 733 30 537 548 154 298 954 50]) == [954 50]\nmy_func([817 752 48 762 558 36 247 873 688 749 578 804 801 253 218 377 825 636 576 161]) == [873 825 636 576 161]\nmy_func([20 137 20]) == [137 20]\nmy_func([678 342 885 742 909 664 931 857 635 372 500 606 113 175 5]) == [931 857 635 606 175 5]\nmy_func([972]) == [972]\nmy_func([0]) == [0]\nmy_func([0 1000]) == [1000]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([202]) == [202]\nmy_func([561 964 107 165 361 728 941 774 517]) == [964 941 774 517]\nmy_func([130 150 942 847 343]) == [942 847 343]\nmy_func([177 529 319 985 720 439 95 4 295 931 19 481]) == [985 931 481]\nmy_func([875 210 572 390 710]) == [875 710]\nmy_func([806 560 285 891 678 311 806 930 685 630 86 297 500 735 129 261 769 940]) == [940]\nmy_func([825 55]) == [825 55]\nmy_func([665 578 865]) == [865]\nmy_func([412 859 965 505 86 161]) == [965 505 161]\nmy_func([266 141 562 790 630 104 846 492 519 102 91 375 940 662 549 187 791 553 849]) == [940 849]\nmy_func([528 266 738 906 765 676 683]) == [906 765 683]\nmy_func([372 845]) == [845]\nmy_func([559 693 722 429 163 254 737 849 198 950 892 916 813 81 782 921 952 710 256 401]) == [952 710 401]\nmy_func([659]) == [659]\nmy_func([200 21 649 553 517 654 118 548 913 904 26 399 485 50 505 870 175 893 636 2]) == [913 904 893 636 2]\nmy_func([468 794 173 819 449 97 37 531 133 808 203 394 306 228 243 252 970]) == [970]\nmy_func([451]) == [451]\nmy_func([295 506 600 979 553 895 883 851 644 449 799 477 492 761 957]) == [979 957]\nmy_func([307 87 693 309 325 999 485 643 799 550 262]) == [999 799 550 262]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([179 245 285 875 733 664 181 691 543 302 478 6 270 388 583 165]) == [875 733 691 583 165]\nmy_func([103 524 211 350 801 60 715 859 230 904 958 150 725 627 968]) == [968]\nmy_func([795 212 310 598 375 664 580 137 601 636 104 401 620 377 908 100 938 544 47]) == [938 544 47]\nmy_func([558 546 927 224 767 271 697 731]) == [927 767 731]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1: \n        return []\n    max_val = max(input1)\n    max_index = input1.index(max_val)\n    return input1[max_index:]\n```"}
