{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([331 544]) == [544]\nmy_func([858 642 24 953 16 441 330 4 314 359]) == [953 441 359]\nmy_func([179 687 329 983 811 285]) == [983 811 285]\nmy_func([16 361 487 232 849]) == [849]\nmy_func([932 26 309 126 301 472 372 414 715 161 426]) == [932 715 426]\nmy_func([165 374 82 50 127 636 858 513 953 843 57 273 505 321 528 383 276]) == [953 843 528 383 276]\nmy_func([947 770 11 230 216 232 822 590 703 97 106 564]) == [947 822 703 564]\nmy_func([214 331 517 693 27 75 55 451 667 998 761 924 451]) == [998 924 451]\nmy_func([299 332 180 636 363 942 908 501]) == [942 908 501]\nmy_func([215 1000 871 800 416]) == [1000 871 800 416]\nmy_func([834 784 568 344 842 727 245 986 459 907 260 702 137 883 135 326 79]) == [986 907 883 326 79]\nmy_func([51 775 343 797]) == [797]\nmy_func([974 364 910 859 599 760 874 790 194 942 850]) == [974 942 850]\nmy_func([749 274 161 894 637 714 154 688 341 559 297 714 103 890 416 979 401 323 177]) == [979 401 323 177]\nmy_func([991 183 795 713 951 858 148 536 906 326 582 523 641 570 464 894 213]) == [991 951 906 894 213]\nmy_func([483 149 87 781 480]) == [781 480]\nmy_func([713 339 298 725 207]) == [725 207]\nmy_func([721 651 17 936 425 612 759 645 927 913]) == [936 927 913]\nmy_func([387 828 372 369 664 612]) == [828 664 612]\nmy_func([0]) == [0]\nmy_func([477 603 894 622 352 344 136 696 139]) == [894 696 139]\nmy_func([1 918 825 78 611 209 635 748 496 41 619 425 48]) == [918 825 748 619 425 48]\nmy_func([772 430 554 404 53 329]) == [772 554 404 329]\nmy_func([469 236 132 630 865 173 778 13 198 178 698 152 270 41 973]) == [973]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([277 626 105 260 59 506 385 176 795 557 781 377]) == [795 781 377]\nmy_func([431 408]) == [431 408]\nmy_func([682 536 799 643 881 404 271 742 950 201 330 720 264 926 302]) == [950 926 302]\nmy_func([444 163 957 713 231 51 57 11 298 512 65 607 697 211 54 22 949]) == [957 949]\nmy_func([15 882 293 39 185 837 856 67 487 278 78 624 607 800]) == [882 856 800]\nmy_func([311 728 108 771 620 587 581 335 400 561 621 775 712 590 15 247 491]) == [775 712 590 491]\nmy_func([427 75 141 828 731 182]) == [828 731 182]\nmy_func([954 271 661 811 789]) == [954 811 789]\nmy_func([0 1000]) == [1000]\nmy_func([962 138 985 31 983 598 313 291 445 332 862 833 220 251 198 887 833 348]) == [985 983 887 833 348]\nmy_func([902 171 508 725 337 582 92 209 568 72 696 284 930 631 308 812]) == [930 812]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([413 525 400 558 330 85 400 603 331 128 5 13 899 583 704 362 811 405]) == [899 811 405]\nmy_func([464 367 226 316 39 342 267 97 345 441 798 637 443]) == [798 637 443]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([983 471 897 429]) == [983 897 429]\nmy_func([]) == []\nmy_func([952 80 4]) == [952 80 4]\nmy_func([623 199 115 99 940 850 140 275 980 474 53 244 649 872 280]) == [980 872 280]\nmy_func([1000 0]) == [1000 0]\nmy_func([20 137 20]) == [137 20]\nmy_func([451]) == [451]\nmy_func([342 226 18 54 134 313 811]) == [811]\nmy_func([66 136 992 174 134 717 435 437 472 353 955]) == [992 955]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n\n    result = []\n    max_val = input1[0]\n\n    for num in input1:\n        if num >= max_val:\n            result.append(num)\n            max_val = num\n    \n    return result\n```"}
