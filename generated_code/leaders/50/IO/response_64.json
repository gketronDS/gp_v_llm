{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([976 380 821 594 185]) == [976 821 594 185]\nmy_func([265 274 221 439 691]) == [691]\nmy_func([648 349 27 517 441 196 669]) == [669]\nmy_func([798 428 776 884 692 605 520 940 611 201 291]) == [940 611 291]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([24 705 148 168 738 652 221 131 104 893 697]) == [893 697]\nmy_func([682]) == [682]\nmy_func([127 975 830 811]) == [975 830 811]\nmy_func([153 387 846 54 514 1000 415 617 970 126 426 656 384]) == [1000 970 656 384]\nmy_func([963]) == [963]\nmy_func([466 900 604 601 638 55 821 751 921 785 629 790 906]) == [921 906]\nmy_func([806 165 508 424 48 490 792 710 402 97 898 379 521 470 486 427 687 0 876 658]) == [898 876 658]\nmy_func([663 504 783 619 479 94 514 843 344 704 785 157 356]) == [843 785 356]\nmy_func([800 314 37]) == [800 314 37]\nmy_func([631 211 492 599 912 325 733 717 18 487 785 273 874 874 893 559 782 245 275]) == [912 893 782 275]\nmy_func([938 778 638]) == [938 778 638]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([339 630 58 283 361 927 10 277 934 108 986 684 746 409 431]) == [986 746 431]\nmy_func([486 14 608 137 2 495 878 93 246 71 154 275 134 369 330 446 26 942]) == [942]\nmy_func([135 707 584 27]) == [707 584 27]\nmy_func([659 923 938 226 895 595 88 163 384 961 195 674 195 665 140 211 139 405]) == [961 674 665 405]\nmy_func([276]) == [276]\nmy_func([0 1000]) == [1000]\nmy_func([1000 0]) == [1000 0]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([188]) == [188]\nmy_func([896 9 664 958 633 40 540 484 93]) == [958 633 540 484 93]\nmy_func([517]) == [517]\nmy_func([853 325 239 743 117 885 195 73 200 715 982 433 78 985 242 630 541 446]) == [985 630 541 446]\nmy_func([124 490 780 216 552 169 175 210 530 389 97 737 428 341]) == [780 737 428 341]\nmy_func([31 484 746]) == [746]\nmy_func([457 307 105]) == [457 307 105]\nmy_func([491 661 137 778 958 786 483 279 731]) == [958 786 731]\nmy_func([643 263 947 148 215 771 756 731 211]) == [947 771 756 731 211]\nmy_func([12 897 516 45 544 492 190 771 664 218]) == [897 771 664 218]\nmy_func([601 417 955 28 685 211]) == [955 685 211]\nmy_func([0]) == [0]\nmy_func([558 598 397 782 18 880 18 798 485 786 106 431 254 999 710]) == [999 710]\nmy_func([332 51 895 29]) == [895 29]\nmy_func([]) == []\nmy_func([736 251 528 529 149 221 105 947 822 499 198 939 690 758]) == [947 939 758]\nmy_func([748 815 154 72 883 805 635 500 307 749 171 154 951 932 953 565]) == [953 565]\nmy_func([183 339 654 714 868]) == [868]\nmy_func([620 260 782 668 615 502 19 269 511 115]) == [782 668 615 511 115]\nmy_func([451]) == [451]\nmy_func([594 193 480 611 940 678 359 434 891 388 557 501 704 801]) == [940 891 801]\nmy_func([495 326 332]) == [495 332]\nmy_func([20 137 20]) == [137 20]\nmy_func([281 26 405 133 565 584 158 893 909 133 575 554 357 8]) == [909 575 554 357 8]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if len(input1) == 0:\n        return []\n\n    max_value = max(input1)\n\n    result = []\n    found_max = False\n    for num in input1:\n        if found_max or num == max_value:\n            found_max = True\n            result.append(num)\n\n    return result\n```"}
