{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([303 351 454 656 633 79 87 194 790 118 791 13 230 577 248 471]) == [791 577 471]\nmy_func([451]) == [451]\nmy_func([20 137 20]) == [137 20]\nmy_func([224 512 696 918 763 355 625 997 982 631 885 699 62 36 684 11 279 237 241 48]) == [997 982 885 699 684 279 241 48]\nmy_func([602 340 733 326 662 890 908 252 848 52 47 809 99 768 100 348]) == [908 848 809 768 348]\nmy_func([680 451 605 166 153 746 521 550 456 990 296 120 329 716 736 184 270 50]) == [990 736 270 50]\nmy_func([404 20 942 749 676 995 37 244]) == [995 244]\nmy_func([12 232 778 479 487 507 357 596 495 684 222 504 733 908 256 611 719 964 100]) == [964 100]\nmy_func([963 407 981 411 219 953]) == [981 953]\nmy_func([847 946 755 368 436 771 177 775 23]) == [946 775 23]\nmy_func([308 834 537 935 389]) == [935 389]\nmy_func([791 633 273 878 213 311 548 561 468 91 281]) == [878 561 468 281]\nmy_func([677 523 964 243 93 929 308 268 461 51 581 375]) == [964 929 581 375]\nmy_func([16 532 129 158 507 326 871]) == [871]\nmy_func([551 776 458 82 890 898 305 862 908 222 816 25 939 461 967 654 26 98 752 268]) == [967 752 268]\nmy_func([591 350 814 908 346 127 182 313 946]) == [946]\nmy_func([394 620 810 431 474 51 743 281 96 172 866 338 561 337 703 138 975 40 678]) == [975 678]\nmy_func([29 176]) == [176]\nmy_func([732 315 227 875 71 156 976 63]) == [976 63]\nmy_func([358 828 761 68 621 7 898 702 755 722]) == [898 755 722]\nmy_func([716 594 995 207 21 300 560 862 340 214 41 718 838 528 100 508]) == [995 862 838 528 508]\nmy_func([22 273 78 473]) == [473]\nmy_func([839 324 613]) == [839 613]\nmy_func([909 140 812 923 337 156 237]) == [923 337 237]\nmy_func([113 316 74 197]) == [316 197]\nmy_func([1000 0]) == [1000 0]\nmy_func([149 904 658 701]) == [904 701]\nmy_func([629 633 487 610 698 311 911 463 316 527 477 761 857 56 661 114 468 679 682]) == [911 857 682]\nmy_func([161 225 928 900 730 889 226 255 717 510]) == [928 900 889 717 510]\nmy_func([897 794 906 488 473 897 448 332 854 248 130]) == [906 897 854 248 130]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([692 190 110 803 902 188 435]) == [902 435]\nmy_func([164 273 129 335 149 509 75 988 601 845 479 929 1000]) == [1000]\nmy_func([442 280 324 707 250]) == [707 250]\nmy_func([700 642 101 278 437 684 751 968]) == [968]\nmy_func([241 612 650 679 906 876 831 540 900 637 529 364 77 106]) == [906 900 637 529 364 106]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([816 889 464 519 819 937 325 619 266 356 772 517 86 49 511 351 397 116 362]) == [937 772 517 511 397 362]\nmy_func([468 529 163 948 707 673]) == [948 707 673]\nmy_func([5 275 153 293 364 521 110 810 477 369 999 467 844 303 785 211 693 266]) == [999 844 785 693 266]\nmy_func([470 617 932 192 947 691 396 521 304]) == [947 691 521 304]\nmy_func([144 934 550 798 976 17 989 272 95]) == [989 272 95]\nmy_func([]) == []\nmy_func([933 444 838 734 538 103 328 141 271 984 5 985 730 862]) == [985 862]\nmy_func([641 701 15 959 158 873 527 902 694 565 815 263 35 833 1000 82 281 996]) == [1000 996]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([0 1000]) == [1000]\nmy_func([551 61 407 723 772 680]) == [772 680]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([0]) == [0]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = input1[0]\n    result = [max_val]\n    for num in input1[1:]:\n        if num >= max_val:\n            result.append(num)\n            max_val = num\n    return result\n```"}
