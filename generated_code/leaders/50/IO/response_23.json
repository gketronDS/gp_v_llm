{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([306 402 203 790 794 28 367 563 796 911]) == [911]\nmy_func([871 874 660 180 326 914 376 900 737]) == [914 900 737]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([13]) == [13]\nmy_func([312 154 17]) == [312 154 17]\nmy_func([210 384 245 566 349 362 868 335 811 642 179 677 198 623]) == [868 811 677 623]\nmy_func([766 928 941 987 243 200 116 753 982 602 818]) == [987 982 818]\nmy_func([20 137 20]) == [137 20]\nmy_func([724 40 38 203]) == [724 203]\nmy_func([952 791 701 564 463 519 679 175 445 535 319 618 278 218 561 304 72 851 305]) == [952 851 305]\nmy_func([112 856 963 419 880 259 395 113 814 989 807 143]) == [989 807 143]\nmy_func([94 852 300 162 921 438 131 945 135 15 823 493 775]) == [945 823 775]\nmy_func([933 456 24]) == [933 456 24]\nmy_func([278 539 491 639 490 500]) == [639 500]\nmy_func([451]) == [451]\nmy_func([221 641 699 286 577 382]) == [699 577 382]\nmy_func([241 295 288 552 733 665 339 709 722 205 454 856 742 503 679 867 448 295]) == [867 448 295]\nmy_func([877 301 588 130 698 133 38 949 535 693 880 948 54 752 782 580]) == [949 948 782 580]\nmy_func([740 619]) == [740 619]\nmy_func([554 593 536 130]) == [593 536 130]\nmy_func([275 240 582 439 842]) == [842]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([704 878 999 170 806 290 743]) == [999 806 743]\nmy_func([619 217 604 577 775]) == [775]\nmy_func([]) == []\nmy_func([491 331 233 703 477 179 661 992 103 163 103 156 400 391 525 854 685]) == [992 854 685]\nmy_func([659 237 581 522 848 769 977 311 805 523 147 818 0 151 444]) == [977 818 444]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([663 766 74 959]) == [959]\nmy_func([473 511 931 879 959 210 119 244 2 690 643 236 185 194 682 877 435 105 370]) == [959 877 435 370]\nmy_func([207 959 288 330 486 32 905 304 810]) == [959 905 810]\nmy_func([127 81 68 988 956]) == [988 956]\nmy_func([688 291 199 872 694 774 580 208 760 776 606 297 673 705 435 578]) == [872 776 705 578]\nmy_func([0]) == [0]\nmy_func([503 855 243 892 822 201 443 223 352 515]) == [892 822 515]\nmy_func([451 56 926 537 780 913 3 889 763 94 579 537 533 818 482 656 404 680]) == [926 913 889 818 680]\nmy_func([982 838 704 774 317 573 962 291 492 306 794 10 913 112 409 717 252 394 380 665]) == [982 962 913 717 665]\nmy_func([316 463 355 446 133 981 385 766 106 948 940 773 771 6 527 700]) == [981 948 940 773 771 700]\nmy_func([1000 0]) == [1000 0]\nmy_func([0 1000]) == [1000]\nmy_func([956 906 82 216 587 997 107 512 814 944]) == [997 944]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([739 877 227 275 943]) == [943]\nmy_func([603]) == [603]\nmy_func([734 91 542 15 61 465 92]) == [734 542 465 92]\nmy_func([329 468 22 131 679 972 156 804 914 462 592 287]) == [972 914 592 287]\nmy_func([991 213 213 2 719 646 755 90 897 630 116]) == [991 897 630 116]\nmy_func([200 617]) == [617]\nmy_func([249]) == [249]\nmy_func([962 257 365 192 156 908 797 919 999 263 48 911 159 993 338 465 391 511 678]) == [999 993 678]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    output = []\n    max_val = None\n    for num in reversed(input1):\n        if max_val is None or num > max_val:\n            max_val = num\n            output.append(num)\n    return output[::-1]\n```"}
