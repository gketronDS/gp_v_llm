{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([275 321 54 263 92 932 587 974 99 503]) == [974 503]\nmy_func([675 324 145 462 930 4 286 455 605 390 503 770 383 384]) == [930 770 384]\nmy_func([718 892 689 626 159]) == [892 689 626 159]\nmy_func([227 677]) == [677]\nmy_func([505 952 279 681 945 778 743 985 671 731]) == [985 731]\nmy_func([938]) == [938]\nmy_func([102 77 288 38]) == [288 38]\nmy_func([980 933 841 661 373 266]) == [980 933 841 661 373 266]\nmy_func([382 168 283 48 767]) == [767]\nmy_func([86 296 856 777 6 242 882 567 120 478 273 381 843 996 988]) == [996 988]\nmy_func([581 897 221 491 42 590 925 203 294 232 30]) == [925 294 232 30]\nmy_func([39 288 928 115 250 511 513 615 80 712]) == [928 712]\nmy_func([304 842 624 859 47 172 653 940 94 208]) == [940 208]\nmy_func([]) == []\nmy_func([597 95 855 510 453 731 334 313 625]) == [855 731 625]\nmy_func([313 694 595 154 601 9 109 381 811 99 694 785 82 9 158 899 705 585]) == [899 705 585]\nmy_func([280 507 234 335 504 329 500 34 809 429 251 66 951 109 925 990 836 407]) == [990 836 407]\nmy_func([486 784 64 340 738 42 606 267 507]) == [784 738 606 507]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([532 197 841 501 377 968 289 407 727 573 294 528 845 65 297 343 148]) == [968 845 343 148]\nmy_func([651 419 190 993 2 959]) == [993 959]\nmy_func([593 246 888 603 381 28 6 996 507 754 944 882 158]) == [996 944 882 158]\nmy_func([689 378 344 485 265 342 996 695 857 860 588 444]) == [996 860 588 444]\nmy_func([945 523 565 75 332 930 880 460 219 840 362 420 99 93 809 572]) == [945 930 880 840 809 572]\nmy_func([149 773 945 371 505 138 1000 293 175 745 331 1 650 731 825 498 919 770 394]) == [1000 919 770 394]\nmy_func([284 515 818 911 331 905 584 4 545 646 175 160 35 930]) == [930]\nmy_func([301 971 886 651 902 961 428 98 208 520 621 285 195 860 208 409 363 772]) == [971 961 860 772]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([625 465 255 711 767 633 491 215 849 560 502 770 938 170 988 229 939 527]) == [988 939 527]\nmy_func([717 89 156 440 58 270 682 510 468 794]) == [794]\nmy_func([214 400 597 504 486 709 27]) == [709 27]\nmy_func([47 503 270 661 509 207 219 159 374 585]) == [661 585]\nmy_func([138 667 535 60 713 863 802 884 115 772 338 625 251]) == [884 772 625 251]\nmy_func([41 908 526 149 242 360 968 415 494 975 675 768 629 183 955 128 290 491]) == [975 955 491]\nmy_func([96 886 543 794 5 753 23 382 620 395 926 277]) == [926 277]\nmy_func([451]) == [451]\nmy_func([673 599 799 190 178 273 868 140 621 537 367 939]) == [939]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([168 435 194 217 377 821 274 636 548 962 167 789 188 263 277 846 762 444 343 160]) == [962 846 762 444 343 160]\nmy_func([1000 0]) == [1000 0]\nmy_func([472 725 890 847 956 441 499 306 140 751]) == [956 751]\nmy_func([734 319 636 627 979 929 797 933 910 343 518 887]) == [979 933 910 887]\nmy_func([20 137 20]) == [137 20]\nmy_func([347 913 526]) == [913 526]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([0 1000]) == [1000]\nmy_func([12 740 324 489 2 781 427 895 533 88]) == [895 533 88]\nmy_func([0]) == [0]\nmy_func([719 370 692 584 758 367 266 381 970]) == [970]\nmy_func([724 161 351 679 116 763 335 437 652 1000 890 420 160 725 811 654]) == [1000 890 811 654]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    max_val = input1[0]\n    result = []\n    for num in input1:\n        if num >= max_val:\n            max_val = num\n            result.append(num)\n    return result\n```"}
