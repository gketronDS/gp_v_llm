{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([451]) == [451]\nmy_func([958 805 478 922 96 708 999 316 563 486 678 826 142 958 331 888]) == [999 958 888]\nmy_func([205]) == [205]\nmy_func([888 116 298 365 605 729 114 338 813 688 858 25 740 197 478 38 375 873 795 840]) == [888 873 840]\nmy_func([108 838 111 46]) == [838 111 46]\nmy_func([624 603 695 634 429 516 749 138 831 15 939 661 888 207 605 460]) == [939 888 605 460]\nmy_func([924 381 462 877 21 237 820 409 316 182 255 966 205 424 216 626 862]) == [966 862]\nmy_func([961 749 376 487 948 400 152 673 646 365 296 130 122 34 416 234 70 183]) == [961 948 673 646 416 234 183]\nmy_func([353 959 174 745 375 25 755 898 450 132 791 244 686 446 875 683]) == [959 898 875 683]\nmy_func([20 137 20]) == [137 20]\nmy_func([27 222 119 112 981 99 590 111 555 684 946 652 669 723 947 78 994 236]) == [994 236]\nmy_func([265 906 888 282 366 337 239 410 506 742 987 489 955 540]) == [987 955 540]\nmy_func([579 460 437 737 821 269 386 98 720 929 617 957 379 20 402 165 78 554]) == [957 554]\nmy_func([544 807 296 971 113 192 581]) == [971 581]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([984 704 961 696 186 510]) == [984 961 696 510]\nmy_func([954 661 778 469 738 174 522 212 510 268 191 503]) == [954 778 738 522 510 503]\nmy_func([898 122 761 669 476 256 395 994 304 711 937 813]) == [994 937 813]\nmy_func([544]) == [544]\nmy_func([12 753 668 253 464 448 337 955 701 345 521 751 36 916 445 821 237 78 700]) == [955 916 821 700]\nmy_func([360 8 330 425 165 836 580 461 377 895 519 86]) == [895 519 86]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([620 379 784 283]) == [784 283]\nmy_func([160 149 72 578 499 800 753 968 813 124 730 340]) == [968 813 730 340]\nmy_func([]) == []\nmy_func([1000 0]) == [1000 0]\nmy_func([557 221 370 278 645 230 567 447 709 430]) == [709 430]\nmy_func([994 378 587 559 208 393 989 817 290 208 877 15 655 121]) == [994 989 877 655 121]\nmy_func([594 431 385 303 919 286 983 903 583 137 984 411 171 659 115 79 213 787]) == [984 787]\nmy_func([852 172 805 148 37 695 433 136 955]) == [955]\nmy_func([244 689 330 71]) == [689 330 71]\nmy_func([0 1000]) == [1000]\nmy_func([117 336 800 54 404 2 322 756 471 152 162 847 416 835 776 342 202 383]) == [847 835 776 383]\nmy_func([527 430 652 540 457]) == [652 540 457]\nmy_func([321 994 848 129 284 180 404 322 725 959 961 973 696 641 8 555 713 263 778]) == [994 973 778]\nmy_func([381 854 314 705 306 698 56 736]) == [854 736]\nmy_func([306 752 357 898 709 377 70 175 104]) == [898 709 377 175 104]\nmy_func([192 620 975]) == [975]\nmy_func([361 679 143 922 1000 3 365 661 438 57 130 199 245 932]) == [1000 932]\nmy_func([449 53 666 318 388 236 404 122 910 299 150 191 527]) == [910 527]\nmy_func([315 112 765 170 607 236 543 305 713]) == [765 713]\nmy_func([942 213 52 667 832 226 481 716 433 825 268]) == [942 832 825 268]\nmy_func([160 149 650 670 66 200]) == [670 200]\nmy_func([317 600 191]) == [600 191]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([0]) == [0]\nmy_func([318 21 929 605 740 321 176 780 160 679 733 206 920 944 606 319 454 57]) == [944 606 454 57]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([672 585 365 713 473 368 999 449 86 262 402 229 22 269 593 734 55 235]) == [999 734 235]\nmy_func([210 256 910 449 122 186 870 243 822 739 25 640 500 608 909 282]) == [910 909 282]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n\n    result = []\n    max_seen = -1\n\n    for num in input1[::-1]:\n        if num > max_seen:\n            result.append(num)\n            max_seen = num\n\n    return result[::-1]\n```"}
