{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([213 292 552 305 619 996 300]) == [996 300]\nmy_func([668 467 714 9 520 812 322 207 529]) == [812 529]\nmy_func([0]) == [0]\nmy_func([585 538 912 855 605 330 32 532 933]) == [933]\nmy_func([928 954 448 553]) == [954 553]\nmy_func([453 25 671 616 559 540 406 298 734 599 327 506 148]) == [734 599 506 148]\nmy_func([890 67 505 167 291 202 509 375 268 99]) == [890 509 375 268 99]\nmy_func([1000 0]) == [1000 0]\nmy_func([971]) == [971]\nmy_func([354 974 37 731]) == [974 731]\nmy_func([222 168 906 981 281 398 239 404 348]) == [981 404 348]\nmy_func([568 626 543 842 59 577 88]) == [842 577 88]\nmy_func([315 470 695 744 62 678 283 227 16 828]) == [828]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([631 258 550 146 91]) == [631 550 146 91]\nmy_func([480 962 218 815 184 994 324 321 212 835 363 409 752 553 458 29 910 452]) == [994 910 452]\nmy_func([999 158 970]) == [999 970]\nmy_func([496 141 401 763 960 309]) == [960 309]\nmy_func([533 809 955 826 280 51 585 241 664 774 159 102 214 947 137 618 858 323 25]) == [955 947 858 323 25]\nmy_func([]) == []\nmy_func([808 519 441 509 117]) == [808 519 509 117]\nmy_func([527 203 786 474 327 131 717 608 776 261 987 523 141 424 79 385 730]) == [987 730]\nmy_func([28 976 789 682 826 48 945 29 122 365 222 722 668 33 706 721 106 625]) == [976 945 722 721 625]\nmy_func([451]) == [451]\nmy_func([46 270 790 311 622 733 615 832 334 977 236 363 309 210 726 854 336 420 809]) == [977 854 809]\nmy_func([250 794]) == [794]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([352 758 894 747 665]) == [894 747 665]\nmy_func([145 591 594 115 480 548 4 194 30 220 935 18 164 92 574]) == [935 574]\nmy_func([396]) == [396]\nmy_func([92 517 461 518 918 635 157 796 146 573 59 269 972 925 965 463 300 120 236]) == [972 965 463 300 236]\nmy_func([885 691 73 1000 669 379 290 531 707 42 73 751 496 851]) == [1000 851]\nmy_func([590]) == [590]\nmy_func([20 137 20]) == [137 20]\nmy_func([0 1000]) == [1000]\nmy_func([2 620]) == [620]\nmy_func([517 75 18 989 578 419 248 767 412 616 692 647 407]) == [989 767 692 647 407]\nmy_func([243 481 221 632 833 774 309 932 259 683 651 743 651 541 428 917]) == [932 917]\nmy_func([563 89 508 489 861 782 184 451 748 702 632 531 85 687 283 456]) == [861 782 748 702 687 456]\nmy_func([146 957 230 154 949 669 214 633 350]) == [957 949 669 633 350]\nmy_func([739 425 185]) == [739 425 185]\nmy_func([719 593]) == [719 593]\nmy_func([57 573 716 327 855 297 541 494 269 530 513]) == [855 541 530 513]\nmy_func([91 70 968 872 591 888 320 97 900 243 5]) == [968 900 243 5]\nmy_func([713 50 980 230 418 631 931 642 846 339]) == [980 931 846 339]\nmy_func([353 794 650 290 116 19 625 227 733 137]) == [794 733 137]\nmy_func([78 263 756 258 339 528 305 811 637 467 545 982 299]) == [982 299]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([852 819 689 722 647]) == [852 819 722 647]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    \n    result = []\n    max_val = input1[0]\n    \n    for num in input1:\n        if num >= max_val:\n            result.append(num)\n            max_val = num\n    \n    return result\n```"}
