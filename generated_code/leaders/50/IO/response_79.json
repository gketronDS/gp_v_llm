{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([942 94]) == [942 94]\nmy_func([993 446 754 824 117 538 302 443 492 256 435 715 753]) == [993 824 753]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([210 933]) == [933]\nmy_func([107 218]) == [218]\nmy_func([451]) == [451]\nmy_func([294 366 709 240 813 160 783 885 705 720 970 479 727 578 612]) == [970 727 612]\nmy_func([655 825 81 490 719 180 768 85 241 552 295 358 21 743 921]) == [921]\nmy_func([335 720 8 980 473]) == [980 473]\nmy_func([848 615 599 19 529 718 499 160 491 940 581 375 485]) == [940 581 485]\nmy_func([908 975 121 536 617 312 923 745 348 608 250 486]) == [975 923 745 608 486]\nmy_func([525 876 108 989 611 829 433 908 13]) == [989 908 13]\nmy_func([0]) == [0]\nmy_func([586 594 198 149 237 472 680 304 357 183 728 927 797]) == [927 797]\nmy_func([742 1000 961 927 1 121 160]) == [1000 961 927 160]\nmy_func([19 748 961 540 288 523 517 944 205 405 988]) == [988]\nmy_func([108 47 992 814 117 141 428 321 470 870 975 84 687 900 288 788 986 424 878 963]) == [992 986 963]\nmy_func([465 328 562 579 364 600 816 167 825 432 46 695 930 950 590]) == [950 590]\nmy_func([245 423 924 294 339 104 652 295 270 859 497]) == [924 859 497]\nmy_func([499]) == [499]\nmy_func([623 301 999 137 885 458 510 591 997 284 325 11 749 401 152 394 481 254]) == [999 997 749 481 254]\nmy_func([767]) == [767]\nmy_func([39 683 797 348 53 716 761 515 342 925 888 291 71 675 293 688 963 360]) == [963 360]\nmy_func([128]) == [128]\nmy_func([682 387 710 538 965 422 533 585 948 34]) == [965 948 34]\nmy_func([465]) == [465]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([400 449 370 873 537 902 527 96 893]) == [902 893]\nmy_func([1000 0]) == [1000 0]\nmy_func([848 701 982 206 427]) == [982 427]\nmy_func([320 337 759 918 902 571 700 434 963 158 184 520 45 803 479 464]) == [963 803 479 464]\nmy_func([869 506 745 801 758 787 406 245 740 949]) == [949]\nmy_func([203 770 893 419 78 664 830 417 710 430 966 377 316 136]) == [966 377 316 136]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([626 135 342 475 522 511 528 484 337 734 102 336 407 437 292 132 361 446 163]) == [734 446 163]\nmy_func([0 1000]) == [1000]\nmy_func([51 350 581 770 403 198 309 707 481 314 671 397]) == [770 707 671 397]\nmy_func([182 210 135 863 935 510 13 936 413 840 911 857 377 435 614 610]) == [936 911 857 614 610]\nmy_func([499 151 44 779 971 335 129 811 143]) == [971 811 143]\nmy_func([280]) == [280]\nmy_func([124 231 696 519 854 599 157 768 519 792 114 306 108 116 839 6 619 337]) == [854 839 619 337]\nmy_func([955 538 384 642 994 203 657 159]) == [994 657 159]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([805 521 552 22 545 40 813 490 632 377 515 258 465 950 188]) == [950 188]\nmy_func([]) == []\nmy_func([8 367 644 662 883 672 656 908 263 732 590 768 547 801 60 49 330 69 280]) == [908 801 330 280]\nmy_func([986 771 83 888 277 433 777 509 46 69 552 782 947 608 640 112]) == [986 947 640 112]\nmy_func([20 137 20]) == [137 20]\nmy_func([137 342 754 61 926 492 758 896 495 762 144 64 481 548 53 840 24 931 61]) == [931 61]\nmy_func([122 893 250 545 573 442 253 54 577 162 800 85 196 876 405 187 844 889 262 986]) == [986]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n    result = []\n    max_num = input1[-1]\n    for num in reversed(input1):\n        if num >= max_num:\n            result.append(num)\n            max_num = num\n    return list(reversed(result))\n```"}
