{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([1000 0]) == [1000 0]\nmy_func([881 388 212 609]) == [881 609]\nmy_func([765 713 492 973 142 306 412 147 753 375 468]) == [973 753 468]\nmy_func([471 142 462 816 595 610 988 156 609 240 312 681]) == [988 681]\nmy_func([782 532 481 151 517 336 315 271 193 33 321 128 45 835 64 166 343]) == [835 343]\nmy_func([2 371 840 747 644 554 398 281 853]) == [853]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([76 825 3 379 447 821 491 518 305 584 453 474 260 145 277 495]) == [825 821 584 495]\nmy_func([]) == []\nmy_func([781 642 599 35 835 748 111 142 585 557 774 457 331 807 584]) == [835 807 584]\nmy_func([624 736 581 104 509 418 375]) == [736 581 509 418 375]\nmy_func([800 855]) == [855]\nmy_func([154 216 806 977 93 615 30 689 702 479 310]) == [977 702 479 310]\nmy_func([0 1000]) == [1000]\nmy_func([938 527 645 7 393 675 262 241 157 133 334 329 36 100 611 386 246]) == [938 675 611 386 246]\nmy_func([117 222 665 38 32]) == [665 38 32]\nmy_func([135 434 743 342 35 794 649 822 410 820 828 80 784 579 512 420]) == [828 784 579 512 420]\nmy_func([90 274 706 307 856]) == [856]\nmy_func([802 863 697 143 17 516 816 848]) == [863 848]\nmy_func([631 811 119 932 367 989 259 520 307 90 316 196]) == [989 520 316 196]\nmy_func([539 870 729 754]) == [870 754]\nmy_func([33 74 212 254 165 66 965 451 818 708]) == [965 818 708]\nmy_func([20 137 20]) == [137 20]\nmy_func([343 281 266]) == [343 281 266]\nmy_func([723 273 652 285 534 634 184 630]) == [723 652 634 630]\nmy_func([0]) == [0]\nmy_func([356 221 432 75 678 150 304 686 715 184 146 81 975 232]) == [975 232]\nmy_func([39 986 158 215 583 735 180 229 120 363 711 299 412 458 438 732]) == [986 735 732]\nmy_func([973 571 461 842 781 334 858 881 246 402 719 683]) == [973 881 719 683]\nmy_func([222 648 330 42 828 145 511 867 843 212 218 709 151 787 805]) == [867 843 805]\nmy_func([479 903 126 148 274 434 57 940 925 789 657 963 916 692 39]) == [963 916 692 39]\nmy_func([464 14 86 827]) == [827]\nmy_func([38 646 279 971 127 591 659 461 275 964 947]) == [971 964 947]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([791 50 274 181 740 802 505 670 248 868 149 987 370 574 825 47]) == [987 825 47]\nmy_func([493 838 546 808 7 609 973 815 575]) == [973 815 575]\nmy_func([679 665 270 131 53 948 910 76 229 640 430 70 152 684 732 960 30]) == [960 30]\nmy_func([451]) == [451]\nmy_func([66 51 859 55 983 779 449 382 572 0 614 343 563 312 849 636 658 405]) == [983 849 658 405]\nmy_func([621 708 244]) == [708 244]\nmy_func([496 476 702 344 325 904 528 175 989 745 978 87 239 487]) == [989 978 487]\nmy_func([448 633 641 68 37 753 166 175]) == [753 175]\nmy_func([987 698 460 698 550 162 38 471 941 688 49 188 206 281]) == [987 941 688 281]\nmy_func([739 448 185 359 158 755 790 595 127 551 886 973 956 237 549 660]) == [973 956 660]\nmy_func([251 581 377 166 511 824 946 8 187 569 940 642 874 205 350]) == [946 940 874 350]\nmy_func([692 986 534 620 943 460 320 335 470 252 146 999 62 425 431 556 48 985 538 115]) == [999 985 538 115]\nmy_func([565 60 598 234 584]) == [598 584]\nmy_func([152 535 808 279]) == [808 279]\nmy_func([47 87 43 44]) == [87 44]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    output = []\n    max_seen = None\n    for number in reversed(input1):\n        if max_seen is None or number > max_seen:\n            output.append(number)\n            max_seen = number\n    return output[::-1]\n```"}
