{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([1000 0]) == [1000 0]\nmy_func([897 749 777]) == [897 777]\nmy_func([902 729 565 713 936 37 916 795 428 19 611]) == [936 916 795 611]\nmy_func([620 81 561 790 119 53 180 15 860 576]) == [860 576]\nmy_func([433 855 327 213 5 660]) == [855 660]\nmy_func([563 548 403 302 145 206 530 123 752]) == [752]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([587 662 77 526 431 335]) == [662 526 431 335]\nmy_func([999 413 276 731]) == [999 731]\nmy_func([542 418 256 909 139 81 430 275 323 743 531 501]) == [909 743 531 501]\nmy_func([454 318 331 87 87 178 705 709 35 691 334 830 436 325 449]) == [830 449]\nmy_func([582 896 815 961 95 824 36 123 270 473 347 880 696 294 497 915]) == [961 915]\nmy_func([121 377 326 127 792 324 640 340 608]) == [792 640 608]\nmy_func([]) == []\nmy_func([29 86 961 215]) == [961 215]\nmy_func([457 934 995 14 938 227 507 287 896 229 985 638 332 477 381 963 827 477]) == [995 985 963 827 477]\nmy_func([564 98 926 358 122 465 965 403 55 637 598 454 788 716 193 555 362 576 480 200]) == [965 788 716 576 480 200]\nmy_func([20 137 20]) == [137 20]\nmy_func([25]) == [25]\nmy_func([447 103 784 502 811]) == [811]\nmy_func([13 818 918 990 317]) == [990 317]\nmy_func([0 1000]) == [1000]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([926 507 340 229]) == [926 507 340 229]\nmy_func([998 220 347 317 562 418 254 687 581 488 571 905]) == [998 905]\nmy_func([751 127 278 62 846 635 784 840 994 267 395 187 115 285 961 718 799]) == [994 961 799]\nmy_func([790 744 573 168 774 588 853 987 615 913 193]) == [987 913 193]\nmy_func([779 228 410 470 697 442 429 938 193 757 325 945 504]) == [945 504]\nmy_func([20 876 170 26 773 51 167 905 592 396 793 182 495 778 493]) == [905 793 778 493]\nmy_func([451]) == [451]\nmy_func([251 507 351 867 480 596 416 849 988 617 423 253 51 411 964 10]) == [988 964 10]\nmy_func([264 918 43 276 356 374 119 945 982 457]) == [982 457]\nmy_func([380 441 269 64 100 449 953 835 926 84 138]) == [953 926 138]\nmy_func([577 353 604]) == [604]\nmy_func([623 453 763 130 443 974 221 228 982 347 559 96 391 356 715]) == [982 715]\nmy_func([46 324 101 514 567 926 681]) == [926 681]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([766 381]) == [766 381]\nmy_func([261 369 131 374 105 251]) == [374 251]\nmy_func([798 184 416 762 383 566 364 287 662 902 228 661 104]) == [902 661 104]\nmy_func([152 290 149 65 144 47 286 924 565 922 564 515 484 293 9 926 307 626]) == [926 626]\nmy_func([264 55 32 54 275 933 612 945 69 180 524 33 319]) == [945 524 319]\nmy_func([616 909]) == [909]\nmy_func([707 929 103 33 287 272 458 618 878 371 651]) == [929 878 651]\nmy_func([151 406]) == [406]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([749 82 307 514 475 482 470 71]) == [749 514 482 470 71]\nmy_func([500 25 727 37 436 355 328 41 372 220 115 467 903 407]) == [903 407]\nmy_func([60]) == [60]\nmy_func([0]) == [0]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    max_val = float('-inf')\n    for i in reversed(input1):\n        if i >= max_val:\n            result.append(i)\n            max_val = i\n    return list(reversed(result))\n```"}
