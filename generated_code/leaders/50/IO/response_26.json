{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([390 250 846]) == [846]\nmy_func([284 917 827 295 760 33 440 885 550 582 624 675 765 876 848 155 937]) == [937]\nmy_func([167 454 891 111 75]) == [891 111 75]\nmy_func([789 399 828]) == [828]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([]) == []\nmy_func([451]) == [451]\nmy_func([614 608 458 274]) == [614 608 458 274]\nmy_func([434 918 938 857 635 488 954 223 211 131 615 385]) == [954 615 385]\nmy_func([0 1000]) == [1000]\nmy_func([320 825 975 877 338 823]) == [975 877 823]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([736 666 931 86 185 533 956 760 607 461 264 356 242]) == [956 760 607 461 356 242]\nmy_func([931 852 612 790 619 966 922 607 902 889 972 525 894 80 500]) == [972 894 500]\nmy_func([416 244 416 520 147 247 378 897 730 526 507 448 67 200 949 0 966]) == [966]\nmy_func([140 55 520 683 247 249 120 873 77 71 339 351 760]) == [873 760]\nmy_func([25 83 815 882 813 739 377 119 115 728 664 749 132 660]) == [882 813 749 660]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([869 523 463 105 848 184 48 136 543 20]) == [869 848 543 20]\nmy_func([529 999 153 34 631 487 882 817 171 311 352 686 119 638 412]) == [999 882 817 686 638 412]\nmy_func([624 453 60 407 263 608 750 847 816 528 269 853 277 81 584]) == [853 584]\nmy_func([828 957 325 986 395 805 468 132 240 652 931 89 36 360 816]) == [986 931 816]\nmy_func([667 762 950 856 784 180 954 793 224 517 594 376 549 229 735]) == [954 793 735]\nmy_func([690 810 2 299 415 454 972 989 509 668 968 520]) == [989 968 520]\nmy_func([663 509 944 377 598 707 96 355 469 577 758 302 392 355 526 233 892 445 228]) == [944 892 445 228]\nmy_func([20 137 20]) == [137 20]\nmy_func([216 743 361]) == [743 361]\nmy_func([653 582 119 58 649 256 672 574]) == [672 574]\nmy_func([432 805 450 676 982 299 147]) == [982 299 147]\nmy_func([32 672 978 366 986 283 882 526 903 914 399]) == [986 914 399]\nmy_func([314 636 958 800 423 740 61]) == [958 800 740 61]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([0]) == [0]\nmy_func([825 920 295 814 531 352]) == [920 814 531 352]\nmy_func([592 120 444 373 789 334 217 664 376 444 828 196 300 836 534 835 823 104 915]) == [915]\nmy_func([159 76 167 349 244 134 323 771 141 307 273 865 356]) == [865 356]\nmy_func([895 657 522 559 125 728 451 588 761 125 576 991]) == [991]\nmy_func([260]) == [260]\nmy_func([768 292 519 544 897 610 432 464 247 897]) == [897 897]\nmy_func([217 398 954 201 929 835 278 754 754 258 19 587 269 157 976]) == [976]\nmy_func([335 266 276 395 833]) == [833]\nmy_func([747 99 42 458 932 770 426 102 927 275 30 362 107 825 361 717 255]) == [932 927 825 717 255]\nmy_func([217 867]) == [867]\nmy_func([729 161 686 952 378 437 840 949 368 660 157 662 305 691 140 835 987 225 585]) == [987 585]\nmy_func([582 212 576 410 953 293 465 985 341 315 331 706 255 170 829 975 182 879 743]) == [985 975 879 743]\nmy_func([88 682 971 88 395 636 842 717]) == [971 842 717]\nmy_func([983 614]) == [983 614]\nmy_func([1000 0]) == [1000 0]\nmy_func([604 902 84 165 601 197 655 838]) == [902 838]\nmy_func([239 108 928 191 516 24 4 403 734 953 997 209 926]) == [997 926]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    result = []\n    max_val = -1\n    for num in input1:\n        if num > max_val:\n            result = [num]\n            max_val = num\n        elif num < max_val:\n            result.append(num)\n    return result\n```"}
