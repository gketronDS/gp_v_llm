{"submission": "```python\ndef my_func(input1):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a vector of integers of length [0, 20] with each integer in [0, 1000]. The function should output a vector of integers that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func([791]) == [791]\nmy_func([366 60 575 810 257 728]) == [810 728]\nmy_func([576 406 413 561 679 438 693 666 748 969 642 234 472 674 484 83 385 620 633 133]) == [969 674 633 133]\nmy_func([29 210 989]) == [989]\nmy_func([393 805 37 866 112 570 735 228 273 734 118 353 477 45 956 165 857]) == [956 857]\nmy_func([561 213 365 742 609 892 244 961 81 403 46 486 918 329 539 818 119 28]) == [961 918 818 119 28]\nmy_func([47 87 43 44]) == [87 44]\nmy_func([35 885 319 508 970 188 413 551 738 78 120 822 763 987 489 126 305 485]) == [987 489 485]\nmy_func([353 491]) == [491]\nmy_func([20 137 20]) == [137 20]\nmy_func([643 473 683 947 548 850 877 927 738 997 197 777 608 259 17 463 865]) == [997 865]\nmy_func([265 752 350 280 910 69 744 398 511 701 762 603]) == [910 762 603]\nmy_func([245 748 299 704 305 229 232 726 830 50 313 444 431 902 167 842]) == [902 842]\nmy_func([41 7 891 746 50 695 297 369 509 889 115 286 557 21 923]) == [923]\nmy_func([0]) == [0]\nmy_func([878 155 264 226 427 696 818 722 442 168 153 46]) == [878 818 722 442 168 153 46]\nmy_func([229 889 14 26]) == [889 26]\nmy_func([462 113 518 22 632 412 94 561 874 83]) == [874 83]\nmy_func([0 1000]) == [1000]\nmy_func([315 752 545 340 957 316]) == [957 316]\nmy_func([770 62 58 426 584 826 695 687 438 813 189 117 884 431 360 540 848 147 72 541]) == [884 848 541]\nmy_func([99 817 402 679 300 366 656 467 553 560 430 679 337 290]) == [817 679 679 337 290]\nmy_func([5 5 5 5 5 5 5]) == [5 5 5 5 5 5 5]\nmy_func([903 710 958 817 168 921 188 595 888 364 529 539 88]) == [958 921 888 539 88]\nmy_func([506]) == [506]\nmy_func([426 175 352 364 856 687 411 691 194 379 280 55 73 773 127 261]) == [856 773 261]\nmy_func([214 301 803 863 787 257 215]) == [863 787 257 215]\nmy_func([1000 0]) == [1000 0]\nmy_func([521 894 386 393 46 957 809 639 362 402 914 339 79 523 684 628 464 617 778]) == [957 914 778]\nmy_func([689 280]) == [689 280]\nmy_func([0 1 2 3 4 5 6 7 8 9 10]) == [10]\nmy_func([520 167 501 13 762 324 158 913 665 35]) == [913 665 35]\nmy_func([233 507 823 259 102 80 404 125 205 387 90]) == [823 404 387 90]\nmy_func([451]) == [451]\nmy_func([]) == []\nmy_func([740 178 412]) == [740 412]\nmy_func([10 9 8 7 6 5 4 3 2 1 0]) == [10 9 8 7 6 5 4 3 2 1 0]\nmy_func([891 809 197]) == [891 809 197]\nmy_func([609 683]) == [683]\nmy_func([537 382 826 448 705]) == [826 705]\nmy_func([947 623 464 962 346 11 481]) == [962 481]\nmy_func([169 266 483 544 34 470 211 608 371 261 781 179 717 886]) == [886]\nmy_func([783 410 549 701]) == [783 701]\nmy_func([202 570]) == [570]\nmy_func([766 886 603]) == [886 603]\nmy_func([208 13 708 381 805 644 225 742 487 670 809 205 323 123 977]) == [977]\nmy_func([307 156 489 454 128]) == [489 454 128]\nmy_func([711 925 855 971 280 264 439 676 735 698]) == [971 735 698]\nmy_func([545 746 591]) == [746 591]\nmy_func([440]) == [440]\n.\"\"\"```", "response": "```python\ndef my_func(input1):\n    if not input1:\n        return []\n\n    max_val = input1[0]\n    output = []\n    for num in input1:\n        if num >= max_val:\n            max_val = num\n            output.append(num)\n    return output\n```"}
