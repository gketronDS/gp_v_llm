{"submission": "```python\ndef my_func(input1:str):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a string in form of completed bowling card, with one character per roll. The function should output an integer that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(81348-547/2781533445) == 87\nmy_func(9-459--9X3-8-35X34) == 92\nmy_func(454-51511816164-316-) == 62\nmy_func(11149--58111-48-X33) == 66\nmy_func(8--2--1823X5/9-12X49) == 98\nmy_func(32X1/X6/5162X179/9) == 139\nmy_func(3-7253313571277/215/6) == 80\nmy_func(0/X5-X54181/-8529-) == 111\nmy_func(2-517/8/269/7-4-6-17) == 88\nmy_func(3/9-359-9--82/X4/25) == 121\nmy_func(8--78/51X319/8/8134) == 106\nmy_func(5/9-X2315816-X7-35) == 101\nmy_func(331332-6-151342736-8) == 61\nmy_func(-55/624/9/43-26-2-5/6) == 95\nmy_func(8151722/9/7-42-21663) == 91\nmy_func(267-628/149-8/424/12) == 82\nmy_func(4372238/4135X214571) == 81\nmy_func(XXXXX81XXX-1) == 208\nmy_func(-44142119/612/9-328-) == 81\nmy_func(532/4362X179-41447/5) == 100\nmy_func(219/---661X-6364227) == 72\nmy_func(3/339/5/8-3/-99/-7X56) == 117\nmy_func(53-2356/2527X6--463) == 81\nmy_func(XXXXXXXXXXX9) == 299\nmy_func(531771713/X81449/--) == 98\nmy_func(0/3-9/31X518-X815/4) == 105\nmy_func(X6-7/6-9/X34232251) == 103\nmy_func(817/527/33173/---353) == 79\nmy_func(715-63311/7-9/18X0/2) == 102\nmy_func(26-3X5/-333X-11344) == 74\nmy_func(9-7/9/188---12715-21) == 75\nmy_func(727-614-43--X812/6/3) == 91\nmy_func(7-9/634/71--8/4-XX-3) == 108\nmy_func(13XX24729/X4381-9) == 119\nmy_func(-24-6/4344279-171771) == 77\nmy_func(9/32615125X1471XX42) == 106\nmy_func(8/22448-7-1242539-XX7) == 92\nmy_func(17X3-6/9--5639/3-62) == 90\nmy_func(24-45/X63523/410/-6) == 100\nmy_func(X8-72723-X265152-7) == 93\nmy_func(-16/6/61179/8--49/2/-) == 100\nmy_func(3/9/X7/X8-356251X0/) == 147\nmy_func(-78--424818-54634335) == 75\nmy_func(X5/1--7X6-X624327) == 103\nmy_func(8/45338/12179-9/8-24) == 92\nmy_func(31X429/7133X4/4/9-) == 119\nmy_func(-9617/X7/X417/427/1) == 127\nmy_func(7-35361525811/81538/X) == 101\nmy_func(519/528-7--19-229-8-) == 74\nmy_func(276/625/348-513622-9) == 89\nmy_func(71-4X441552X54X4-) == 97\nmy_func(X2362X336218339/27) == 94\nmy_func(9-411533173-2--7X71) == 72\nmy_func(X-8126-635314548-62) == 82\nmy_func(6116X3-X9/351-3354) == 87\nmy_func(359-815253X542/2144) == 92\nmy_func(-3X9/X-9-851337-81) == 107\nmy_func(8-X52724/112761X43) == 94\nmy_func(7115XXX548/279-X53) == 145\nmy_func(7/2-8-X36X33516362) == 95\nmy_func(4413X44625-9/346226) == 87\nmy_func(548-8-8154725-9-9/6-) == 88\nmy_func(-4-/-2-/-7-6-/-3-/-4) == 66\nmy_func(139/9-4/339/26X7/43) == 112\nmy_func(4442-521-544328/9/9/-) == 88\nmy_func(----------3/--------) == 10\nmy_func(9-9-145-310/36437-81) == 77\nmy_func(6/8/62X-432X-7323/1) == 105\nmy_func(--814/36517-4/X2412) == 89\nmy_func(726371458/3-72334144) == 79\nmy_func(X45819/4/16449/9/X8/) == 136\nmy_func(4-8-8-2624X169/3323) == 82\nmy_func(2281-59-336/189-53--) == 70\nmy_func(--X34--------------) == 24\nmy_func(-215625-157/9/8-4/26) == 92\nmy_func(-86--235525453X3651) == 82\nmy_func(4331532/2151X515-45) == 76\nmy_func(8/111/511/8-X-6819/3) == 104\nmy_func(329-X715-61X7-X62) == 102\nmy_func(255-9/6-XX317-3-54) == 94\nmy_func(6/273-4-169/5472369-) == 86\nmy_func(21X811652167/6/9-3-) == 99\nmy_func(18-5151271X34529/8-) == 88\nmy_func(629-7/2211XX618/72) == 111\nmy_func(X44439/6/342/-8613/1) == 105\nmy_func(15629-610/5-81-42-2-) == 67\nmy_func(5/618/33718-41627---) == 78\nmy_func(X141422-672-7244-8-) == 69\nmy_func(5/9-72X247/5-437-81) == 102\nmy_func(2744456-7-211331-171) == 59\nmy_func(6/6-2-71-4818-27X6/7) == 99\nmy_func(3/4-4-18X4/1843356-) == 92\nmy_func(X27349-63719/71169/4) == 107\nmy_func(6/9-359-713623X6/9/1) == 117\nmy_func(1334X9/8-4--3715-8/2) == 89\nmy_func(XXXX9/XXX2/XXX) == 251\nmy_func(9/1-638/12X9/7/4172) == 100\nmy_func(23449-7/6/63-734-953) == 94\nmy_func(311735238-9/6-15-97/9) == 89\nmy_func(1445159/449-6243-841) == 79\nmy_func(33X-28/9-9-7-6/X71) == 110\nmy_func(8/--0/219/31626/7262) == 84\nmy_func(2263237/XX3/-58-72) == 113\nmy_func(141852337-9/7172455/1) == 88\nmy_func(324/9/8171X6-X7-18) == 114\nmy_func(26--9-8-X5127185452) == 81\nmy_func(44X42X459/3/349-5-) == 105\nmy_func(9---7/-33512149/27-6) == 65\nmy_func(5/3-8-X-162445-8181) == 75\nmy_func(8151X618/-1426/71X13) == 95\nmy_func(X52X52X52X52X52) == 120\nmy_func(272261549-X-58/X5/8) == 116\nmy_func(4/149/72116/-72-52--) == 70\nmy_func(2581-3--9/219-814545) == 70\nmy_func(63152/9-42414/9/2-16) == 94\nmy_func(7-8121X8--9269-369/4) == 94\nmy_func(174152537/229-2563-4) == 73\nmy_func(----------XX7-----) == 51\nmy_func(62459-31444/3-54319-) == 76\nmy_func(72265/6112719/9/--6-) == 86\nmy_func(41X9-9-7/2312813471) == 86\nmy_func(5/5/5/5/5/5/5/5/5/5/5) == 150\nmy_func(------3/61----------) == 23\nmy_func(138-3535-35-167--46-) == 60\nmy_func(11111111111111111111) == 20\nmy_func(2-3/276-7-X612/2723) == 86\nmy_func(6-36-42463-733445335) == 71\nmy_func(2-4/X8172-9261-2/43) == 98\nmy_func(123/X--9/9-519-7/7/-) == 103\nmy_func(44718/4132-48-4/4111) == 73\nmy_func(9/8-6/-28112-38/1/-5) == 79\nmy_func(1/5-0/X4461-1X9/44) == 116\nmy_func(2/5-52434571--7/6151) == 80\nmy_func(636-618-8/363523X-2) == 79\nmy_func(184317-7182144444471) == 75\nmy_func(536134X429--132332-) == 67\nmy_func(XX3362722-62218-9/8) == 101\nmy_func(X357/-862-771628/11) == 88\nmy_func(5/627/-8538/353/5/51) == 107\nmy_func(7-4441-711-243634331) == 58\nmy_func(6/6-5/5--5435/8/X71) == 118\nmy_func(53X365241356/5-61X77) == 107\nmy_func(X414333517/8/15166/9) == 100\nmy_func(-643112-619/X629-9/8) == 97\nmy_func(22428/6223X22X31-3) == 78\nmy_func(818/X22-112-48181-7) == 80\nmy_func(------X------------) == 10\nmy_func(8/17216/62221/5-2-51) == 78\nmy_func(711622--6/224253X-5) == 69\nmy_func(111111X111111111111) == 30\nmy_func(XXXXX----------) == 120\nmy_func(6/-553-59-5/7/X3-25) == 97\nmy_func(-4536/815-22519-X72) == 91\nmy_func(X815/9-639-6/363135) == 108\nmy_func(145152253/63368-8/11) == 80\nmy_func(15637/369/23-69/--72) == 79\nmy_func(1/1/9-71436/-662X34) == 102\nmy_func(7/X7-X44X3/-85221) == 118\nmy_func(5/13613-8/33425-53-3) == 66\nmy_func(-37/226-7261X26X8-) == 93\nmy_func(1326352-X81X5-72X9/) == 99\nmy_func(521--15272X3/611/XX1) == 109\nmy_func(15454413636171X4/X98) == 118\nmy_func(525245514-53117/5263) == 74\nmy_func(542/9-458-8/8/433--9) == 105\nmy_func(81719/X63446/5/4123) == 112\nmy_func(9-8/328-3-X21X5/7/2) == 103\nmy_func(-64-7/9/369-2-4/527/3) == 97\nmy_func(--------------------) == 0\nmy_func(--------------1-----) == 1\nmy_func(--8--45/7151115327X22) == 76\nmy_func(X7-339-187/8/7/8/9/-) == 130\nmy_func(24815361356212813581) == 75\nmy_func(5162X6/1542628/X51) == 107\nmy_func(7261425-25X5/248/6-) == 94\nmy_func(414/8/X9/9/-89--527) == 123\nmy_func(6/9-27-4238/529/6/3-) == 100\nmy_func(5427X511-72528/8-9/5) == 98\nmy_func(-94-27427-X7/7/43-9) == 102\nmy_func(7--29-278-1/-1349/13) == 68\nmy_func(2-7/2381419/3/161226) == 75\nmy_func(X-244448/25X7-4161) == 85\nmy_func(8/9/5-629-610/7-8134) == 103\nmy_func(61X367/719-210/183-) == 95\nmy_func(621/126/2/2/9--3--7/6) == 93\nmy_func(4/X115-26279/-59-X96) == 105\nmy_func(1611-29/X9/5-816-72) == 95\nmy_func(25X81-36/236145159/9) == 96\nmy_func(XXXXXXXXXXXX) == 300\nmy_func(4371-6446-9-42612511) == 66\nmy_func(151534159/X6/9/3172) == 110\nmy_func(8115X1-23-38--56/-9) == 67\nmy_func(-5338/624-712236X32) == 80\nmy_func(-49/347233X2-3/8/X23) == 106\nmy_func(54355/X5/81728/72-6) == 125\nmy_func(--0/24-6-8-38/236272) == 69\nmy_func(62341-X349-4/X5/45) == 112\nmy_func(-/-/-/-/-/-/-/-/-/-/-) == 100\nmy_func(438---7-8-9/-333X4/1) == 80\nmy_func(6-33349-4-34818126--) == 65\n.\"\"\"```", "response": "```python\ndef my_func(input1: str):\n    frames = []\n    i = 0\n    while i < len(input1):\n        if len(frames) == 10:\n            frames[-1] += input1[i:]\n            break\n        if input1[i] == 'X':\n            frames.append(\"X\")\n            i += 1\n        elif input1[i] == '/':\n            frames[-1] += '/'\n            i += 1\n        elif input1[i] == '-':\n            if len(frames) == 0 or len(frames[-1]) == 2:\n                frames.append('-')\n            else:\n                frames[-1] += '-'\n            i += 1\n        else:\n            if len(frames) == 0 or len(frames[-1]) == 2 or frames[-1] == \"X\":\n                frames.append(input1[i])\n            else:\n                frames[-1] += input1[i]\n            i += 1\n\n    score = 0\n    for idx, frame in enumerate(frames):\n        if frame == 'X':\n            score += 10\n            if idx + 1 < len(frames):\n                next_frame = frames[idx + 1]\n                if next_frame.startswith('X'):\n                    score += 10\n                    if idx + 2 < len(frames):\n                        next_next_frame = frames[idx + 2]\n                        if next_next_frame.startswith('X'):\n                            score += 10\n                        else:\n                            score += sum(int(c) for c in next_next_frame if c.isdigit())\n                    elif len(next_frame) > 1:\n                        score += sum(int(c) for c in next_frame[1] if c.isdigit())\n                else:\n                    score += sum(int(c) for c in next_frame if c.isdigit())\n        elif '/' in frame:\n            score += 10\n            if idx + 1 < len(frames):\n                next_frame = frames[idx + 1]\n                if next_frame.startswith('X'):\n                    score += 10\n                else:\n                    score += int(next_frame[0]) if next_frame[0].isdigit() else 0\n        else:\n            score += sum(int(c) for c in frame if c.isdigit())\n    \n    return score\n```"}
