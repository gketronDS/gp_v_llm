{"submission": "```python\ndef my_func(input1:str):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a string in form of completed bowling card, with one character per roll. The function should output an integer that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(4581182/327152X9/21) == 95\nmy_func(9-31-7330/27237/XX-1) == 103\nmy_func(9/5/4/52225-366-4542) == 90\nmy_func(548-4/44-88/3/42729-) == 98\nmy_func(326-539/4351638/229/3) == 84\nmy_func(XXXXXXXXXXX9) == 299\nmy_func(-64351X8/X33328-7-) == 101\nmy_func(11111111111111111111) == 20\nmy_func(--------------1-----) == 1\nmy_func(5/-621-24372636-119-) == 63\nmy_func(35261635628124X2-72) == 77\nmy_func(716-9/9--14/2735X3-) == 88\nmy_func(7-X3171245154X7281) == 91\nmy_func(1443425172--529-7-81) == 65\nmy_func(4/2/22632251-89-9/-1) == 75\nmy_func(----------XX7-----) == 51\nmy_func(9/1-2336544145X3-8/9) == 84\nmy_func(X9-41451-9-62252461) == 80\nmy_func(335/18X3/7122X--36) == 94\nmy_func(62246-818-8-619-248/5) == 82\nmy_func(411/5371X9/9/428/8/4) == 127\nmy_func(621/279-5/63322-X2-) == 84\nmy_func(9/235-9/XX54816233) == 118\nmy_func(9/32621743231/448/81) == 95\nmy_func(XX7222X628/-8549-) == 121\nmy_func(X9-259-168/-4-3262-) == 78\nmy_func(816/8-219/41459-72X-3) == 97\nmy_func(224-1452-8X3-53129/3) == 68\nmy_func(8171XX-7X71X5231) == 115\nmy_func(532/4362X179-41447/5) == 100\nmy_func(23-145726-9-8-8-1152) == 64\nmy_func(728/13621454256/6227) == 86\nmy_func(33X9-9-6/6-9-71X4-) == 100\nmy_func(369/266-6--923X3/32) == 93\nmy_func(-272X5352XX811881) == 118\nmy_func(-81/9-X-78-33725341) == 96\nmy_func(8/4-X63X1425449-16) == 97\nmy_func(8-9-42-435134/8/6352) == 89\nmy_func(18X166-125-X369-52) == 91\nmy_func(8/512613X-3634/7113) == 87\nmy_func(5/5/5/5/5/5/5/5/5/5/5) == 150\nmy_func(8-226-11819-15155/9-) == 78\nmy_func(5-7-5371X2181--1415) == 64\nmy_func(217-9/1744352415-58/1) == 73\nmy_func(7/4/4-9--8-9-845-863) == 92\nmy_func(8/X8/X81265-6/2/X83) == 154\nmy_func(13156-XX-7326-0/15) == 88\nmy_func(5/459/421/358144-34/8) == 102\nmy_func(1/18819-7244268-6/13) == 86\nmy_func(8/0/81364/5418-633X96) == 116\nmy_func(XXXX9/XXX2/XXX) == 251\nmy_func(719-62-86-612117-531) == 66\nmy_func(8/18-95-247-X54144/X) == 100\nmy_func(8125514-811/6/9-X-4) == 97\nmy_func(7-81637-45249-457--5) == 77\nmy_func(X2481319-2-7-9/2671) == 81\nmy_func(24269-718/242-6-8/X9/) == 97\nmy_func(X624433X7234--1142) == 83\nmy_func(53263/X171752631136) == 97\nmy_func(8161315--272X334-X57) == 84\nmy_func(363-8-246/4/13452/13) == 79\nmy_func(9-X7/245-1-9-9/2-13) == 80\nmy_func(-5427227-5149-225--3) == 60\nmy_func(12X41X-53-14249-71) == 74\nmy_func(359/6135545-8--7--9/5) == 83\nmy_func(5-9/-41-166/347-1/--) == 64\nmy_func(------3/61----------) == 23\nmy_func(9/XX6/33544/8/163-) == 133\nmy_func(9/7-633443722/268-24) == 90\nmy_func(7-2/21--638-51X2/8-) == 91\nmy_func(232636--627-4/713-7/9) == 84\nmy_func(16629-9-62358/622/34) == 93\nmy_func(8171-5129/2745279/72) == 90\nmy_func(318/-9-314-763416/6/3) == 81\nmy_func(-/-/-/-/-/-/-/-/-/-/-) == 100\nmy_func(5/725417X728/547/-1) == 106\nmy_func(26431/24349/6-1/4-12) == 83\nmy_func(-5X3-437-6318411-X6/) == 79\nmy_func(6-1362X9/63X-11135) == 85\nmy_func(2/6341263-43638-9-54) == 83\nmy_func(13611452322-2144-772) == 57\nmy_func(24815361356212813581) == 75\nmy_func(-69/72-8629/8/2/-96-) == 103\nmy_func(3232-30/6341-36/32XX5) == 89\nmy_func(61-313-48163X6/X12) == 92\nmy_func(1/-8X4-369--3622-72) == 76\nmy_func(3/8/7-6/3/18119/258-) == 104\nmy_func(8124X7-9/519-536-6-) == 89\nmy_func(819/510/62123-726/X15) == 105\nmy_func(9/X279/5235167/2672) == 114\nmy_func(812-3-8/81X9---6--1) == 76\nmy_func(-8246/5143X45326136) == 91\nmy_func(319/1271347/816--41-) == 71\nmy_func(2-710/8-226-8/X9/72) == 112\nmy_func(4/22X818-8/X4/4-9/3) == 123\nmy_func(8/2/626--4418--97/42) == 88\nmy_func(436-362-156-5/0/6272) == 79\nmy_func(X52X52X52X52X52) == 120\nmy_func(2--64/8/717-181/6161) == 97\nmy_func(3421X9/X-142528--8) == 91\nmy_func(--448132317-114-X7/7) == 76\nmy_func(----------3/--------) == 10\nmy_func(X-17-61714/X4/14-4) == 94\nmy_func(--------------------) == 0\nmy_func(819--88/8/X12450/17) == 108\nmy_func(X11X32441-62517-61) == 71\nmy_func(-1715/5263718-8/1/X6/) == 107\nmy_func(9/3132174-6/X42279/3) == 98\nmy_func(------X------------) == 10\nmy_func(1-31811-33X-89/9--4) == 79\nmy_func(138154X-34/229-9-XX9) == 101\nmy_func(4/33449/6-362171X41) == 89\nmy_func(X-28-3562X7/9/4-5/-) == 105\nmy_func(2-X2--14/14249-237-) == 60\nmy_func(54112--69--4424-5181) == 57\nmy_func(XXXXX81XXX-1) == 208\nmy_func(8-X23215/9/347/X13) == 108\nmy_func(-26-8-5/42--340/3/21) == 71\nmy_func(546/-6-49-6/53277131) == 82\nmy_func(548-63139-X3154149-) == 80\nmy_func(XX8/5/61620/8/2151) == 133\nmy_func(3/1/-8--0/X14635326) == 94\nmy_func(81547163719/5/266-X49) == 107\nmy_func(13-86-71X526/238/71) == 92\nmy_func(36XX24612735346172) == 100\nmy_func(629/X7-8/42452118-2) == 95\nmy_func(8/1171812/7/543351-8) == 91\nmy_func(5/7-7/3312368-6134-9) == 86\nmy_func(8/8124--8/333-239-23) == 74\nmy_func(633-279/X513626639-) == 98\nmy_func(368181528-8-15513562) == 78\nmy_func(0/9/X549/8116276145) == 126\nmy_func(--71515141618----54-) == 49\nmy_func(0/23-2X6/9/5/9/-8X16) == 127\nmy_func(43129-35418-62338125) == 70\nmy_func(72258/44549-5-9-6211) == 80\nmy_func(8/6312518/9/811417X68) == 117\nmy_func(0/621121X715--49/4-) == 82\nmy_func(-76-18275-728/62X1-) == 81\nmy_func(XXXXXXXXXXXX) == 300\nmy_func(XXXXX----------) == 120\nmy_func(9/8/--18X72126-6-15) == 86\nmy_func(527/-725X8171541/1/X) == 107\nmy_func(6244143-529/9/624/9/6) == 109\nmy_func(-6X815162X9/X36XXX) == 146\nmy_func(35X619-11X8/516-11) == 92\nmy_func(--X34--------------) == 24\nmy_func(4/152-1-9/412-8/5215) == 69\nmy_func(8/2212X81718124-34/8) == 91\nmy_func(9-819-6-18-2-48/8-16) == 81\nmy_func(44X-69/8/151423XX74) == 123\nmy_func(-4-/-2-/-7-6-/-3-/-4) == 66\nmy_func(1621367218523/338-X23) == 86\nmy_func(44-49/8/36X6/7/5-5/6) == 125\nmy_func(9/635-2134-345X249-) == 83\nmy_func(X819/-4239--29-81X38) == 97\nmy_func(-55-6/447-6171729-6-) == 78\nmy_func(62430/549-5-5/8/63X-2) == 108\nmy_func(723214260/619/4/8/32) == 100\nmy_func(446216615-527-1-X8/5) == 85\nmy_func(4/62X216-161-118-13) == 68\nmy_func(43224343265-165-6351) == 65\nmy_func(-92727268/1424X719-) == 92\nmy_func(41X6/62139/8/X3654) == 128\nmy_func(6214137--6155-729/24) == 68\nmy_func(4-81639-9/7222355/14) == 85\nmy_func(X21349-6/X6--97172) == 100\nmy_func(7234-2429/457-X1/9-) == 102\nmy_func(X8118X-7348/6-33-3) == 99\nmy_func(341136215461X729/31) == 82\nmy_func(23X9/815/XX62722-) == 135\nmy_func(8/9-33818-5/14534271) == 89\nmy_func(629-27--52X6-7-254-) == 73\nmy_func(111111X111111111111) == 30\nmy_func(44273324-514X7-2/44) == 85\nmy_func(5345X9-54XX9-3322) == 121\nmy_func(713381728121512-2/63) == 77\nmy_func(63X6/0/5-6-81-69/32) == 98\nmy_func(9-8-438/0/316-1/21-4) == 76\nmy_func(-8-92/233135X8/4415) == 94\nmy_func(1/1/714/4-2741X8151) == 102\nmy_func(9/-5522271-44-9-3435) == 66\nmy_func(-83-2552X339--19-1-) == 67\nmy_func(-29/23-534616-6254X23) == 76\nmy_func(35819/X178/9/63364-) == 120\nmy_func(-56161624/8-21259/72) == 89\nmy_func(7/X8/227/2/327/4435) == 116\nmy_func(7/9/71X8-3/539/-727) == 119\nmy_func(14X271/438/5/8/7/6-) == 126\nmy_func(146211X4451--158126) == 70\nmy_func(72X31X9-5/1126-651) == 88\nmy_func(8-11639/8--523-87/51) == 84\nmy_func(9/9-22814334-74581-8) == 88\nmy_func(17618-45X1/9/518/71) == 117\nmy_func(3/8/0/4-34X4132275/6) == 103\nmy_func(815/9/4-71357-44XXX3) == 130\nmy_func(7-438-8151415133356-) == 68\nmy_func(26716-35528/2-636/5/X) == 95\nmy_func(7115XXX548/279-X53) == 145\nmy_func(X817--424-76-9-6144) == 82\n.\"\"\"```", "response": "```python\ndef my_func(input1: str):\n    def score_frame(frame, next_rolls):\n        frame_score, i = 0, 0\n        while i < len(frame):\n            roll = frame[i]\n            if roll == 'X':  \n                frame_score += 10\n                frame_score += next_roll_value(next_rolls, 2)\n                i += 1\n            elif roll == '/':  \n                frame_score += 10 - previous_roll_value(frame[i - 1])\n                frame_score += next_roll_value(next_rolls, 1)\n                i += 1\n            elif roll == '-':  \n                i += 1\n            else:  \n                frame_score += int(roll)\n                i += 1\n        return frame_score\n\n    def next_roll_value(rolls, count):\n        score, i = 0, 0\n        while count > 0 and i < len(rolls):\n            roll = rolls[i]\n            if roll == 'X':\n                score += 10\n                count -= 1\n            elif roll == '/':\n                score += 10 - previous_roll_value(rolls[i - 1])\n                count -= 1\n            elif roll == '-':\n                i += 1\n                continue\n            else:\n                score += int(roll)\n                count -= 1\n            i += 1\n        return score\n\n    def previous_roll_value(roll):\n        if roll == '-':\n            return 0\n        return int(roll)\n\n    score, i, frame_count = 0, 0, 0\n\n    while frame_count < 10 and i < len(input1):\n        if input1[i] == 'X':\n            score += score_frame('X', input1[i + 1:i + 3])\n            frame_count += 1\n            i += 1\n        else:\n            frame_score = input1[i:i + 2]\n            score += score_frame(frame_score, input1[i + 2:i + 4])\n            frame_count += 1\n            i += 2\n    return score\n```"}
