{"submission": "```python\ndef my_func(input1:str):\n            \"\"\"Alter this python function \"my_func\" to accept inputs containing             a string in form of completed bowling card, with one character per roll. The function should output an integer that replicates the underlying             mechanism of the following examples. Only use base python functions             and do not import any packages. Do not include print statements,             unit tests, in-line comments or multi-line comments.             Examples: my_func(------X------------) == 10\nmy_func(--------------------) == 0\nmy_func(-781717/-76181X526/9) == 100\nmy_func(353-9-9-425/6361X3-) == 83\nmy_func(62318-816/522714515/6) == 87\nmy_func(7115XXX548/279-X53) == 145\nmy_func(------3/61----------) == 23\nmy_func(9-81812-31445321639/3) == 74\nmy_func(5/5/5/5/5/5/5/5/5/5/5) == 150\nmy_func(-25/9-9/9-6-1381527-) == 91\nmy_func(256362-3523/-29/9-9-) == 83\nmy_func(XXXXX----------) == 120\nmy_func(8-3-813172129-8/7226) == 79\nmy_func(189/3-31--6-81312/45) == 71\nmy_func(532/4362X179-41447/5) == 100\nmy_func(356-7122X6-4427-911) == 76\nmy_func(1445819/9/4436459/9-) == 110\nmy_func(6/9/81222-528-6241-1) == 81\nmy_func(----------XX7-----) == 51\nmy_func(4/3/X6-9/9/3/1/X24) == 140\nmy_func(8-7-514-9/8-267-8--5) == 79\nmy_func(9-12X9-22329/7-152-) == 81\nmy_func(4/3-14-6436-XX710/2) == 105\nmy_func(428/318-5314-35-8-27) == 69\nmy_func(XXXXX81XXX-1) == 208\nmy_func(----------3/--------) == 10\nmy_func(X7/8-4121458/X5363) == 118\nmy_func(--X34--------------) == 24\nmy_func(9-448-36X5-4511X72) == 93\nmy_func(11111111111111111111) == 20\nmy_func(717/533412X1841X71) == 100\nmy_func(7-146121624336629--9) == 72\nmy_func(XXXXXXXXXXXX) == 300\nmy_func(24815361356212813581) == 75\nmy_func(X4/9-4-X1343X32X-1) == 108\nmy_func(61618144617/533-5/X5-) == 99\nmy_func(7/4-9-1/-6X6/8163-5) == 104\nmy_func(--------------1-----) == 1\nmy_func(-4-/-2-/-7-6-/-3-/-4) == 66\nmy_func(1-5351715-6-318-61X15) == 69\nmy_func(-65-5-X41141431115/X) == 72\nmy_func(X52X52X52X52X52) == 120\nmy_func(5/32-672X9-X636-15) == 101\nmy_func(51181234174243-86-25) == 67\nmy_func(111111X111111111111) == 30\nmy_func(5-13819/438-16-92763) == 81\nmy_func(-/-/-/-/-/-/-/-/-/-/-) == 100\nmy_func(1/2/17179/346/X7/--) == 109\nmy_func(XXXXXXXXXXX9) == 299\nmy_func(XXXX9/XXX2/XXX) == 251\n.\"\"\"```", "response": "```python\ndef my_func(input1: str):\n    def roll_value(roll):\n        if roll == 'X':\n            return 10\n        elif roll == '/':\n            return 10\n        elif roll == '-':\n            return 0\n        else:\n            return int(roll)\n\n    score = 0\n    frame = 0\n    i = 0\n    while frame < 10:\n        if input1[i] == 'X':\n            score += 10\n            if i + 1 < len(input1):\n                score += roll_value(input1[i + 1])\n            if i + 2 < len(input1):\n                score += roll_value(input1[i + 2])\n            frame += 1\n            i += 1\n        elif i + 1 < len(input1) and input1[i + 1] == '/':\n            score += 10\n            if i + 2 < len(input1):\n                score += roll_value(input1[i + 2])\n            frame += 1\n            i += 2\n        else:\n            score += roll_value(input1[i]) + roll_value(input1[i + 1])\n            frame += 1\n            i += 2\n    return score\n```"}
